[{"t":"pandas.read_pickle","d":"Load pickled pandas object (or any object) from file.","p":"api\/pandas.read_pickle.html#pandas.read_pickle"},{"t":"pandas.read_excel","d":"Read an Excel file into a pandas DataFrame.","p":"api\/pandas.read_excel.html#pandas.read_excel"},{"t":"pandas.ExcelFile.parse","d":"Parse specified sheet(s) into a DataFrame.","p":"api\/pandas.ExcelFile.parse.html#pandas.ExcelFile.parse"},{"t":"pandas.ExcelWriter","d":"Class for writing DataFrame objects into excel sheets.","p":"api\/pandas.ExcelWriter.html#pandas.ExcelWriter"},{"t":"pandas.read_json","d":"Convert a JSON string to pandas object.","p":"api\/pandas.read_json.html#pandas.read_json"},{"t":"pandas.json_normalize","d":"Normalize semi-structured JSON data into a flat table.","p":"api\/pandas.json_normalize.html#pandas.json_normalize"},{"t":"pandas.io.json.build_table_schema","d":"Create a Table schema from data.","p":"api\/pandas.io.json.build_table_schema.html#pandas.io.json.build_table_schema"},{"t":"pandas.read_html","d":"Read HTML tables into a list of DataFrame objects.","p":"api\/pandas.read_html.html#pandas.read_html"},{"t":"pandas.read_hdf","d":"Read from the store, close it if we opened it.","p":"api\/pandas.read_hdf.html#pandas.read_hdf"},{"t":"pandas.HDFStore.put","d":"Store object in HDFStore.","p":"api\/pandas.HDFStore.put.html#pandas.HDFStore.put"},{"t":"pandas.HDFStore.append","d":"Append to Table in file.","p":"api\/pandas.HDFStore.append.html#pandas.HDFStore.append"},{"t":"pandas.HDFStore.get","d":"Retrieve pandas object stored in file.","p":"api\/pandas.HDFStore.get.html#pandas.HDFStore.get"},{"t":"pandas.HDFStore.select","d":"Retrieve pandas object stored in file, optionally based on where criteria.","p":"api\/pandas.HDFStore.select.html#pandas.HDFStore.select"},{"t":"pandas.HDFStore.info","d":"Print detailed information on the store.","p":"api\/pandas.HDFStore.info.html#pandas.HDFStore.info"},{"t":"pandas.HDFStore.keys","d":"Return a list of keys corresponding to objects stored in HDFStore.","p":"api\/pandas.HDFStore.keys.html#pandas.HDFStore.keys"},{"t":"pandas.HDFStore.groups","d":"Return a list of all the top-level nodes.","p":"api\/pandas.HDFStore.groups.html#pandas.HDFStore.groups"},{"t":"pandas.HDFStore.walk","d":"Walk the pytables group hierarchy for pandas objects.","p":"api\/pandas.HDFStore.walk.html#pandas.HDFStore.walk"},{"t":"pandas.read_feather","d":"Load a feather-format object from the file path.","p":"api\/pandas.read_feather.html#pandas.read_feather"},{"t":"pandas.read_parquet","d":"Load a parquet object from the file path, returning a DataFrame.","p":"api\/pandas.read_parquet.html#pandas.read_parquet"},{"t":"pandas.read_orc","d":"Load an ORC object from the file path, returning a DataFrame.","p":"api\/pandas.read_orc.html#pandas.read_orc"},{"t":"pandas.read_sas","d":"Read SAS files stored as either XPORT or SAS7BDAT format files.","p":"api\/pandas.read_sas.html#pandas.read_sas"},{"t":"pandas.read_spss","d":"Load an SPSS file from the file path, returning a DataFrame.","p":"api\/pandas.read_spss.html#pandas.read_spss"},{"t":"pandas.read_sql_table","d":"Read SQL database table into a DataFrame.","p":"api\/pandas.read_sql_table.html#pandas.read_sql_table"},{"t":"pandas.read_sql_query","d":"Read SQL query into a DataFrame.","p":"api\/pandas.read_sql_query.html#pandas.read_sql_query"},{"t":"pandas.read_sql","d":"Read SQL query or database table into a DataFrame.","p":"api\/pandas.read_sql.html#pandas.read_sql"},{"t":"pandas.read_gbq","d":"Load data from Google BigQuery.","p":"api\/pandas.read_gbq.html#pandas.read_gbq"},{"t":"pandas.read_stata","d":"Read Stata file into DataFrame.","p":"api\/pandas.read_stata.html#pandas.read_stata"},{"t":"pandas.io.stata.StataReader.data_label","d":"Return data label of Stata file.","p":"api\/pandas.io.stata.StataReader.data_label.html#pandas.io.stata.StataReader.data_label"},{"t":"pandas.io.stata.StataReader.value_labels","d":"Return a dict, associating each variable name a dict, associating each value its corresponding label.","p":"api\/pandas.io.stata.StataReader.value_labels.html#pandas.io.stata.StataReader.value_labels"},{"t":"pandas.io.stata.StataReader.variable_labels","d":"Return variable labels as a dict, associating each variable name with corresponding label.","p":"api\/pandas.io.stata.StataReader.variable_labels.html#pandas.io.stata.StataReader.variable_labels"},{"t":"pandas.io.stata.StataWriter.write_file","d":"","p":"api\/pandas.io.stata.StataWriter.write_file.html#pandas.io.stata.StataWriter.write_file"},{"t":"pandas.melt","d":"Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.","p":"api\/pandas.melt.html#pandas.melt"},{"t":"pandas.pivot","d":"Return reshaped DataFrame organized by given index \/ column values.","p":"api\/pandas.pivot.html#pandas.pivot"},{"t":"pandas.pivot_table","d":"Create a spreadsheet-style pivot table as a DataFrame.","p":"api\/pandas.pivot_table.html#pandas.pivot_table"},{"t":"pandas.crosstab","d":"Compute a simple cross tabulation of two (or more) factors.","p":"api\/pandas.crosstab.html#pandas.crosstab"},{"t":"pandas.cut","d":"Bin values into discrete intervals.","p":"api\/pandas.cut.html#pandas.cut"},{"t":"pandas.qcut","d":"Quantile-based discretization function.","p":"api\/pandas.qcut.html#pandas.qcut"},{"t":"pandas.merge","d":"Merge DataFrame or named Series objects with a database-style join.","p":"api\/pandas.merge.html#pandas.merge"},{"t":"pandas.merge_ordered","d":"Perform merge with optional filling\/interpolation.","p":"api\/pandas.merge_ordered.html#pandas.merge_ordered"},{"t":"pandas.merge_asof","d":"Perform an asof merge.","p":"api\/pandas.merge_asof.html#pandas.merge_asof"},{"t":"pandas.concat","d":"Concatenate pandas objects along a particular axis with optional set logic along the other axes.","p":"api\/pandas.concat.html#pandas.concat"},{"t":"pandas.get_dummies","d":"Convert categorical variable into dummy\/indicator variables.","p":"api\/pandas.get_dummies.html#pandas.get_dummies"},{"t":"pandas.factorize","d":"Encode the object as an enumerated type or categorical variable.","p":"api\/pandas.factorize.html#pandas.factorize"},{"t":"pandas.unique","d":"Hash table-based unique.","p":"api\/pandas.unique.html#pandas.unique"},{"t":"pandas.wide_to_long","d":"Wide panel to long format.","p":"api\/pandas.wide_to_long.html#pandas.wide_to_long"},{"t":"pandas.isna","d":"Detect missing values for an array-like object.","p":"api\/pandas.isna.html#pandas.isna"},{"t":"pandas.isnull","d":"Detect missing values for an array-like object.","p":"api\/pandas.isnull.html#pandas.isnull"},{"t":"pandas.notna","d":"Detect non-missing values for an array-like object.","p":"api\/pandas.notna.html#pandas.notna"},{"t":"pandas.notnull","d":"Detect non-missing values for an array-like object.","p":"api\/pandas.notnull.html#pandas.notnull"},{"t":"pandas.to_numeric","d":"Convert argument to a numeric type.","p":"api\/pandas.to_numeric.html#pandas.to_numeric"},{"t":"pandas.to_datetime","d":"Convert argument to datetime.","p":"api\/pandas.to_datetime.html#pandas.to_datetime"},{"t":"pandas.to_timedelta","d":"Convert argument to timedelta.","p":"api\/pandas.to_timedelta.html#pandas.to_timedelta"},{"t":"pandas.date_range","d":"Return a fixed frequency DatetimeIndex.","p":"api\/pandas.date_range.html#pandas.date_range"},{"t":"pandas.bdate_range","d":"Return a fixed frequency DatetimeIndex, with business day as the default frequency.","p":"api\/pandas.bdate_range.html#pandas.bdate_range"},{"t":"pandas.period_range","d":"Return a fixed frequency PeriodIndex.","p":"api\/pandas.period_range.html#pandas.period_range"},{"t":"pandas.timedelta_range","d":"Return a fixed frequency TimedeltaIndex, with day as the default frequency.","p":"api\/pandas.timedelta_range.html#pandas.timedelta_range"},{"t":"pandas.infer_freq","d":"Infer the most likely frequency given the input index.","p":"api\/pandas.infer_freq.html#pandas.infer_freq"},{"t":"pandas.interval_range","d":"Return a fixed frequency IntervalIndex.","p":"api\/pandas.interval_range.html#pandas.interval_range"},{"t":"pandas.eval","d":"Evaluate a Python expression as a string using various backends.","p":"api\/pandas.eval.html#pandas.eval"},{"t":"pandas.util.hash_array","d":"Given a 1d array, return an array of deterministic integers.","p":"api\/pandas.util.hash_array.html#pandas.util.hash_array"},{"t":"pandas.util.hash_pandas_object","d":"Return a data hash of the Index\/Series\/DataFrame.","p":"api\/pandas.util.hash_pandas_object.html#pandas.util.hash_pandas_object"},{"t":"pandas.test","d":"","p":"api\/pandas.test.html#pandas.test"},{"t":"pandas.Series","d":"One-dimensional ndarray with axis labels (including time series).","p":"api\/pandas.Series.html#pandas.Series"},{"t":"pandas.Series.index","d":"The index (axis labels) of the Series.","p":"api\/pandas.Series.index.html#pandas.Series.index"},{"t":"pandas.Series.array","d":"The ExtensionArray of the data backing this Series or Index.","p":"api\/pandas.Series.array.html#pandas.Series.array"},{"t":"pandas.Series.values","d":"Return Series as ndarray or ndarray-like depending on the dtype.","p":"api\/pandas.Series.values.html#pandas.Series.values"},{"t":"pandas.Series.dtype","d":"Return the dtype object of the underlying data.","p":"api\/pandas.Series.dtype.html#pandas.Series.dtype"},{"t":"pandas.Series.shape","d":"Return a tuple of the shape of the underlying data.","p":"api\/pandas.Series.shape.html#pandas.Series.shape"},{"t":"pandas.Series.nbytes","d":"Return the number of bytes in the underlying data.","p":"api\/pandas.Series.nbytes.html#pandas.Series.nbytes"},{"t":"pandas.Series.ndim","d":"Number of dimensions of the underlying data, by definition 1.","p":"api\/pandas.Series.ndim.html#pandas.Series.ndim"},{"t":"pandas.Series.size","d":"Return the number of elements in the underlying data.","p":"api\/pandas.Series.size.html#pandas.Series.size"},{"t":"pandas.Series.T","d":"Return the transpose, which is by definition self.","p":"api\/pandas.Series.T.html#pandas.Series.T"},{"t":"pandas.Series.memory_usage","d":"Return the memory usage of the Series.","p":"api\/pandas.Series.memory_usage.html#pandas.Series.memory_usage"},{"t":"pandas.Series.hasnans","d":"Return if I have any nans; enables various perf speedups.","p":"api\/pandas.Series.hasnans.html#pandas.Series.hasnans"},{"t":"pandas.Series.empty","d":"Indicator whether DataFrame is empty.","p":"api\/pandas.Series.empty.html#pandas.Series.empty"},{"t":"pandas.Series.dtypes","d":"Return the dtype object of the underlying data.","p":"api\/pandas.Series.dtypes.html#pandas.Series.dtypes"},{"t":"pandas.Series.name","d":"Return the name of the Series.","p":"api\/pandas.Series.name.html#pandas.Series.name"},{"t":"pandas.Series.flags","d":"Get the properties associated with this pandas object.","p":"api\/pandas.Series.flags.html#pandas.Series.flags"},{"t":"pandas.Series.set_flags","d":"Return a new object with updated flags.","p":"api\/pandas.Series.set_flags.html#pandas.Series.set_flags"},{"t":"pandas.Series.astype","d":"Cast a pandas object to a specified dtype dtype.","p":"api\/pandas.Series.astype.html#pandas.Series.astype"},{"t":"pandas.Series.convert_dtypes","d":"Convert columns to best possible dtypes using dtypes supporting pd.NA.","p":"api\/pandas.Series.convert_dtypes.html#pandas.Series.convert_dtypes"},{"t":"pandas.Series.infer_objects","d":"Attempt to infer better dtypes for object columns.","p":"api\/pandas.Series.infer_objects.html#pandas.Series.infer_objects"},{"t":"pandas.Series.copy","d":"Make a copy of this object\u2019s indices and data.","p":"api\/pandas.Series.copy.html#pandas.Series.copy"},{"t":"pandas.Series.bool","d":"Return the bool of a single element Series or DataFrame.","p":"api\/pandas.Series.bool.html#pandas.Series.bool"},{"t":"pandas.Series.to_numpy","d":"A NumPy ndarray representing the values in this Series or Index.","p":"api\/pandas.Series.to_numpy.html#pandas.Series.to_numpy"},{"t":"pandas.Series.to_period","d":"Convert Series from DatetimeIndex to PeriodIndex.","p":"api\/pandas.Series.to_period.html#pandas.Series.to_period"},{"t":"pandas.Series.to_timestamp","d":"Cast to DatetimeIndex of Timestamps, at beginning of period.","p":"api\/pandas.Series.to_timestamp.html#pandas.Series.to_timestamp"},{"t":"pandas.Series.to_list","d":"Return a list of the values.","p":"api\/pandas.Series.to_list.html#pandas.Series.to_list"},{"t":"pandas.Series.__array__","d":"Return the values as a NumPy array.","p":"api\/pandas.Series.__array__.html#pandas.Series.__array__"},{"t":"pandas.Series.get","d":"Get item from object for given key (ex: DataFrame column).","p":"api\/pandas.Series.get.html#pandas.Series.get"},{"t":"pandas.Series.at","d":"Access a single value for a row\/column label pair.","p":"api\/pandas.Series.at.html#pandas.Series.at"},{"t":"pandas.Series.iat","d":"Access a single value for a row\/column pair by integer position.","p":"api\/pandas.Series.iat.html#pandas.Series.iat"},{"t":"pandas.Series.loc","d":"Access a group of rows and columns by label(s) or a boolean array.","p":"api\/pandas.Series.loc.html#pandas.Series.loc"},{"t":"pandas.Series.iloc","d":"Purely integer-location based indexing for selection by position.","p":"api\/pandas.Series.iloc.html#pandas.Series.iloc"},{"t":"pandas.Series.__iter__","d":"Return an iterator of the values.","p":"api\/pandas.Series.__iter__.html#pandas.Series.__iter__"},{"t":"pandas.Series.items","d":"Lazily iterate over (index, value) tuples.","p":"api\/pandas.Series.items.html#pandas.Series.items"},{"t":"pandas.Series.iteritems","d":"Lazily iterate over (index, value) tuples.","p":"api\/pandas.Series.iteritems.html#pandas.Series.iteritems"},{"t":"pandas.Series.keys","d":"Return alias for index.","p":"api\/pandas.Series.keys.html#pandas.Series.keys"},{"t":"pandas.Series.pop","d":"Return item and drops from series.","p":"api\/pandas.Series.pop.html#pandas.Series.pop"},{"t":"pandas.Series.item","d":"Return the first element of the underlying data as a Python scalar.","p":"api\/pandas.Series.item.html#pandas.Series.item"},{"t":"pandas.Series.xs","d":"Return cross-section from the Series\/DataFrame.","p":"api\/pandas.Series.xs.html#pandas.Series.xs"},{"t":"pandas.Series.add","d":"Return Addition of series and other, element-wise (binary operator add).","p":"api\/pandas.Series.add.html#pandas.Series.add"},{"t":"pandas.Series.sub","d":"Return Subtraction of series and other, element-wise (binary operator sub).","p":"api\/pandas.Series.sub.html#pandas.Series.sub"},{"t":"pandas.Series.mul","d":"Return Multiplication of series and other, element-wise (binary operator mul).","p":"api\/pandas.Series.mul.html#pandas.Series.mul"},{"t":"pandas.Series.div","d":"Return Floating division of series and other, element-wise (binary operator truediv).","p":"api\/pandas.Series.div.html#pandas.Series.div"},{"t":"pandas.Series.truediv","d":"Return Floating division of series and other, element-wise (binary operator truediv).","p":"api\/pandas.Series.truediv.html#pandas.Series.truediv"},{"t":"pandas.Series.floordiv","d":"Return Integer division of series and other, element-wise (binary operator floordiv).","p":"api\/pandas.Series.floordiv.html#pandas.Series.floordiv"},{"t":"pandas.Series.mod","d":"Return Modulo of series and other, element-wise (binary operator mod).","p":"api\/pandas.Series.mod.html#pandas.Series.mod"},{"t":"pandas.Series.pow","d":"Return Exponential power of series and other, element-wise (binary operator pow).","p":"api\/pandas.Series.pow.html#pandas.Series.pow"},{"t":"pandas.Series.radd","d":"Return Addition of series and other, element-wise (binary operator radd).","p":"api\/pandas.Series.radd.html#pandas.Series.radd"},{"t":"pandas.Series.rsub","d":"Return Subtraction of series and other, element-wise (binary operator rsub).","p":"api\/pandas.Series.rsub.html#pandas.Series.rsub"},{"t":"pandas.Series.rmul","d":"Return Multiplication of series and other, element-wise (binary operator rmul).","p":"api\/pandas.Series.rmul.html#pandas.Series.rmul"},{"t":"pandas.Series.rdiv","d":"Return Floating division of series and other, element-wise (binary operator rtruediv).","p":"api\/pandas.Series.rdiv.html#pandas.Series.rdiv"},{"t":"pandas.Series.rtruediv","d":"Return Floating division of series and other, element-wise (binary operator rtruediv).","p":"api\/pandas.Series.rtruediv.html#pandas.Series.rtruediv"},{"t":"pandas.Series.rfloordiv","d":"Return Integer division of series and other, element-wise (binary operator rfloordiv).","p":"api\/pandas.Series.rfloordiv.html#pandas.Series.rfloordiv"},{"t":"pandas.Series.rmod","d":"Return Modulo of series and other, element-wise (binary operator rmod).","p":"api\/pandas.Series.rmod.html#pandas.Series.rmod"},{"t":"pandas.Series.rpow","d":"Return Exponential power of series and other, element-wise (binary operator rpow).","p":"api\/pandas.Series.rpow.html#pandas.Series.rpow"},{"t":"pandas.Series.combine","d":"Combine the Series with a Series or scalar according to func.","p":"api\/pandas.Series.combine.html#pandas.Series.combine"},{"t":"pandas.Series.combine_first","d":"Combine Series values, choosing the calling Series\u2019s values first.","p":"api\/pandas.Series.combine_first.html#pandas.Series.combine_first"},{"t":"pandas.Series.round","d":"Round each value in a Series to the given number of decimals.","p":"api\/pandas.Series.round.html#pandas.Series.round"},{"t":"pandas.Series.lt","d":"Return Less than of series and other, element-wise (binary operator lt).","p":"api\/pandas.Series.lt.html#pandas.Series.lt"},{"t":"pandas.Series.gt","d":"Return Greater than of series and other, element-wise (binary operator gt).","p":"api\/pandas.Series.gt.html#pandas.Series.gt"},{"t":"pandas.Series.le","d":"Return Less than or equal to of series and other, element-wise (binary operator le).","p":"api\/pandas.Series.le.html#pandas.Series.le"},{"t":"pandas.Series.ge","d":"Return Greater than or equal to of series and other, element-wise (binary operator ge).","p":"api\/pandas.Series.ge.html#pandas.Series.ge"},{"t":"pandas.Series.ne","d":"Return Not equal to of series and other, element-wise (binary operator ne).","p":"api\/pandas.Series.ne.html#pandas.Series.ne"},{"t":"pandas.Series.eq","d":"Return Equal to of series and other, element-wise (binary operator eq).","p":"api\/pandas.Series.eq.html#pandas.Series.eq"},{"t":"pandas.Series.product","d":"Return the product of the values over the requested axis.","p":"api\/pandas.Series.product.html#pandas.Series.product"},{"t":"pandas.Series.dot","d":"Compute the dot product between the Series and the columns of other.","p":"api\/pandas.Series.dot.html#pandas.Series.dot"},{"t":"pandas.Series.apply","d":"Invoke function on values of Series.","p":"api\/pandas.Series.apply.html#pandas.Series.apply"},{"t":"pandas.Series.agg","d":"Aggregate using one or more operations over the specified axis.","p":"api\/pandas.Series.agg.html#pandas.Series.agg"},{"t":"pandas.Series.aggregate","d":"Aggregate using one or more operations over the specified axis.","p":"api\/pandas.Series.aggregate.html#pandas.Series.aggregate"},{"t":"pandas.Series.transform","d":"Call func on self producing a Series with transformed values.","p":"api\/pandas.Series.transform.html#pandas.Series.transform"},{"t":"pandas.Series.map","d":"Map values of Series according to input correspondence.","p":"api\/pandas.Series.map.html#pandas.Series.map"},{"t":"pandas.Series.groupby","d":"Group Series using a mapper or by a Series of columns.","p":"api\/pandas.Series.groupby.html#pandas.Series.groupby"},{"t":"pandas.Series.rolling","d":"Provide rolling window calculations.","p":"api\/pandas.Series.rolling.html#pandas.Series.rolling"},{"t":"pandas.Series.expanding","d":"Provide expanding transformations.","p":"api\/pandas.Series.expanding.html#pandas.Series.expanding"},{"t":"pandas.Series.ewm","d":"Provide exponential weighted (EW) functions.","p":"api\/pandas.Series.ewm.html#pandas.Series.ewm"},{"t":"pandas.Series.pipe","d":"Apply func(self, *args, **kwargs).","p":"api\/pandas.Series.pipe.html#pandas.Series.pipe"},{"t":"pandas.Series.abs","d":"Return a Series\/DataFrame with absolute numeric value of each element.","p":"api\/pandas.Series.abs.html#pandas.Series.abs"},{"t":"pandas.Series.all","d":"Return whether all elements are True, potentially over an axis.","p":"api\/pandas.Series.all.html#pandas.Series.all"},{"t":"pandas.Series.any","d":"Return whether any element is True, potentially over an axis.","p":"api\/pandas.Series.any.html#pandas.Series.any"},{"t":"pandas.Series.autocorr","d":"Compute the lag-N autocorrelation.","p":"api\/pandas.Series.autocorr.html#pandas.Series.autocorr"},{"t":"pandas.Series.between","d":"Return boolean Series equivalent to left <= series <= right.","p":"api\/pandas.Series.between.html#pandas.Series.between"},{"t":"pandas.Series.clip","d":"Trim values at input threshold(s).","p":"api\/pandas.Series.clip.html#pandas.Series.clip"},{"t":"pandas.Series.corr","d":"Compute correlation with other Series, excluding missing values.","p":"api\/pandas.Series.corr.html#pandas.Series.corr"},{"t":"pandas.Series.count","d":"Return number of non-NA\/null observations in the Series.","p":"api\/pandas.Series.count.html#pandas.Series.count"},{"t":"pandas.Series.cov","d":"Compute covariance with Series, excluding missing values.","p":"api\/pandas.Series.cov.html#pandas.Series.cov"},{"t":"pandas.Series.cummax","d":"Return cumulative maximum over a DataFrame or Series axis.","p":"api\/pandas.Series.cummax.html#pandas.Series.cummax"},{"t":"pandas.Series.cummin","d":"Return cumulative minimum over a DataFrame or Series axis.","p":"api\/pandas.Series.cummin.html#pandas.Series.cummin"},{"t":"pandas.Series.cumprod","d":"Return cumulative product over a DataFrame or Series axis.","p":"api\/pandas.Series.cumprod.html#pandas.Series.cumprod"},{"t":"pandas.Series.cumsum","d":"Return cumulative sum over a DataFrame or Series axis.","p":"api\/pandas.Series.cumsum.html#pandas.Series.cumsum"},{"t":"pandas.Series.describe","d":"Generate descriptive statistics.","p":"api\/pandas.Series.describe.html#pandas.Series.describe"},{"t":"pandas.Series.diff","d":"First discrete difference of element.","p":"api\/pandas.Series.diff.html#pandas.Series.diff"},{"t":"pandas.Series.factorize","d":"Encode the object as an enumerated type or categorical variable.","p":"api\/pandas.Series.factorize.html#pandas.Series.factorize"},{"t":"pandas.Series.kurt","d":"Return unbiased kurtosis over requested axis.","p":"api\/pandas.Series.kurt.html#pandas.Series.kurt"},{"t":"pandas.Series.mad","d":"Return the mean absolute deviation of the values over the requested axis.","p":"api\/pandas.Series.mad.html#pandas.Series.mad"},{"t":"pandas.Series.max","d":"Return the maximum of the values over the requested axis.","p":"api\/pandas.Series.max.html#pandas.Series.max"},{"t":"pandas.Series.mean","d":"Return the mean of the values over the requested axis.","p":"api\/pandas.Series.mean.html#pandas.Series.mean"},{"t":"pandas.Series.median","d":"Return the median of the values over the requested axis.","p":"api\/pandas.Series.median.html#pandas.Series.median"},{"t":"pandas.Series.min","d":"Return the minimum of the values over the requested axis.","p":"api\/pandas.Series.min.html#pandas.Series.min"},{"t":"pandas.Series.mode","d":"Return the mode(s) of the Series.","p":"api\/pandas.Series.mode.html#pandas.Series.mode"},{"t":"pandas.Series.nlargest","d":"Return the largest n elements.","p":"api\/pandas.Series.nlargest.html#pandas.Series.nlargest"},{"t":"pandas.Series.nsmallest","d":"Return the smallest n elements.","p":"api\/pandas.Series.nsmallest.html#pandas.Series.nsmallest"},{"t":"pandas.Series.pct_change","d":"Percentage change between the current and a prior element.","p":"api\/pandas.Series.pct_change.html#pandas.Series.pct_change"},{"t":"pandas.Series.prod","d":"Return the product of the values over the requested axis.","p":"api\/pandas.Series.prod.html#pandas.Series.prod"},{"t":"pandas.Series.quantile","d":"Return value at the given quantile.","p":"api\/pandas.Series.quantile.html#pandas.Series.quantile"},{"t":"pandas.Series.rank","d":"Compute numerical data ranks (1 through n) along axis.","p":"api\/pandas.Series.rank.html#pandas.Series.rank"},{"t":"pandas.Series.sem","d":"Return unbiased standard error of the mean over requested axis.","p":"api\/pandas.Series.sem.html#pandas.Series.sem"},{"t":"pandas.Series.skew","d":"Return unbiased skew over requested axis.","p":"api\/pandas.Series.skew.html#pandas.Series.skew"},{"t":"pandas.Series.std","d":"Return sample standard deviation over requested axis.","p":"api\/pandas.Series.std.html#pandas.Series.std"},{"t":"pandas.Series.sum","d":"Return the sum of the values over the requested axis.","p":"api\/pandas.Series.sum.html#pandas.Series.sum"},{"t":"pandas.Series.var","d":"Return unbiased variance over requested axis.","p":"api\/pandas.Series.var.html#pandas.Series.var"},{"t":"pandas.Series.kurtosis","d":"Return unbiased kurtosis over requested axis.","p":"api\/pandas.Series.kurtosis.html#pandas.Series.kurtosis"},{"t":"pandas.Series.unique","d":"Return unique values of Series object.","p":"api\/pandas.Series.unique.html#pandas.Series.unique"},{"t":"pandas.Series.nunique","d":"Return number of unique elements in the object.","p":"api\/pandas.Series.nunique.html#pandas.Series.nunique"},{"t":"pandas.Series.is_unique","d":"Return boolean if values in the object are unique.","p":"api\/pandas.Series.is_unique.html#pandas.Series.is_unique"},{"t":"pandas.Series.is_monotonic","d":"Return boolean if values in the object are monotonic_increasing.","p":"api\/pandas.Series.is_monotonic.html#pandas.Series.is_monotonic"},{"t":"pandas.Series.is_monotonic_increasing","d":"Alias for is_monotonic.","p":"api\/pandas.Series.is_monotonic_increasing.html#pandas.Series.is_monotonic_increasing"},{"t":"pandas.Series.is_monotonic_decreasing","d":"Return boolean if values in the object are monotonic_decreasing.","p":"api\/pandas.Series.is_monotonic_decreasing.html#pandas.Series.is_monotonic_decreasing"},{"t":"pandas.Series.value_counts","d":"Return a Series containing counts of unique values.","p":"api\/pandas.Series.value_counts.html#pandas.Series.value_counts"},{"t":"pandas.Series.align","d":"Align two objects on their axes with the specified join method.","p":"api\/pandas.Series.align.html#pandas.Series.align"},{"t":"pandas.Series.drop","d":"Return Series with specified index labels removed.","p":"api\/pandas.Series.drop.html#pandas.Series.drop"},{"t":"pandas.Series.droplevel","d":"Return DataFrame with requested index \/ column level(s) removed.","p":"api\/pandas.Series.droplevel.html#pandas.Series.droplevel"},{"t":"pandas.Series.drop_duplicates","d":"Return Series with duplicate values removed.","p":"api\/pandas.Series.drop_duplicates.html#pandas.Series.drop_duplicates"},{"t":"pandas.Series.duplicated","d":"Indicate duplicate Series values.","p":"api\/pandas.Series.duplicated.html#pandas.Series.duplicated"},{"t":"pandas.Series.equals","d":"Test whether two objects contain the same elements.","p":"api\/pandas.Series.equals.html#pandas.Series.equals"},{"t":"pandas.Series.first","d":"Select initial periods of time series data based on a date offset.","p":"api\/pandas.Series.first.html#pandas.Series.first"},{"t":"pandas.Series.head","d":"Return the first n rows.","p":"api\/pandas.Series.head.html#pandas.Series.head"},{"t":"pandas.Series.idxmax","d":"Return the row label of the maximum value.","p":"api\/pandas.Series.idxmax.html#pandas.Series.idxmax"},{"t":"pandas.Series.idxmin","d":"Return the row label of the minimum value.","p":"api\/pandas.Series.idxmin.html#pandas.Series.idxmin"},{"t":"pandas.Series.isin","d":"Whether elements in Series are contained in values.","p":"api\/pandas.Series.isin.html#pandas.Series.isin"},{"t":"pandas.Series.last","d":"Select final periods of time series data based on a date offset.","p":"api\/pandas.Series.last.html#pandas.Series.last"},{"t":"pandas.Series.reindex","d":"Conform Series to new index with optional filling logic.","p":"api\/pandas.Series.reindex.html#pandas.Series.reindex"},{"t":"pandas.Series.reindex_like","d":"Return an object with matching indices as other object.","p":"api\/pandas.Series.reindex_like.html#pandas.Series.reindex_like"},{"t":"pandas.Series.rename","d":"Alter Series index labels or name.","p":"api\/pandas.Series.rename.html#pandas.Series.rename"},{"t":"pandas.Series.rename_axis","d":"Set the name of the axis for the index or columns.","p":"api\/pandas.Series.rename_axis.html#pandas.Series.rename_axis"},{"t":"pandas.Series.reset_index","d":"Generate a new DataFrame or Series with the index reset.","p":"api\/pandas.Series.reset_index.html#pandas.Series.reset_index"},{"t":"pandas.Series.sample","d":"Return a random sample of items from an axis of object.","p":"api\/pandas.Series.sample.html#pandas.Series.sample"},{"t":"pandas.Series.set_axis","d":"Assign desired index to given axis.","p":"api\/pandas.Series.set_axis.html#pandas.Series.set_axis"},{"t":"pandas.Series.take","d":"Return the elements in the given positional indices along an axis.","p":"api\/pandas.Series.take.html#pandas.Series.take"},{"t":"pandas.Series.tail","d":"Return the last n rows.","p":"api\/pandas.Series.tail.html#pandas.Series.tail"},{"t":"pandas.Series.truncate","d":"Truncate a Series or DataFrame before and after some index value.","p":"api\/pandas.Series.truncate.html#pandas.Series.truncate"},{"t":"pandas.Series.where","d":"Replace values where the condition is False.","p":"api\/pandas.Series.where.html#pandas.Series.where"},{"t":"pandas.Series.mask","d":"Replace values where the condition is True.","p":"api\/pandas.Series.mask.html#pandas.Series.mask"},{"t":"pandas.Series.add_prefix","d":"Prefix labels with string prefix.","p":"api\/pandas.Series.add_prefix.html#pandas.Series.add_prefix"},{"t":"pandas.Series.add_suffix","d":"Suffix labels with string suffix.","p":"api\/pandas.Series.add_suffix.html#pandas.Series.add_suffix"},{"t":"pandas.Series.filter","d":"Subset the dataframe rows or columns according to the specified index labels.","p":"api\/pandas.Series.filter.html#pandas.Series.filter"},{"t":"pandas.Series.backfill","d":"Synonym for DataFrame.fillna() with method='bfill'.","p":"api\/pandas.Series.backfill.html#pandas.Series.backfill"},{"t":"pandas.Series.bfill","d":"Synonym for DataFrame.fillna() with method='bfill'.","p":"api\/pandas.Series.bfill.html#pandas.Series.bfill"},{"t":"pandas.Series.dropna","d":"Return a new Series with missing values removed.","p":"api\/pandas.Series.dropna.html#pandas.Series.dropna"},{"t":"pandas.Series.ffill","d":"Synonym for DataFrame.fillna() with method='ffill'.","p":"api\/pandas.Series.ffill.html#pandas.Series.ffill"},{"t":"pandas.Series.fillna","d":"Fill NA\/NaN values using the specified method.","p":"api\/pandas.Series.fillna.html#pandas.Series.fillna"},{"t":"pandas.Series.interpolate","d":"Fill NaN values using an interpolation method.","p":"api\/pandas.Series.interpolate.html#pandas.Series.interpolate"},{"t":"pandas.Series.isna","d":"Detect missing values.","p":"api\/pandas.Series.isna.html#pandas.Series.isna"},{"t":"pandas.Series.isnull","d":"Detect missing values.","p":"api\/pandas.Series.isnull.html#pandas.Series.isnull"},{"t":"pandas.Series.notna","d":"Detect existing (non-missing) values.","p":"api\/pandas.Series.notna.html#pandas.Series.notna"},{"t":"pandas.Series.notnull","d":"Detect existing (non-missing) values.","p":"api\/pandas.Series.notnull.html#pandas.Series.notnull"},{"t":"pandas.Series.pad","d":"Synonym for DataFrame.fillna() with method='ffill'.","p":"api\/pandas.Series.pad.html#pandas.Series.pad"},{"t":"pandas.Series.replace","d":"Replace values given in to_replace with value.","p":"api\/pandas.Series.replace.html#pandas.Series.replace"},{"t":"pandas.Series.argsort","d":"Return the integer indices that would sort the Series values.","p":"api\/pandas.Series.argsort.html#pandas.Series.argsort"},{"t":"pandas.Series.argmin","d":"Return int position of the smallest value in the Series.","p":"api\/pandas.Series.argmin.html#pandas.Series.argmin"},{"t":"pandas.Series.argmax","d":"Return int position of the largest value in the Series.","p":"api\/pandas.Series.argmax.html#pandas.Series.argmax"},{"t":"pandas.Series.reorder_levels","d":"Rearrange index levels using input order.","p":"api\/pandas.Series.reorder_levels.html#pandas.Series.reorder_levels"},{"t":"pandas.Series.sort_values","d":"Sort by the values.","p":"api\/pandas.Series.sort_values.html#pandas.Series.sort_values"},{"t":"pandas.Series.sort_index","d":"Sort Series by index labels.","p":"api\/pandas.Series.sort_index.html#pandas.Series.sort_index"},{"t":"pandas.Series.swaplevel","d":"Swap levels i and j in a MultiIndex.","p":"api\/pandas.Series.swaplevel.html#pandas.Series.swaplevel"},{"t":"pandas.Series.unstack","d":"Unstack, also known as pivot, Series with MultiIndex to produce DataFrame.","p":"api\/pandas.Series.unstack.html#pandas.Series.unstack"},{"t":"pandas.Series.explode","d":"Transform each element of a list-like to a row.","p":"api\/pandas.Series.explode.html#pandas.Series.explode"},{"t":"pandas.Series.searchsorted","d":"Find indices where elements should be inserted to maintain order.","p":"api\/pandas.Series.searchsorted.html#pandas.Series.searchsorted"},{"t":"pandas.Series.ravel","d":"Return the flattened underlying data as an ndarray.","p":"api\/pandas.Series.ravel.html#pandas.Series.ravel"},{"t":"pandas.Series.repeat","d":"Repeat elements of a Series.","p":"api\/pandas.Series.repeat.html#pandas.Series.repeat"},{"t":"pandas.Series.squeeze","d":"Squeeze 1 dimensional axis objects into scalars.","p":"api\/pandas.Series.squeeze.html#pandas.Series.squeeze"},{"t":"pandas.Series.view","d":"Create a new view of the Series.","p":"api\/pandas.Series.view.html#pandas.Series.view"},{"t":"pandas.Series.append","d":"Concatenate two or more Series.","p":"api\/pandas.Series.append.html#pandas.Series.append"},{"t":"pandas.Series.compare","d":"Compare to another Series and show the differences.","p":"api\/pandas.Series.compare.html#pandas.Series.compare"},{"t":"pandas.Series.update","d":"Modify Series in place using values from passed Series.","p":"api\/pandas.Series.update.html#pandas.Series.update"},{"t":"pandas.Series.asfreq","d":"Convert TimeSeries to specified frequency.","p":"api\/pandas.Series.asfreq.html#pandas.Series.asfreq"},{"t":"pandas.Series.asof","d":"Return the last row(s) without any NaNs before where.","p":"api\/pandas.Series.asof.html#pandas.Series.asof"},{"t":"pandas.Series.shift","d":"Shift index by desired number of periods with an optional time freq.","p":"api\/pandas.Series.shift.html#pandas.Series.shift"},{"t":"pandas.Series.first_valid_index","d":"Return index for first non-NA\/null value.","p":"api\/pandas.Series.first_valid_index.html#pandas.Series.first_valid_index"},{"t":"pandas.Series.last_valid_index","d":"Return index for last non-NA\/null value.","p":"api\/pandas.Series.last_valid_index.html#pandas.Series.last_valid_index"},{"t":"pandas.Series.resample","d":"Resample time-series data.","p":"api\/pandas.Series.resample.html#pandas.Series.resample"},{"t":"pandas.Series.tz_convert","d":"Convert tz-aware axis to target time zone.","p":"api\/pandas.Series.tz_convert.html#pandas.Series.tz_convert"},{"t":"pandas.Series.tz_localize","d":"Localize tz-naive index of a Series or DataFrame to target time zone.","p":"api\/pandas.Series.tz_localize.html#pandas.Series.tz_localize"},{"t":"pandas.Series.at_time","d":"Select values at particular time of day (e.g., 9:30AM).","p":"api\/pandas.Series.at_time.html#pandas.Series.at_time"},{"t":"pandas.Series.between_time","d":"Select values between particular times of the day (e.g., 9:00-9:30 AM).","p":"api\/pandas.Series.between_time.html#pandas.Series.between_time"},{"t":"pandas.Series.tshift","d":"(DEPRECATED) Shift the time index, using the index\u2019s frequency if available.","p":"api\/pandas.Series.tshift.html#pandas.Series.tshift"},{"t":"pandas.Series.slice_shift","d":"(DEPRECATED) Equivalent to shift without copying data.","p":"api\/pandas.Series.slice_shift.html#pandas.Series.slice_shift"},{"t":"pandas.Series.dt.date","d":"Returns numpy array of python datetime.date objects (namely, the date part of Timestamps without timezone information).","p":"api\/pandas.Series.dt.date.html#pandas.Series.dt.date"},{"t":"pandas.Series.dt.time","d":"Returns numpy array of datetime.time.","p":"api\/pandas.Series.dt.time.html#pandas.Series.dt.time"},{"t":"pandas.Series.dt.timetz","d":"Returns numpy array of datetime.time also containing timezone information.","p":"api\/pandas.Series.dt.timetz.html#pandas.Series.dt.timetz"},{"t":"pandas.Series.dt.year","d":"The year of the datetime.","p":"api\/pandas.Series.dt.year.html#pandas.Series.dt.year"},{"t":"pandas.Series.dt.month","d":"The month as January=1, December=12.","p":"api\/pandas.Series.dt.month.html#pandas.Series.dt.month"},{"t":"pandas.Series.dt.day","d":"The day of the datetime.","p":"api\/pandas.Series.dt.day.html#pandas.Series.dt.day"},{"t":"pandas.Series.dt.hour","d":"The hours of the datetime.","p":"api\/pandas.Series.dt.hour.html#pandas.Series.dt.hour"},{"t":"pandas.Series.dt.minute","d":"The minutes of the datetime.","p":"api\/pandas.Series.dt.minute.html#pandas.Series.dt.minute"},{"t":"pandas.Series.dt.second","d":"The seconds of the datetime.","p":"api\/pandas.Series.dt.second.html#pandas.Series.dt.second"},{"t":"pandas.Series.dt.microsecond","d":"The microseconds of the datetime.","p":"api\/pandas.Series.dt.microsecond.html#pandas.Series.dt.microsecond"},{"t":"pandas.Series.dt.nanosecond","d":"The nanoseconds of the datetime.","p":"api\/pandas.Series.dt.nanosecond.html#pandas.Series.dt.nanosecond"},{"t":"pandas.Series.dt.week","d":"(DEPRECATED) The week ordinal of the year.","p":"api\/pandas.Series.dt.week.html#pandas.Series.dt.week"},{"t":"pandas.Series.dt.weekofyear","d":"(DEPRECATED) The week ordinal of the year.","p":"api\/pandas.Series.dt.weekofyear.html#pandas.Series.dt.weekofyear"},{"t":"pandas.Series.dt.dayofweek","d":"The day of the week with Monday=0, Sunday=6.","p":"api\/pandas.Series.dt.dayofweek.html#pandas.Series.dt.dayofweek"},{"t":"pandas.Series.dt.day_of_week","d":"The day of the week with Monday=0, Sunday=6.","p":"api\/pandas.Series.dt.day_of_week.html#pandas.Series.dt.day_of_week"},{"t":"pandas.Series.dt.weekday","d":"The day of the week with Monday=0, Sunday=6.","p":"api\/pandas.Series.dt.weekday.html#pandas.Series.dt.weekday"},{"t":"pandas.Series.dt.dayofyear","d":"The ordinal day of the year.","p":"api\/pandas.Series.dt.dayofyear.html#pandas.Series.dt.dayofyear"},{"t":"pandas.Series.dt.day_of_year","d":"The ordinal day of the year.","p":"api\/pandas.Series.dt.day_of_year.html#pandas.Series.dt.day_of_year"},{"t":"pandas.Series.dt.quarter","d":"The quarter of the date.","p":"api\/pandas.Series.dt.quarter.html#pandas.Series.dt.quarter"},{"t":"pandas.Series.dt.is_month_start","d":"Indicates whether the date is the first day of the month.","p":"api\/pandas.Series.dt.is_month_start.html#pandas.Series.dt.is_month_start"},{"t":"pandas.Series.dt.is_month_end","d":"Indicates whether the date is the last day of the month.","p":"api\/pandas.Series.dt.is_month_end.html#pandas.Series.dt.is_month_end"},{"t":"pandas.Series.dt.is_quarter_start","d":"Indicator for whether the date is the first day of a quarter.","p":"api\/pandas.Series.dt.is_quarter_start.html#pandas.Series.dt.is_quarter_start"},{"t":"pandas.Series.dt.is_quarter_end","d":"Indicator for whether the date is the last day of a quarter.","p":"api\/pandas.Series.dt.is_quarter_end.html#pandas.Series.dt.is_quarter_end"},{"t":"pandas.Series.dt.is_year_start","d":"Indicate whether the date is the first day of a year.","p":"api\/pandas.Series.dt.is_year_start.html#pandas.Series.dt.is_year_start"},{"t":"pandas.Series.dt.is_year_end","d":"Indicate whether the date is the last day of the year.","p":"api\/pandas.Series.dt.is_year_end.html#pandas.Series.dt.is_year_end"},{"t":"pandas.Series.dt.is_leap_year","d":"Boolean indicator if the date belongs to a leap year.","p":"api\/pandas.Series.dt.is_leap_year.html#pandas.Series.dt.is_leap_year"},{"t":"pandas.Series.dt.daysinmonth","d":"The number of days in the month.","p":"api\/pandas.Series.dt.daysinmonth.html#pandas.Series.dt.daysinmonth"},{"t":"pandas.Series.dt.days_in_month","d":"The number of days in the month.","p":"api\/pandas.Series.dt.days_in_month.html#pandas.Series.dt.days_in_month"},{"t":"pandas.Series.dt.tz","d":"Return timezone, if any.","p":"api\/pandas.Series.dt.tz.html#pandas.Series.dt.tz"},{"t":"pandas.Series.dt.freq","d":"Return the frequency object for this PeriodArray.","p":"api\/pandas.Series.dt.freq.html#pandas.Series.dt.freq"},{"t":"pandas.Series.dt.to_period","d":"Cast to PeriodArray\/Index at a particular frequency.","p":"api\/pandas.Series.dt.to_period.html#pandas.Series.dt.to_period"},{"t":"pandas.Series.dt.to_pydatetime","d":"Return the data as an array of native Python datetime objects.","p":"api\/pandas.Series.dt.to_pydatetime.html#pandas.Series.dt.to_pydatetime"},{"t":"pandas.Series.dt.tz_localize","d":"Localize tz-naive Datetime Array\/Index to tz-aware Datetime Array\/Index.","p":"api\/pandas.Series.dt.tz_localize.html#pandas.Series.dt.tz_localize"},{"t":"pandas.Series.dt.tz_convert","d":"Convert tz-aware Datetime Array\/Index from one time zone to another.","p":"api\/pandas.Series.dt.tz_convert.html#pandas.Series.dt.tz_convert"},{"t":"pandas.Series.dt.normalize","d":"Convert times to midnight.","p":"api\/pandas.Series.dt.normalize.html#pandas.Series.dt.normalize"},{"t":"pandas.Series.dt.strftime","d":"Convert to Index using specified date_format.","p":"api\/pandas.Series.dt.strftime.html#pandas.Series.dt.strftime"},{"t":"pandas.Series.dt.round","d":"Perform round operation on the data to the specified freq.","p":"api\/pandas.Series.dt.round.html#pandas.Series.dt.round"},{"t":"pandas.Series.dt.floor","d":"Perform floor operation on the data to the specified freq.","p":"api\/pandas.Series.dt.floor.html#pandas.Series.dt.floor"},{"t":"pandas.Series.dt.ceil","d":"Perform ceil operation on the data to the specified freq.","p":"api\/pandas.Series.dt.ceil.html#pandas.Series.dt.ceil"},{"t":"pandas.Series.dt.month_name","d":"Return the month names of the DateTimeIndex with specified locale.","p":"api\/pandas.Series.dt.month_name.html#pandas.Series.dt.month_name"},{"t":"pandas.Series.dt.day_name","d":"Return the day names of the DateTimeIndex with specified locale.","p":"api\/pandas.Series.dt.day_name.html#pandas.Series.dt.day_name"},{"t":"pandas.Series.dt.qyear","d":"","p":"api\/pandas.Series.dt.qyear.html#pandas.Series.dt.qyear"},{"t":"pandas.Series.dt.start_time","d":"","p":"api\/pandas.Series.dt.start_time.html#pandas.Series.dt.start_time"},{"t":"pandas.Series.dt.end_time","d":"","p":"api\/pandas.Series.dt.end_time.html#pandas.Series.dt.end_time"},{"t":"pandas.Series.dt.days","d":"Number of days for each element.","p":"api\/pandas.Series.dt.days.html#pandas.Series.dt.days"},{"t":"pandas.Series.dt.seconds","d":"Number of seconds (>= 0 and less than 1 day) for each element.","p":"api\/pandas.Series.dt.seconds.html#pandas.Series.dt.seconds"},{"t":"pandas.Series.dt.microseconds","d":"Number of microseconds (>= 0 and less than 1 second) for each element.","p":"api\/pandas.Series.dt.microseconds.html#pandas.Series.dt.microseconds"},{"t":"pandas.Series.dt.nanoseconds","d":"Number of nanoseconds (>= 0 and less than 1 microsecond) for each element.","p":"api\/pandas.Series.dt.nanoseconds.html#pandas.Series.dt.nanoseconds"},{"t":"pandas.Series.dt.components","d":"Return a Dataframe of the components of the Timedeltas.","p":"api\/pandas.Series.dt.components.html#pandas.Series.dt.components"},{"t":"pandas.Series.dt.to_pytimedelta","d":"Return an array of native datetime.timedelta objects.","p":"api\/pandas.Series.dt.to_pytimedelta.html#pandas.Series.dt.to_pytimedelta"},{"t":"pandas.Series.dt.total_seconds","d":"Return total duration of each element expressed in seconds.","p":"api\/pandas.Series.dt.total_seconds.html#pandas.Series.dt.total_seconds"},{"t":"pandas.Series.str.capitalize","d":"Convert strings in the Series\/Index to be capitalized.","p":"api\/pandas.Series.str.capitalize.html#pandas.Series.str.capitalize"},{"t":"pandas.Series.str.casefold","d":"Convert strings in the Series\/Index to be casefolded.","p":"api\/pandas.Series.str.casefold.html#pandas.Series.str.casefold"},{"t":"pandas.Series.str.cat","d":"Concatenate strings in the Series\/Index with given separator.","p":"api\/pandas.Series.str.cat.html#pandas.Series.str.cat"},{"t":"pandas.Series.str.center","d":"Pad left and right side of strings in the Series\/Index.","p":"api\/pandas.Series.str.center.html#pandas.Series.str.center"},{"t":"pandas.Series.str.contains","d":"Test if pattern or regex is contained within a string of a Series or Index.","p":"api\/pandas.Series.str.contains.html#pandas.Series.str.contains"},{"t":"pandas.Series.str.count","d":"Count occurrences of pattern in each string of the Series\/Index.","p":"api\/pandas.Series.str.count.html#pandas.Series.str.count"},{"t":"pandas.Series.str.decode","d":"Decode character string in the Series\/Index using indicated encoding.","p":"api\/pandas.Series.str.decode.html#pandas.Series.str.decode"},{"t":"pandas.Series.str.encode","d":"Encode character string in the Series\/Index using indicated encoding.","p":"api\/pandas.Series.str.encode.html#pandas.Series.str.encode"},{"t":"pandas.Series.str.endswith","d":"Test if the end of each string element matches a pattern.","p":"api\/pandas.Series.str.endswith.html#pandas.Series.str.endswith"},{"t":"pandas.Series.str.extract","d":"Extract capture groups in the regex pat as columns in a DataFrame.","p":"api\/pandas.Series.str.extract.html#pandas.Series.str.extract"},{"t":"pandas.Series.str.extractall","d":"Extract capture groups in the regex pat as columns in DataFrame.","p":"api\/pandas.Series.str.extractall.html#pandas.Series.str.extractall"},{"t":"pandas.Series.str.find","d":"Return lowest indexes in each strings in the Series\/Index.","p":"api\/pandas.Series.str.find.html#pandas.Series.str.find"},{"t":"pandas.Series.str.findall","d":"Find all occurrences of pattern or regular expression in the Series\/Index.","p":"api\/pandas.Series.str.findall.html#pandas.Series.str.findall"},{"t":"pandas.Series.str.get","d":"Extract element from each component at specified position.","p":"api\/pandas.Series.str.get.html#pandas.Series.str.get"},{"t":"pandas.Series.str.index","d":"Return lowest indexes in each string in Series\/Index.","p":"api\/pandas.Series.str.index.html#pandas.Series.str.index"},{"t":"pandas.Series.str.join","d":"Join lists contained as elements in the Series\/Index with passed delimiter.","p":"api\/pandas.Series.str.join.html#pandas.Series.str.join"},{"t":"pandas.Series.str.len","d":"Compute the length of each element in the Series\/Index.","p":"api\/pandas.Series.str.len.html#pandas.Series.str.len"},{"t":"pandas.Series.str.ljust","d":"Pad right side of strings in the Series\/Index.","p":"api\/pandas.Series.str.ljust.html#pandas.Series.str.ljust"},{"t":"pandas.Series.str.lower","d":"Convert strings in the Series\/Index to lowercase.","p":"api\/pandas.Series.str.lower.html#pandas.Series.str.lower"},{"t":"pandas.Series.str.lstrip","d":"Remove leading characters.","p":"api\/pandas.Series.str.lstrip.html#pandas.Series.str.lstrip"},{"t":"pandas.Series.str.match","d":"Determine if each string starts with a match of a regular expression.","p":"api\/pandas.Series.str.match.html#pandas.Series.str.match"},{"t":"pandas.Series.str.normalize","d":"Return the Unicode normal form for the strings in the Series\/Index.","p":"api\/pandas.Series.str.normalize.html#pandas.Series.str.normalize"},{"t":"pandas.Series.str.pad","d":"Pad strings in the Series\/Index up to width.","p":"api\/pandas.Series.str.pad.html#pandas.Series.str.pad"},{"t":"pandas.Series.str.partition","d":"Split the string at the first occurrence of sep.","p":"api\/pandas.Series.str.partition.html#pandas.Series.str.partition"},{"t":"pandas.Series.str.repeat","d":"Duplicate each string in the Series or Index.","p":"api\/pandas.Series.str.repeat.html#pandas.Series.str.repeat"},{"t":"pandas.Series.str.replace","d":"Replace each occurrence of pattern\/regex in the Series\/Index.","p":"api\/pandas.Series.str.replace.html#pandas.Series.str.replace"},{"t":"pandas.Series.str.rfind","d":"Return highest indexes in each strings in the Series\/Index.","p":"api\/pandas.Series.str.rfind.html#pandas.Series.str.rfind"},{"t":"pandas.Series.str.rindex","d":"Return highest indexes in each string in Series\/Index.","p":"api\/pandas.Series.str.rindex.html#pandas.Series.str.rindex"},{"t":"pandas.Series.str.rjust","d":"Pad left side of strings in the Series\/Index.","p":"api\/pandas.Series.str.rjust.html#pandas.Series.str.rjust"},{"t":"pandas.Series.str.rpartition","d":"Split the string at the last occurrence of sep.","p":"api\/pandas.Series.str.rpartition.html#pandas.Series.str.rpartition"},{"t":"pandas.Series.str.rstrip","d":"Remove trailing characters.","p":"api\/pandas.Series.str.rstrip.html#pandas.Series.str.rstrip"},{"t":"pandas.Series.str.slice","d":"Slice substrings from each element in the Series or Index.","p":"api\/pandas.Series.str.slice.html#pandas.Series.str.slice"},{"t":"pandas.Series.str.slice_replace","d":"Replace a positional slice of a string with another value.","p":"api\/pandas.Series.str.slice_replace.html#pandas.Series.str.slice_replace"},{"t":"pandas.Series.str.split","d":"Split strings around given separator\/delimiter.","p":"api\/pandas.Series.str.split.html#pandas.Series.str.split"},{"t":"pandas.Series.str.rsplit","d":"Split strings around given separator\/delimiter.","p":"api\/pandas.Series.str.rsplit.html#pandas.Series.str.rsplit"},{"t":"pandas.Series.str.startswith","d":"Test if the start of each string element matches a pattern.","p":"api\/pandas.Series.str.startswith.html#pandas.Series.str.startswith"},{"t":"pandas.Series.str.strip","d":"Remove leading and trailing characters.","p":"api\/pandas.Series.str.strip.html#pandas.Series.str.strip"},{"t":"pandas.Series.str.swapcase","d":"Convert strings in the Series\/Index to be swapcased.","p":"api\/pandas.Series.str.swapcase.html#pandas.Series.str.swapcase"},{"t":"pandas.Series.str.title","d":"Convert strings in the Series\/Index to titlecase.","p":"api\/pandas.Series.str.title.html#pandas.Series.str.title"},{"t":"pandas.Series.str.translate","d":"Map all characters in the string through the given mapping table.","p":"api\/pandas.Series.str.translate.html#pandas.Series.str.translate"},{"t":"pandas.Series.str.upper","d":"Convert strings in the Series\/Index to uppercase.","p":"api\/pandas.Series.str.upper.html#pandas.Series.str.upper"},{"t":"pandas.Series.str.wrap","d":"Wrap strings in Series\/Index at specified line width.","p":"api\/pandas.Series.str.wrap.html#pandas.Series.str.wrap"},{"t":"pandas.Series.str.zfill","d":"Pad strings in the Series\/Index by prepending \u20180\u2019 characters.","p":"api\/pandas.Series.str.zfill.html#pandas.Series.str.zfill"},{"t":"pandas.Series.str.isalnum","d":"Check whether all characters in each string are alphanumeric.","p":"api\/pandas.Series.str.isalnum.html#pandas.Series.str.isalnum"},{"t":"pandas.Series.str.isalpha","d":"Check whether all characters in each string are alphabetic.","p":"api\/pandas.Series.str.isalpha.html#pandas.Series.str.isalpha"},{"t":"pandas.Series.str.isdigit","d":"Check whether all characters in each string are digits.","p":"api\/pandas.Series.str.isdigit.html#pandas.Series.str.isdigit"},{"t":"pandas.Series.str.isspace","d":"Check whether all characters in each string are alphanumeric.","p":"api\/pandas.Series.str.isspace.html#pandas.Series.str.isspace"},{"t":"pandas.Series.str.islower","d":"Check whether all characters in each string are lowercase.","p":"api\/pandas.Series.str.islower.html#pandas.Series.str.islower"},{"t":"pandas.Series.str.isupper","d":"Check whether all characters in each string are uppercase.","p":"api\/pandas.Series.str.isupper.html#pandas.Series.str.isupper"},{"t":"pandas.Series.str.istitle","d":"Check whether all characters in each string are titlecase.","p":"api\/pandas.Series.str.istitle.html#pandas.Series.str.istitle"},{"t":"pandas.Series.str.isnumeric","d":"Check whether all characters in each string are numeric.","p":"api\/pandas.Series.str.isnumeric.html#pandas.Series.str.isnumeric"},{"t":"pandas.Series.str.isdecimal","d":"Check whether all characters in each string are decimal.","p":"api\/pandas.Series.str.isdecimal.html#pandas.Series.str.isdecimal"},{"t":"pandas.Series.str.get_dummies","d":"Return DataFrame of dummy\/indicator variables for Series.","p":"api\/pandas.Series.str.get_dummies.html#pandas.Series.str.get_dummies"},{"t":"pandas.Series.cat.categories","d":"The categories of this categorical.","p":"api\/pandas.Series.cat.categories.html#pandas.Series.cat.categories"},{"t":"pandas.Series.cat.ordered","d":"Whether the categories have an ordered relationship.","p":"api\/pandas.Series.cat.ordered.html#pandas.Series.cat.ordered"},{"t":"pandas.Series.cat.codes","d":"Return Series of codes as well as the index.","p":"api\/pandas.Series.cat.codes.html#pandas.Series.cat.codes"},{"t":"pandas.Series.cat.rename_categories","d":"Rename categories.","p":"api\/pandas.Series.cat.rename_categories.html#pandas.Series.cat.rename_categories"},{"t":"pandas.Series.cat.reorder_categories","d":"Reorder categories as specified in new_categories.","p":"api\/pandas.Series.cat.reorder_categories.html#pandas.Series.cat.reorder_categories"},{"t":"pandas.Series.cat.add_categories","d":"Add new categories.","p":"api\/pandas.Series.cat.add_categories.html#pandas.Series.cat.add_categories"},{"t":"pandas.Series.cat.remove_categories","d":"Remove the specified categories.","p":"api\/pandas.Series.cat.remove_categories.html#pandas.Series.cat.remove_categories"},{"t":"pandas.Series.cat.remove_unused_categories","d":"Remove categories which are not used.","p":"api\/pandas.Series.cat.remove_unused_categories.html#pandas.Series.cat.remove_unused_categories"},{"t":"pandas.Series.cat.set_categories","d":"Set the categories to the specified new_categories.","p":"api\/pandas.Series.cat.set_categories.html#pandas.Series.cat.set_categories"},{"t":"pandas.Series.cat.as_ordered","d":"Set the Categorical to be ordered.","p":"api\/pandas.Series.cat.as_ordered.html#pandas.Series.cat.as_ordered"},{"t":"pandas.Series.cat.as_unordered","d":"Set the Categorical to be unordered.","p":"api\/pandas.Series.cat.as_unordered.html#pandas.Series.cat.as_unordered"},{"t":"pandas.Series.sparse.npoints","d":"The number of non- fill_value points.","p":"api\/pandas.Series.sparse.npoints.html#pandas.Series.sparse.npoints"},{"t":"pandas.Series.sparse.density","d":"The percent of non- fill_value points, as decimal.","p":"api\/pandas.Series.sparse.density.html#pandas.Series.sparse.density"},{"t":"pandas.Series.sparse.fill_value","d":"Elements in data that are fill_value are not stored.","p":"api\/pandas.Series.sparse.fill_value.html#pandas.Series.sparse.fill_value"},{"t":"pandas.Series.sparse.sp_values","d":"An ndarray containing the non- fill_value values.","p":"api\/pandas.Series.sparse.sp_values.html#pandas.Series.sparse.sp_values"},{"t":"pandas.Series.sparse.from_coo","d":"Create a Series with sparse values from a scipy.sparse.coo_matrix.","p":"api\/pandas.Series.sparse.from_coo.html#pandas.Series.sparse.from_coo"},{"t":"pandas.Series.sparse.to_coo","d":"Create a scipy.sparse.coo_matrix from a Series with MultiIndex.","p":"api\/pandas.Series.sparse.to_coo.html#pandas.Series.sparse.to_coo"},{"t":"pandas.Flags","d":"Flags that apply to pandas objects.","p":"api\/pandas.Flags.html#pandas.Flags"},{"t":"pandas.Series.attrs","d":"Dictionary of global attributes of this dataset.","p":"api\/pandas.Series.attrs.html#pandas.Series.attrs"},{"t":"pandas.Series.plot","d":"Series plotting accessor and method","p":"api\/pandas.Series.plot.html#pandas.Series.plot"},{"t":"pandas.Series.plot.area","d":"Draw a stacked area plot.","p":"api\/pandas.Series.plot.area.html#pandas.Series.plot.area"},{"t":"pandas.Series.plot.bar","d":"Vertical bar plot.","p":"api\/pandas.Series.plot.bar.html#pandas.Series.plot.bar"},{"t":"pandas.Series.plot.barh","d":"Make a horizontal bar plot.","p":"api\/pandas.Series.plot.barh.html#pandas.Series.plot.barh"},{"t":"pandas.Series.plot.box","d":"Make a box plot of the DataFrame columns.","p":"api\/pandas.Series.plot.box.html#pandas.Series.plot.box"},{"t":"pandas.Series.plot.density","d":"Generate Kernel Density Estimate plot using Gaussian kernels.","p":"api\/pandas.Series.plot.density.html#pandas.Series.plot.density"},{"t":"pandas.Series.plot.hist","d":"Draw one histogram of the DataFrame\u2019s columns.","p":"api\/pandas.Series.plot.hist.html#pandas.Series.plot.hist"},{"t":"pandas.Series.plot.kde","d":"Generate Kernel Density Estimate plot using Gaussian kernels.","p":"api\/pandas.Series.plot.kde.html#pandas.Series.plot.kde"},{"t":"pandas.Series.plot.line","d":"Plot Series or DataFrame as lines.","p":"api\/pandas.Series.plot.line.html#pandas.Series.plot.line"},{"t":"pandas.Series.plot.pie","d":"Generate a pie plot.","p":"api\/pandas.Series.plot.pie.html#pandas.Series.plot.pie"},{"t":"pandas.Series.hist","d":"Draw histogram of the input series using matplotlib.","p":"api\/pandas.Series.hist.html#pandas.Series.hist"},{"t":"pandas.Series.to_pickle","d":"Pickle (serialize) object to file.","p":"api\/pandas.Series.to_pickle.html#pandas.Series.to_pickle"},{"t":"pandas.Series.to_csv","d":"Write object to a comma-separated values (csv) file.","p":"api\/pandas.Series.to_csv.html#pandas.Series.to_csv"},{"t":"pandas.Series.to_dict","d":"Convert Series to {label -> value} dict or dict-like object.","p":"api\/pandas.Series.to_dict.html#pandas.Series.to_dict"},{"t":"pandas.Series.to_excel","d":"Write object to an Excel sheet.","p":"api\/pandas.Series.to_excel.html#pandas.Series.to_excel"},{"t":"pandas.Series.to_frame","d":"Convert Series to DataFrame.","p":"api\/pandas.Series.to_frame.html#pandas.Series.to_frame"},{"t":"pandas.Series.to_xarray","d":"Return an xarray object from the pandas object.","p":"api\/pandas.Series.to_xarray.html#pandas.Series.to_xarray"},{"t":"pandas.Series.to_hdf","d":"Write the contained data to an HDF5 file using HDFStore.","p":"api\/pandas.Series.to_hdf.html#pandas.Series.to_hdf"},{"t":"pandas.Series.to_sql","d":"Write records stored in a DataFrame to a SQL database.","p":"api\/pandas.Series.to_sql.html#pandas.Series.to_sql"},{"t":"pandas.Series.to_json","d":"Convert the object to a JSON string.","p":"api\/pandas.Series.to_json.html#pandas.Series.to_json"},{"t":"pandas.Series.to_string","d":"Render a string representation of the Series.","p":"api\/pandas.Series.to_string.html#pandas.Series.to_string"},{"t":"pandas.Series.to_clipboard","d":"Copy object to the system clipboard.","p":"api\/pandas.Series.to_clipboard.html#pandas.Series.to_clipboard"},{"t":"pandas.Series.to_latex","d":"Render object to a LaTeX tabular, longtable, or nested table\/tabular.","p":"api\/pandas.Series.to_latex.html#pandas.Series.to_latex"},{"t":"pandas.Series.to_markdown","d":"Print Series in Markdown-friendly format.","p":"api\/pandas.Series.to_markdown.html#pandas.Series.to_markdown"},{"t":"pandas.DataFrame","d":"Two-dimensional, size-mutable, potentially heterogeneous tabular data.","p":"api\/pandas.DataFrame.html#pandas.DataFrame"},{"t":"pandas.DataFrame.index","d":"The index (row labels) of the DataFrame.","p":"api\/pandas.DataFrame.index.html#pandas.DataFrame.index"},{"t":"pandas.DataFrame.columns","d":"The column labels of the DataFrame.","p":"api\/pandas.DataFrame.columns.html#pandas.DataFrame.columns"},{"t":"pandas.DataFrame.dtypes","d":"Return the dtypes in the DataFrame.","p":"api\/pandas.DataFrame.dtypes.html#pandas.DataFrame.dtypes"},{"t":"pandas.DataFrame.info","d":"Print a concise summary of a DataFrame.","p":"api\/pandas.DataFrame.info.html#pandas.DataFrame.info"},{"t":"pandas.DataFrame.select_dtypes","d":"Return a subset of the DataFrame\u2019s columns based on the column dtypes.","p":"api\/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes"},{"t":"pandas.DataFrame.values","d":"Return a Numpy representation of the DataFrame.","p":"api\/pandas.DataFrame.values.html#pandas.DataFrame.values"},{"t":"pandas.DataFrame.axes","d":"Return a list representing the axes of the DataFrame.","p":"api\/pandas.DataFrame.axes.html#pandas.DataFrame.axes"},{"t":"pandas.DataFrame.ndim","d":"Return an int representing the number of axes \/ array dimensions.","p":"api\/pandas.DataFrame.ndim.html#pandas.DataFrame.ndim"},{"t":"pandas.DataFrame.size","d":"Return an int representing the number of elements in this object.","p":"api\/pandas.DataFrame.size.html#pandas.DataFrame.size"},{"t":"pandas.DataFrame.shape","d":"Return a tuple representing the dimensionality of the DataFrame.","p":"api\/pandas.DataFrame.shape.html#pandas.DataFrame.shape"},{"t":"pandas.DataFrame.memory_usage","d":"Return the memory usage of each column in bytes.","p":"api\/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage"},{"t":"pandas.DataFrame.empty","d":"Indicator whether DataFrame is empty.","p":"api\/pandas.DataFrame.empty.html#pandas.DataFrame.empty"},{"t":"pandas.DataFrame.set_flags","d":"Return a new object with updated flags.","p":"api\/pandas.DataFrame.set_flags.html#pandas.DataFrame.set_flags"},{"t":"pandas.DataFrame.astype","d":"Cast a pandas object to a specified dtype dtype.","p":"api\/pandas.DataFrame.astype.html#pandas.DataFrame.astype"},{"t":"pandas.DataFrame.convert_dtypes","d":"Convert columns to best possible dtypes using dtypes supporting pd.NA.","p":"api\/pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes"},{"t":"pandas.DataFrame.infer_objects","d":"Attempt to infer better dtypes for object columns.","p":"api\/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects"},{"t":"pandas.DataFrame.copy","d":"Make a copy of this object\u2019s indices and data.","p":"api\/pandas.DataFrame.copy.html#pandas.DataFrame.copy"},{"t":"pandas.DataFrame.bool","d":"Return the bool of a single element Series or DataFrame.","p":"api\/pandas.DataFrame.bool.html#pandas.DataFrame.bool"},{"t":"pandas.DataFrame.head","d":"Return the first n rows.","p":"api\/pandas.DataFrame.head.html#pandas.DataFrame.head"},{"t":"pandas.DataFrame.at","d":"Access a single value for a row\/column label pair.","p":"api\/pandas.DataFrame.at.html#pandas.DataFrame.at"},{"t":"pandas.DataFrame.iat","d":"Access a single value for a row\/column pair by integer position.","p":"api\/pandas.DataFrame.iat.html#pandas.DataFrame.iat"},{"t":"pandas.DataFrame.loc","d":"Access a group of rows and columns by label(s) or a boolean array.","p":"api\/pandas.DataFrame.loc.html#pandas.DataFrame.loc"},{"t":"pandas.DataFrame.iloc","d":"Purely integer-location based indexing for selection by position.","p":"api\/pandas.DataFrame.iloc.html#pandas.DataFrame.iloc"},{"t":"pandas.DataFrame.insert","d":"Insert column into DataFrame at specified location.","p":"api\/pandas.DataFrame.insert.html#pandas.DataFrame.insert"},{"t":"pandas.DataFrame.__iter__","d":"Iterate over info axis.","p":"api\/pandas.DataFrame.__iter__.html#pandas.DataFrame.__iter__"},{"t":"pandas.DataFrame.items","d":"Iterate over (column name, Series) pairs.","p":"api\/pandas.DataFrame.items.html#pandas.DataFrame.items"},{"t":"pandas.DataFrame.iteritems","d":"Iterate over (column name, Series) pairs.","p":"api\/pandas.DataFrame.iteritems.html#pandas.DataFrame.iteritems"},{"t":"pandas.DataFrame.keys","d":"Get the \u2018info axis\u2019 (see Indexing for more).","p":"api\/pandas.DataFrame.keys.html#pandas.DataFrame.keys"},{"t":"pandas.DataFrame.iterrows","d":"Iterate over DataFrame rows as (index, Series) pairs.","p":"api\/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows"},{"t":"pandas.DataFrame.itertuples","d":"Iterate over DataFrame rows as namedtuples.","p":"api\/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples"},{"t":"pandas.DataFrame.lookup","d":"(DEPRECATED) Label-based \u201cfancy indexing\u201d function for DataFrame.","p":"api\/pandas.DataFrame.lookup.html#pandas.DataFrame.lookup"},{"t":"pandas.DataFrame.pop","d":"Return item and drop from frame.","p":"api\/pandas.DataFrame.pop.html#pandas.DataFrame.pop"},{"t":"pandas.DataFrame.tail","d":"Return the last n rows.","p":"api\/pandas.DataFrame.tail.html#pandas.DataFrame.tail"},{"t":"pandas.DataFrame.xs","d":"Return cross-section from the Series\/DataFrame.","p":"api\/pandas.DataFrame.xs.html#pandas.DataFrame.xs"},{"t":"pandas.DataFrame.get","d":"Get item from object for given key (ex: DataFrame column).","p":"api\/pandas.DataFrame.get.html#pandas.DataFrame.get"},{"t":"pandas.DataFrame.isin","d":"Whether each element in the DataFrame is contained in values.","p":"api\/pandas.DataFrame.isin.html#pandas.DataFrame.isin"},{"t":"pandas.DataFrame.where","d":"Replace values where the condition is False.","p":"api\/pandas.DataFrame.where.html#pandas.DataFrame.where"},{"t":"pandas.DataFrame.mask","d":"Replace values where the condition is True.","p":"api\/pandas.DataFrame.mask.html#pandas.DataFrame.mask"},{"t":"pandas.DataFrame.query","d":"Query the columns of a DataFrame with a boolean expression.","p":"api\/pandas.DataFrame.query.html#pandas.DataFrame.query"},{"t":"pandas.DataFrame.add","d":"Get Addition of dataframe and other, element-wise (binary operator add).","p":"api\/pandas.DataFrame.add.html#pandas.DataFrame.add"},{"t":"pandas.DataFrame.sub","d":"Get Subtraction of dataframe and other, element-wise (binary operator sub).","p":"api\/pandas.DataFrame.sub.html#pandas.DataFrame.sub"},{"t":"pandas.DataFrame.mul","d":"Get Multiplication of dataframe and other, element-wise (binary operator mul).","p":"api\/pandas.DataFrame.mul.html#pandas.DataFrame.mul"},{"t":"pandas.DataFrame.div","d":"Get Floating division of dataframe and other, element-wise (binary operator truediv).","p":"api\/pandas.DataFrame.div.html#pandas.DataFrame.div"},{"t":"pandas.DataFrame.truediv","d":"Get Floating division of dataframe and other, element-wise (binary operator truediv).","p":"api\/pandas.DataFrame.truediv.html#pandas.DataFrame.truediv"},{"t":"pandas.DataFrame.floordiv","d":"Get Integer division of dataframe and other, element-wise (binary operator floordiv).","p":"api\/pandas.DataFrame.floordiv.html#pandas.DataFrame.floordiv"},{"t":"pandas.DataFrame.mod","d":"Get Modulo of dataframe and other, element-wise (binary operator mod).","p":"api\/pandas.DataFrame.mod.html#pandas.DataFrame.mod"},{"t":"pandas.DataFrame.pow","d":"Get Exponential power of dataframe and other, element-wise (binary operator pow).","p":"api\/pandas.DataFrame.pow.html#pandas.DataFrame.pow"},{"t":"pandas.DataFrame.dot","d":"Compute the matrix multiplication between the DataFrame and other.","p":"api\/pandas.DataFrame.dot.html#pandas.DataFrame.dot"},{"t":"pandas.DataFrame.radd","d":"Get Addition of dataframe and other, element-wise (binary operator radd).","p":"api\/pandas.DataFrame.radd.html#pandas.DataFrame.radd"},{"t":"pandas.DataFrame.rsub","d":"Get Subtraction of dataframe and other, element-wise (binary operator rsub).","p":"api\/pandas.DataFrame.rsub.html#pandas.DataFrame.rsub"},{"t":"pandas.DataFrame.rmul","d":"Get Multiplication of dataframe and other, element-wise (binary operator rmul).","p":"api\/pandas.DataFrame.rmul.html#pandas.DataFrame.rmul"},{"t":"pandas.DataFrame.rdiv","d":"Get Floating division of dataframe and other, element-wise (binary operator rtruediv).","p":"api\/pandas.DataFrame.rdiv.html#pandas.DataFrame.rdiv"},{"t":"pandas.DataFrame.rtruediv","d":"Get Floating division of dataframe and other, element-wise (binary operator rtruediv).","p":"api\/pandas.DataFrame.rtruediv.html#pandas.DataFrame.rtruediv"},{"t":"pandas.DataFrame.rfloordiv","d":"Get Integer division of dataframe and other, element-wise (binary operator rfloordiv).","p":"api\/pandas.DataFrame.rfloordiv.html#pandas.DataFrame.rfloordiv"},{"t":"pandas.DataFrame.rmod","d":"Get Modulo of dataframe and other, element-wise (binary operator rmod).","p":"api\/pandas.DataFrame.rmod.html#pandas.DataFrame.rmod"},{"t":"pandas.DataFrame.rpow","d":"Get Exponential power of dataframe and other, element-wise (binary operator rpow).","p":"api\/pandas.DataFrame.rpow.html#pandas.DataFrame.rpow"},{"t":"pandas.DataFrame.lt","d":"Get Less than of dataframe and other, element-wise (binary operator lt).","p":"api\/pandas.DataFrame.lt.html#pandas.DataFrame.lt"},{"t":"pandas.DataFrame.gt","d":"Get Greater than of dataframe and other, element-wise (binary operator gt).","p":"api\/pandas.DataFrame.gt.html#pandas.DataFrame.gt"},{"t":"pandas.DataFrame.le","d":"Get Less than or equal to of dataframe and other, element-wise (binary operator le).","p":"api\/pandas.DataFrame.le.html#pandas.DataFrame.le"},{"t":"pandas.DataFrame.ge","d":"Get Greater than or equal to of dataframe and other, element-wise (binary operator ge).","p":"api\/pandas.DataFrame.ge.html#pandas.DataFrame.ge"},{"t":"pandas.DataFrame.ne","d":"Get Not equal to of dataframe and other, element-wise (binary operator ne).","p":"api\/pandas.DataFrame.ne.html#pandas.DataFrame.ne"},{"t":"pandas.DataFrame.eq","d":"Get Equal to of dataframe and other, element-wise (binary operator eq).","p":"api\/pandas.DataFrame.eq.html#pandas.DataFrame.eq"},{"t":"pandas.DataFrame.combine","d":"Perform column-wise combine with another DataFrame.","p":"api\/pandas.DataFrame.combine.html#pandas.DataFrame.combine"},{"t":"pandas.DataFrame.combine_first","d":"Update null elements with value in the same location in other.","p":"api\/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first"},{"t":"pandas.DataFrame.apply","d":"Apply a function along an axis of the DataFrame.","p":"api\/pandas.DataFrame.apply.html#pandas.DataFrame.apply"},{"t":"pandas.DataFrame.applymap","d":"Apply a function to a Dataframe elementwise.","p":"api\/pandas.DataFrame.applymap.html#pandas.DataFrame.applymap"},{"t":"pandas.DataFrame.pipe","d":"Apply func(self, *args, **kwargs).","p":"api\/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe"},{"t":"pandas.DataFrame.agg","d":"Aggregate using one or more operations over the specified axis.","p":"api\/pandas.DataFrame.agg.html#pandas.DataFrame.agg"},{"t":"pandas.DataFrame.aggregate","d":"Aggregate using one or more operations over the specified axis.","p":"api\/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate"},{"t":"pandas.DataFrame.transform","d":"Call func on self producing a DataFrame with transformed values.","p":"api\/pandas.DataFrame.transform.html#pandas.DataFrame.transform"},{"t":"pandas.DataFrame.groupby","d":"Group DataFrame using a mapper or by a Series of columns.","p":"api\/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby"},{"t":"pandas.DataFrame.rolling","d":"Provide rolling window calculations.","p":"api\/pandas.DataFrame.rolling.html#pandas.DataFrame.rolling"},{"t":"pandas.DataFrame.expanding","d":"Provide expanding transformations.","p":"api\/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding"},{"t":"pandas.DataFrame.ewm","d":"Provide exponential weighted (EW) functions.","p":"api\/pandas.DataFrame.ewm.html#pandas.DataFrame.ewm"},{"t":"pandas.DataFrame.abs","d":"Return a Series\/DataFrame with absolute numeric value of each element.","p":"api\/pandas.DataFrame.abs.html#pandas.DataFrame.abs"},{"t":"pandas.DataFrame.all","d":"Return whether all elements are True, potentially over an axis.","p":"api\/pandas.DataFrame.all.html#pandas.DataFrame.all"},{"t":"pandas.DataFrame.any","d":"Return whether any element is True, potentially over an axis.","p":"api\/pandas.DataFrame.any.html#pandas.DataFrame.any"},{"t":"pandas.DataFrame.clip","d":"Trim values at input threshold(s).","p":"api\/pandas.DataFrame.clip.html#pandas.DataFrame.clip"},{"t":"pandas.DataFrame.corr","d":"Compute pairwise correlation of columns, excluding NA\/null values.","p":"api\/pandas.DataFrame.corr.html#pandas.DataFrame.corr"},{"t":"pandas.DataFrame.corrwith","d":"Compute pairwise correlation.","p":"api\/pandas.DataFrame.corrwith.html#pandas.DataFrame.corrwith"},{"t":"pandas.DataFrame.count","d":"Count non-NA cells for each column or row.","p":"api\/pandas.DataFrame.count.html#pandas.DataFrame.count"},{"t":"pandas.DataFrame.cov","d":"Compute pairwise covariance of columns, excluding NA\/null values.","p":"api\/pandas.DataFrame.cov.html#pandas.DataFrame.cov"},{"t":"pandas.DataFrame.cummax","d":"Return cumulative maximum over a DataFrame or Series axis.","p":"api\/pandas.DataFrame.cummax.html#pandas.DataFrame.cummax"},{"t":"pandas.DataFrame.cummin","d":"Return cumulative minimum over a DataFrame or Series axis.","p":"api\/pandas.DataFrame.cummin.html#pandas.DataFrame.cummin"},{"t":"pandas.DataFrame.cumprod","d":"Return cumulative product over a DataFrame or Series axis.","p":"api\/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod"},{"t":"pandas.DataFrame.cumsum","d":"Return cumulative sum over a DataFrame or Series axis.","p":"api\/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum"},{"t":"pandas.DataFrame.describe","d":"Generate descriptive statistics.","p":"api\/pandas.DataFrame.describe.html#pandas.DataFrame.describe"},{"t":"pandas.DataFrame.diff","d":"First discrete difference of element.","p":"api\/pandas.DataFrame.diff.html#pandas.DataFrame.diff"},{"t":"pandas.DataFrame.eval","d":"Evaluate a string describing operations on DataFrame columns.","p":"api\/pandas.DataFrame.eval.html#pandas.DataFrame.eval"},{"t":"pandas.DataFrame.kurt","d":"Return unbiased kurtosis over requested axis.","p":"api\/pandas.DataFrame.kurt.html#pandas.DataFrame.kurt"},{"t":"pandas.DataFrame.kurtosis","d":"Return unbiased kurtosis over requested axis.","p":"api\/pandas.DataFrame.kurtosis.html#pandas.DataFrame.kurtosis"},{"t":"pandas.DataFrame.mad","d":"Return the mean absolute deviation of the values over the requested axis.","p":"api\/pandas.DataFrame.mad.html#pandas.DataFrame.mad"},{"t":"pandas.DataFrame.max","d":"Return the maximum of the values over the requested axis.","p":"api\/pandas.DataFrame.max.html#pandas.DataFrame.max"},{"t":"pandas.DataFrame.mean","d":"Return the mean of the values over the requested axis.","p":"api\/pandas.DataFrame.mean.html#pandas.DataFrame.mean"},{"t":"pandas.DataFrame.median","d":"Return the median of the values over the requested axis.","p":"api\/pandas.DataFrame.median.html#pandas.DataFrame.median"},{"t":"pandas.DataFrame.min","d":"Return the minimum of the values over the requested axis.","p":"api\/pandas.DataFrame.min.html#pandas.DataFrame.min"},{"t":"pandas.DataFrame.mode","d":"Get the mode(s) of each element along the selected axis.","p":"api\/pandas.DataFrame.mode.html#pandas.DataFrame.mode"},{"t":"pandas.DataFrame.pct_change","d":"Percentage change between the current and a prior element.","p":"api\/pandas.DataFrame.pct_change.html#pandas.DataFrame.pct_change"},{"t":"pandas.DataFrame.prod","d":"Return the product of the values over the requested axis.","p":"api\/pandas.DataFrame.prod.html#pandas.DataFrame.prod"},{"t":"pandas.DataFrame.product","d":"Return the product of the values over the requested axis.","p":"api\/pandas.DataFrame.product.html#pandas.DataFrame.product"},{"t":"pandas.DataFrame.quantile","d":"Return values at the given quantile over requested axis.","p":"api\/pandas.DataFrame.quantile.html#pandas.DataFrame.quantile"},{"t":"pandas.DataFrame.rank","d":"Compute numerical data ranks (1 through n) along axis.","p":"api\/pandas.DataFrame.rank.html#pandas.DataFrame.rank"},{"t":"pandas.DataFrame.round","d":"Round a DataFrame to a variable number of decimal places.","p":"api\/pandas.DataFrame.round.html#pandas.DataFrame.round"},{"t":"pandas.DataFrame.sem","d":"Return unbiased standard error of the mean over requested axis.","p":"api\/pandas.DataFrame.sem.html#pandas.DataFrame.sem"},{"t":"pandas.DataFrame.skew","d":"Return unbiased skew over requested axis.","p":"api\/pandas.DataFrame.skew.html#pandas.DataFrame.skew"},{"t":"pandas.DataFrame.sum","d":"Return the sum of the values over the requested axis.","p":"api\/pandas.DataFrame.sum.html#pandas.DataFrame.sum"},{"t":"pandas.DataFrame.std","d":"Return sample standard deviation over requested axis.","p":"api\/pandas.DataFrame.std.html#pandas.DataFrame.std"},{"t":"pandas.DataFrame.var","d":"Return unbiased variance over requested axis.","p":"api\/pandas.DataFrame.var.html#pandas.DataFrame.var"},{"t":"pandas.DataFrame.nunique","d":"Count distinct observations over requested axis.","p":"api\/pandas.DataFrame.nunique.html#pandas.DataFrame.nunique"},{"t":"pandas.DataFrame.value_counts","d":"Return a Series containing counts of unique rows in the DataFrame.","p":"api\/pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts"},{"t":"pandas.DataFrame.add_prefix","d":"Prefix labels with string prefix.","p":"api\/pandas.DataFrame.add_prefix.html#pandas.DataFrame.add_prefix"},{"t":"pandas.DataFrame.add_suffix","d":"Suffix labels with string suffix.","p":"api\/pandas.DataFrame.add_suffix.html#pandas.DataFrame.add_suffix"},{"t":"pandas.DataFrame.align","d":"Align two objects on their axes with the specified join method.","p":"api\/pandas.DataFrame.align.html#pandas.DataFrame.align"},{"t":"pandas.DataFrame.at_time","d":"Select values at particular time of day (e.g., 9:30AM).","p":"api\/pandas.DataFrame.at_time.html#pandas.DataFrame.at_time"},{"t":"pandas.DataFrame.between_time","d":"Select values between particular times of the day (e.g., 9:00-9:30 AM).","p":"api\/pandas.DataFrame.between_time.html#pandas.DataFrame.between_time"},{"t":"pandas.DataFrame.drop","d":"Drop specified labels from rows or columns.","p":"api\/pandas.DataFrame.drop.html#pandas.DataFrame.drop"},{"t":"pandas.DataFrame.drop_duplicates","d":"Return DataFrame with duplicate rows removed.","p":"api\/pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates"},{"t":"pandas.DataFrame.duplicated","d":"Return boolean Series denoting duplicate rows.","p":"api\/pandas.DataFrame.duplicated.html#pandas.DataFrame.duplicated"},{"t":"pandas.DataFrame.equals","d":"Test whether two objects contain the same elements.","p":"api\/pandas.DataFrame.equals.html#pandas.DataFrame.equals"},{"t":"pandas.DataFrame.filter","d":"Subset the dataframe rows or columns according to the specified index labels.","p":"api\/pandas.DataFrame.filter.html#pandas.DataFrame.filter"},{"t":"pandas.DataFrame.first","d":"Select initial periods of time series data based on a date offset.","p":"api\/pandas.DataFrame.first.html#pandas.DataFrame.first"},{"t":"pandas.DataFrame.idxmax","d":"Return index of first occurrence of maximum over requested axis.","p":"api\/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax"},{"t":"pandas.DataFrame.idxmin","d":"Return index of first occurrence of minimum over requested axis.","p":"api\/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin"},{"t":"pandas.DataFrame.last","d":"Select final periods of time series data based on a date offset.","p":"api\/pandas.DataFrame.last.html#pandas.DataFrame.last"},{"t":"pandas.DataFrame.reindex","d":"Conform Series\/DataFrame to new index with optional filling logic.","p":"api\/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex"},{"t":"pandas.DataFrame.reindex_like","d":"Return an object with matching indices as other object.","p":"api\/pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like"},{"t":"pandas.DataFrame.rename","d":"Alter axes labels.","p":"api\/pandas.DataFrame.rename.html#pandas.DataFrame.rename"},{"t":"pandas.DataFrame.rename_axis","d":"Set the name of the axis for the index or columns.","p":"api\/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis"},{"t":"pandas.DataFrame.reset_index","d":"Reset the index, or a level of it.","p":"api\/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index"},{"t":"pandas.DataFrame.sample","d":"Return a random sample of items from an axis of object.","p":"api\/pandas.DataFrame.sample.html#pandas.DataFrame.sample"},{"t":"pandas.DataFrame.set_axis","d":"Assign desired index to given axis.","p":"api\/pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis"},{"t":"pandas.DataFrame.set_index","d":"Set the DataFrame index using existing columns.","p":"api\/pandas.DataFrame.set_index.html#pandas.DataFrame.set_index"},{"t":"pandas.DataFrame.take","d":"Return the elements in the given positional indices along an axis.","p":"api\/pandas.DataFrame.take.html#pandas.DataFrame.take"},{"t":"pandas.DataFrame.truncate","d":"Truncate a Series or DataFrame before and after some index value.","p":"api\/pandas.DataFrame.truncate.html#pandas.DataFrame.truncate"},{"t":"pandas.DataFrame.backfill","d":"Synonym for DataFrame.fillna() with method='bfill'.","p":"api\/pandas.DataFrame.backfill.html#pandas.DataFrame.backfill"},{"t":"pandas.DataFrame.bfill","d":"Synonym for DataFrame.fillna() with method='bfill'.","p":"api\/pandas.DataFrame.bfill.html#pandas.DataFrame.bfill"},{"t":"pandas.DataFrame.dropna","d":"Remove missing values.","p":"api\/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna"},{"t":"pandas.DataFrame.ffill","d":"Synonym for DataFrame.fillna() with method='ffill'.","p":"api\/pandas.DataFrame.ffill.html#pandas.DataFrame.ffill"},{"t":"pandas.DataFrame.fillna","d":"Fill NA\/NaN values using the specified method.","p":"api\/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna"},{"t":"pandas.DataFrame.interpolate","d":"Fill NaN values using an interpolation method.","p":"api\/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate"},{"t":"pandas.DataFrame.isna","d":"Detect missing values.","p":"api\/pandas.DataFrame.isna.html#pandas.DataFrame.isna"},{"t":"pandas.DataFrame.isnull","d":"Detect missing values.","p":"api\/pandas.DataFrame.isnull.html#pandas.DataFrame.isnull"},{"t":"pandas.DataFrame.notna","d":"Detect existing (non-missing) values.","p":"api\/pandas.DataFrame.notna.html#pandas.DataFrame.notna"},{"t":"pandas.DataFrame.notnull","d":"Detect existing (non-missing) values.","p":"api\/pandas.DataFrame.notnull.html#pandas.DataFrame.notnull"},{"t":"pandas.DataFrame.pad","d":"Synonym for DataFrame.fillna() with method='ffill'.","p":"api\/pandas.DataFrame.pad.html#pandas.DataFrame.pad"},{"t":"pandas.DataFrame.replace","d":"Replace values given in to_replace with value.","p":"api\/pandas.DataFrame.replace.html#pandas.DataFrame.replace"},{"t":"pandas.DataFrame.droplevel","d":"Return DataFrame with requested index \/ column level(s) removed.","p":"api\/pandas.DataFrame.droplevel.html#pandas.DataFrame.droplevel"},{"t":"pandas.DataFrame.pivot","d":"Return reshaped DataFrame organized by given index \/ column values.","p":"api\/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot"},{"t":"pandas.DataFrame.pivot_table","d":"Create a spreadsheet-style pivot table as a DataFrame.","p":"api\/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table"},{"t":"pandas.DataFrame.reorder_levels","d":"Rearrange index levels using input order.","p":"api\/pandas.DataFrame.reorder_levels.html#pandas.DataFrame.reorder_levels"},{"t":"pandas.DataFrame.sort_values","d":"Sort by the values along either axis.","p":"api\/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values"},{"t":"pandas.DataFrame.sort_index","d":"Sort object by labels (along an axis).","p":"api\/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index"},{"t":"pandas.DataFrame.nlargest","d":"Return the first n rows ordered by columns in descending order.","p":"api\/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest"},{"t":"pandas.DataFrame.nsmallest","d":"Return the first n rows ordered by columns in ascending order.","p":"api\/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest"},{"t":"pandas.DataFrame.swaplevel","d":"Swap levels i and j in a MultiIndex on a particular axis.","p":"api\/pandas.DataFrame.swaplevel.html#pandas.DataFrame.swaplevel"},{"t":"pandas.DataFrame.stack","d":"Stack the prescribed level(s) from columns to index.","p":"api\/pandas.DataFrame.stack.html#pandas.DataFrame.stack"},{"t":"pandas.DataFrame.unstack","d":"Pivot a level of the (necessarily hierarchical) index labels.","p":"api\/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack"},{"t":"pandas.DataFrame.swapaxes","d":"Interchange axes and swap values axes appropriately.","p":"api\/pandas.DataFrame.swapaxes.html#pandas.DataFrame.swapaxes"},{"t":"pandas.DataFrame.melt","d":"Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.","p":"api\/pandas.DataFrame.melt.html#pandas.DataFrame.melt"},{"t":"pandas.DataFrame.explode","d":"Transform each element of a list-like to a row, replicating index values.","p":"api\/pandas.DataFrame.explode.html#pandas.DataFrame.explode"},{"t":"pandas.DataFrame.squeeze","d":"Squeeze 1 dimensional axis objects into scalars.","p":"api\/pandas.DataFrame.squeeze.html#pandas.DataFrame.squeeze"},{"t":"pandas.DataFrame.to_xarray","d":"Return an xarray object from the pandas object.","p":"api\/pandas.DataFrame.to_xarray.html#pandas.DataFrame.to_xarray"},{"t":"pandas.DataFrame.T","d":"","p":"api\/pandas.DataFrame.T.html#pandas.DataFrame.T"},{"t":"pandas.DataFrame.transpose","d":"Transpose index and columns.","p":"api\/pandas.DataFrame.transpose.html#pandas.DataFrame.transpose"},{"t":"pandas.DataFrame.append","d":"Append rows of other to the end of caller, returning a new object.","p":"api\/pandas.DataFrame.append.html#pandas.DataFrame.append"},{"t":"pandas.DataFrame.assign","d":"Assign new columns to a DataFrame.","p":"api\/pandas.DataFrame.assign.html#pandas.DataFrame.assign"},{"t":"pandas.DataFrame.compare","d":"Compare to another DataFrame and show the differences.","p":"api\/pandas.DataFrame.compare.html#pandas.DataFrame.compare"},{"t":"pandas.DataFrame.join","d":"Join columns of another DataFrame.","p":"api\/pandas.DataFrame.join.html#pandas.DataFrame.join"},{"t":"pandas.DataFrame.merge","d":"Merge DataFrame or named Series objects with a database-style join.","p":"api\/pandas.DataFrame.merge.html#pandas.DataFrame.merge"},{"t":"pandas.DataFrame.update","d":"Modify in place using non-NA values from another DataFrame.","p":"api\/pandas.DataFrame.update.html#pandas.DataFrame.update"},{"t":"pandas.DataFrame.asfreq","d":"Convert TimeSeries to specified frequency.","p":"api\/pandas.DataFrame.asfreq.html#pandas.DataFrame.asfreq"},{"t":"pandas.DataFrame.asof","d":"Return the last row(s) without any NaNs before where.","p":"api\/pandas.DataFrame.asof.html#pandas.DataFrame.asof"},{"t":"pandas.DataFrame.shift","d":"Shift index by desired number of periods with an optional time freq.","p":"api\/pandas.DataFrame.shift.html#pandas.DataFrame.shift"},{"t":"pandas.DataFrame.slice_shift","d":"(DEPRECATED) Equivalent to shift without copying data.","p":"api\/pandas.DataFrame.slice_shift.html#pandas.DataFrame.slice_shift"},{"t":"pandas.DataFrame.tshift","d":"(DEPRECATED) Shift the time index, using the index\u2019s frequency if available.","p":"api\/pandas.DataFrame.tshift.html#pandas.DataFrame.tshift"},{"t":"pandas.DataFrame.first_valid_index","d":"Return index for first non-NA\/null value.","p":"api\/pandas.DataFrame.first_valid_index.html#pandas.DataFrame.first_valid_index"},{"t":"pandas.DataFrame.last_valid_index","d":"Return index for last non-NA\/null value.","p":"api\/pandas.DataFrame.last_valid_index.html#pandas.DataFrame.last_valid_index"},{"t":"pandas.DataFrame.resample","d":"Resample time-series data.","p":"api\/pandas.DataFrame.resample.html#pandas.DataFrame.resample"},{"t":"pandas.DataFrame.to_period","d":"Convert DataFrame from DatetimeIndex to PeriodIndex.","p":"api\/pandas.DataFrame.to_period.html#pandas.DataFrame.to_period"},{"t":"pandas.DataFrame.to_timestamp","d":"Cast to DatetimeIndex of timestamps, at beginning of period.","p":"api\/pandas.DataFrame.to_timestamp.html#pandas.DataFrame.to_timestamp"},{"t":"pandas.DataFrame.tz_convert","d":"Convert tz-aware axis to target time zone.","p":"api\/pandas.DataFrame.tz_convert.html#pandas.DataFrame.tz_convert"},{"t":"pandas.DataFrame.tz_localize","d":"Localize tz-naive index of a Series or DataFrame to target time zone.","p":"api\/pandas.DataFrame.tz_localize.html#pandas.DataFrame.tz_localize"},{"t":"pandas.DataFrame.attrs","d":"Dictionary of global attributes of this dataset.","p":"api\/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs"},{"t":"pandas.DataFrame.plot","d":"DataFrame plotting accessor and method","p":"api\/pandas.DataFrame.plot.html#pandas.DataFrame.plot"},{"t":"pandas.DataFrame.plot.area","d":"Draw a stacked area plot.","p":"api\/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area"},{"t":"pandas.DataFrame.plot.bar","d":"Vertical bar plot.","p":"api\/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar"},{"t":"pandas.DataFrame.plot.barh","d":"Make a horizontal bar plot.","p":"api\/pandas.DataFrame.plot.barh.html#pandas.DataFrame.plot.barh"},{"t":"pandas.DataFrame.plot.box","d":"Make a box plot of the DataFrame columns.","p":"api\/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box"},{"t":"pandas.DataFrame.plot.density","d":"Generate Kernel Density Estimate plot using Gaussian kernels.","p":"api\/pandas.DataFrame.plot.density.html#pandas.DataFrame.plot.density"},{"t":"pandas.DataFrame.plot.hexbin","d":"Generate a hexagonal binning plot.","p":"api\/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin"},{"t":"pandas.DataFrame.plot.hist","d":"Draw one histogram of the DataFrame\u2019s columns.","p":"api\/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist"},{"t":"pandas.DataFrame.plot.kde","d":"Generate Kernel Density Estimate plot using Gaussian kernels.","p":"api\/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde"},{"t":"pandas.DataFrame.plot.line","d":"Plot Series or DataFrame as lines.","p":"api\/pandas.DataFrame.plot.line.html#pandas.DataFrame.plot.line"},{"t":"pandas.DataFrame.plot.pie","d":"Generate a pie plot.","p":"api\/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie"},{"t":"pandas.DataFrame.plot.scatter","d":"Create a scatter plot with varying marker point size and color.","p":"api\/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter"},{"t":"pandas.DataFrame.boxplot","d":"Make a box plot from DataFrame columns.","p":"api\/pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot"},{"t":"pandas.DataFrame.hist","d":"Make a histogram of the DataFrame\u2019s.","p":"api\/pandas.DataFrame.hist.html#pandas.DataFrame.hist"},{"t":"pandas.DataFrame.sparse.density","d":"Ratio of non-sparse points to total (dense) data points.","p":"api\/pandas.DataFrame.sparse.density.html#pandas.DataFrame.sparse.density"},{"t":"pandas.DataFrame.sparse.from_spmatrix","d":"Create a new DataFrame from a scipy sparse matrix.","p":"api\/pandas.DataFrame.sparse.from_spmatrix.html#pandas.DataFrame.sparse.from_spmatrix"},{"t":"pandas.DataFrame.sparse.to_coo","d":"Return the contents of the frame as a sparse SciPy COO matrix.","p":"api\/pandas.DataFrame.sparse.to_coo.html#pandas.DataFrame.sparse.to_coo"},{"t":"pandas.DataFrame.sparse.to_dense","d":"Convert a DataFrame with sparse values to dense.","p":"api\/pandas.DataFrame.sparse.to_dense.html#pandas.DataFrame.sparse.to_dense"},{"t":"pandas.DataFrame.from_dict","d":"Construct DataFrame from dict of array-like or dicts.","p":"api\/pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict"},{"t":"pandas.DataFrame.from_records","d":"Convert structured or record ndarray to DataFrame.","p":"api\/pandas.DataFrame.from_records.html#pandas.DataFrame.from_records"},{"t":"pandas.DataFrame.to_parquet","d":"Write a DataFrame to the binary parquet format.","p":"api\/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet"},{"t":"pandas.DataFrame.to_pickle","d":"Pickle (serialize) object to file.","p":"api\/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle"},{"t":"pandas.DataFrame.to_csv","d":"Write object to a comma-separated values (csv) file.","p":"api\/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv"},{"t":"pandas.DataFrame.to_hdf","d":"Write the contained data to an HDF5 file using HDFStore.","p":"api\/pandas.DataFrame.to_hdf.html#pandas.DataFrame.to_hdf"},{"t":"pandas.DataFrame.to_sql","d":"Write records stored in a DataFrame to a SQL database.","p":"api\/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql"},{"t":"pandas.DataFrame.to_dict","d":"Convert the DataFrame to a dictionary.","p":"api\/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict"},{"t":"pandas.DataFrame.to_excel","d":"Write object to an Excel sheet.","p":"api\/pandas.DataFrame.to_excel.html#pandas.DataFrame.to_excel"},{"t":"pandas.DataFrame.to_json","d":"Convert the object to a JSON string.","p":"api\/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json"},{"t":"pandas.DataFrame.to_html","d":"Render a DataFrame as an HTML table.","p":"api\/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html"},{"t":"pandas.DataFrame.to_feather","d":"Write a DataFrame to the binary Feather format.","p":"api\/pandas.DataFrame.to_feather.html#pandas.DataFrame.to_feather"},{"t":"pandas.DataFrame.to_latex","d":"Render object to a LaTeX tabular, longtable, or nested table\/tabular.","p":"api\/pandas.DataFrame.to_latex.html#pandas.DataFrame.to_latex"},{"t":"pandas.DataFrame.to_stata","d":"Export DataFrame object to Stata dta format.","p":"api\/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata"},{"t":"pandas.DataFrame.to_gbq","d":"Write a DataFrame to a Google BigQuery table.","p":"api\/pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq"},{"t":"pandas.DataFrame.to_records","d":"Convert DataFrame to a NumPy record array.","p":"api\/pandas.DataFrame.to_records.html#pandas.DataFrame.to_records"},{"t":"pandas.DataFrame.to_string","d":"Render a DataFrame to a console-friendly tabular output.","p":"api\/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string"},{"t":"pandas.DataFrame.to_clipboard","d":"Copy object to the system clipboard.","p":"api\/pandas.DataFrame.to_clipboard.html#pandas.DataFrame.to_clipboard"},{"t":"pandas.DataFrame.to_markdown","d":"Print DataFrame in Markdown-friendly format.","p":"api\/pandas.DataFrame.to_markdown.html#pandas.DataFrame.to_markdown"},{"t":"pandas.DataFrame.style","d":"Returns a Styler object.","p":"api\/pandas.DataFrame.style.html#pandas.DataFrame.style"},{"t":"pandas.array","d":"Create an array.","p":"api\/pandas.array.html#pandas.array"},{"t":"pandas.Timestamp","d":"Pandas replacement for python datetime.datetime object.","p":"api\/pandas.Timestamp.html#pandas.Timestamp"},{"t":"pandas.Timestamp.asm8","d":"Return numpy datetime64 format in nanoseconds.","p":"api\/pandas.Timestamp.asm8.html#pandas.Timestamp.asm8"},{"t":"pandas.Timestamp.day","d":"","p":"api\/pandas.Timestamp.day.html#pandas.Timestamp.day"},{"t":"pandas.Timestamp.dayofweek","d":"Return day of the week.","p":"api\/pandas.Timestamp.dayofweek.html#pandas.Timestamp.dayofweek"},{"t":"pandas.Timestamp.day_of_week","d":"Return day of the week.","p":"api\/pandas.Timestamp.day_of_week.html#pandas.Timestamp.day_of_week"},{"t":"pandas.Timestamp.dayofyear","d":"Return the day of the year.","p":"api\/pandas.Timestamp.dayofyear.html#pandas.Timestamp.dayofyear"},{"t":"pandas.Timestamp.day_of_year","d":"Return the day of the year.","p":"api\/pandas.Timestamp.day_of_year.html#pandas.Timestamp.day_of_year"},{"t":"pandas.Timestamp.days_in_month","d":"Return the number of days in the month.","p":"api\/pandas.Timestamp.days_in_month.html#pandas.Timestamp.days_in_month"},{"t":"pandas.Timestamp.daysinmonth","d":"Return the number of days in the month.","p":"api\/pandas.Timestamp.daysinmonth.html#pandas.Timestamp.daysinmonth"},{"t":"pandas.Timestamp.fold","d":"","p":"api\/pandas.Timestamp.fold.html#pandas.Timestamp.fold"},{"t":"pandas.Timestamp.hour","d":"","p":"api\/pandas.Timestamp.hour.html#pandas.Timestamp.hour"},{"t":"pandas.Timestamp.is_leap_year","d":"Return True if year is a leap year.","p":"api\/pandas.Timestamp.is_leap_year.html#pandas.Timestamp.is_leap_year"},{"t":"pandas.Timestamp.is_month_end","d":"Return True if date is last day of month.","p":"api\/pandas.Timestamp.is_month_end.html#pandas.Timestamp.is_month_end"},{"t":"pandas.Timestamp.is_month_start","d":"Return True if date is first day of month.","p":"api\/pandas.Timestamp.is_month_start.html#pandas.Timestamp.is_month_start"},{"t":"pandas.Timestamp.is_quarter_end","d":"Return True if date is last day of the quarter.","p":"api\/pandas.Timestamp.is_quarter_end.html#pandas.Timestamp.is_quarter_end"},{"t":"pandas.Timestamp.is_quarter_start","d":"Return True if date is first day of the quarter.","p":"api\/pandas.Timestamp.is_quarter_start.html#pandas.Timestamp.is_quarter_start"},{"t":"pandas.Timestamp.is_year_end","d":"Return True if date is last day of the year.","p":"api\/pandas.Timestamp.is_year_end.html#pandas.Timestamp.is_year_end"},{"t":"pandas.Timestamp.is_year_start","d":"Return True if date is first day of the year.","p":"api\/pandas.Timestamp.is_year_start.html#pandas.Timestamp.is_year_start"},{"t":"pandas.Timestamp.max","d":"","p":"api\/pandas.Timestamp.max.html#pandas.Timestamp.max"},{"t":"pandas.Timestamp.microsecond","d":"","p":"api\/pandas.Timestamp.microsecond.html#pandas.Timestamp.microsecond"},{"t":"pandas.Timestamp.min","d":"","p":"api\/pandas.Timestamp.min.html#pandas.Timestamp.min"},{"t":"pandas.Timestamp.minute","d":"","p":"api\/pandas.Timestamp.minute.html#pandas.Timestamp.minute"},{"t":"pandas.Timestamp.month","d":"","p":"api\/pandas.Timestamp.month.html#pandas.Timestamp.month"},{"t":"pandas.Timestamp.nanosecond","d":"","p":"api\/pandas.Timestamp.nanosecond.html#pandas.Timestamp.nanosecond"},{"t":"pandas.Timestamp.quarter","d":"Return the quarter of the year.","p":"api\/pandas.Timestamp.quarter.html#pandas.Timestamp.quarter"},{"t":"pandas.Timestamp.resolution","d":"","p":"api\/pandas.Timestamp.resolution.html#pandas.Timestamp.resolution"},{"t":"pandas.Timestamp.second","d":"","p":"api\/pandas.Timestamp.second.html#pandas.Timestamp.second"},{"t":"pandas.Timestamp.tz","d":"Alias for tzinfo.","p":"api\/pandas.Timestamp.tz.html#pandas.Timestamp.tz"},{"t":"pandas.Timestamp.tzinfo","d":"","p":"api\/pandas.Timestamp.tzinfo.html#pandas.Timestamp.tzinfo"},{"t":"pandas.Timestamp.value","d":"","p":"api\/pandas.Timestamp.value.html#pandas.Timestamp.value"},{"t":"pandas.Timestamp.week","d":"Return the week number of the year.","p":"api\/pandas.Timestamp.week.html#pandas.Timestamp.week"},{"t":"pandas.Timestamp.weekofyear","d":"Return the week number of the year.","p":"api\/pandas.Timestamp.weekofyear.html#pandas.Timestamp.weekofyear"},{"t":"pandas.Timestamp.year","d":"","p":"api\/pandas.Timestamp.year.html#pandas.Timestamp.year"},{"t":"pandas.Timestamp.astimezone","d":"Convert tz-aware Timestamp to another time zone.","p":"api\/pandas.Timestamp.astimezone.html#pandas.Timestamp.astimezone"},{"t":"pandas.Timestamp.ceil","d":"Return a new Timestamp ceiled to this resolution.","p":"api\/pandas.Timestamp.ceil.html#pandas.Timestamp.ceil"},{"t":"pandas.Timestamp.combine","d":"Combine date, time into datetime with same date and time fields.","p":"api\/pandas.Timestamp.combine.html#pandas.Timestamp.combine"},{"t":"pandas.Timestamp.ctime","d":"Return ctime() style string.","p":"api\/pandas.Timestamp.ctime.html#pandas.Timestamp.ctime"},{"t":"pandas.Timestamp.date","d":"Return date object with same year, month and day.","p":"api\/pandas.Timestamp.date.html#pandas.Timestamp.date"},{"t":"pandas.Timestamp.day_name","d":"Return the day name of the Timestamp with specified locale.","p":"api\/pandas.Timestamp.day_name.html#pandas.Timestamp.day_name"},{"t":"pandas.Timestamp.dst","d":"Return self.tzinfo.dst(self).","p":"api\/pandas.Timestamp.dst.html#pandas.Timestamp.dst"},{"t":"pandas.Timestamp.floor","d":"Return a new Timestamp floored to this resolution.","p":"api\/pandas.Timestamp.floor.html#pandas.Timestamp.floor"},{"t":"pandas.Timestamp.freq","d":"","p":"api\/pandas.Timestamp.freq.html#pandas.Timestamp.freq"},{"t":"pandas.Timestamp.freqstr","d":"Return the total number of days in the month.","p":"api\/pandas.Timestamp.freqstr.html#pandas.Timestamp.freqstr"},{"t":"pandas.Timestamp.fromordinal","d":"Passed an ordinal, translate and convert to a ts.","p":"api\/pandas.Timestamp.fromordinal.html#pandas.Timestamp.fromordinal"},{"t":"pandas.Timestamp.fromtimestamp","d":"Transform timestamp[, tz] to tz\u2019s local time from POSIX timestamp.","p":"api\/pandas.Timestamp.fromtimestamp.html#pandas.Timestamp.fromtimestamp"},{"t":"pandas.Timestamp.isocalendar","d":"Return a 3-tuple containing ISO year, week number, and weekday.","p":"api\/pandas.Timestamp.isocalendar.html#pandas.Timestamp.isocalendar"},{"t":"pandas.Timestamp.isoformat","d":"[sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].","p":"api\/pandas.Timestamp.isoformat.html#pandas.Timestamp.isoformat"},{"t":"pandas.Timestamp.isoweekday","d":"Return the day of the week represented by the date.","p":"api\/pandas.Timestamp.isoweekday.html#pandas.Timestamp.isoweekday"},{"t":"pandas.Timestamp.month_name","d":"Return the month name of the Timestamp with specified locale.","p":"api\/pandas.Timestamp.month_name.html#pandas.Timestamp.month_name"},{"t":"pandas.Timestamp.normalize","d":"Normalize Timestamp to midnight, preserving tz information.","p":"api\/pandas.Timestamp.normalize.html#pandas.Timestamp.normalize"},{"t":"pandas.Timestamp.now","d":"Return new Timestamp object representing current time local to tz.","p":"api\/pandas.Timestamp.now.html#pandas.Timestamp.now"},{"t":"pandas.Timestamp.replace","d":"Implements datetime.replace, handles nanoseconds.","p":"api\/pandas.Timestamp.replace.html#pandas.Timestamp.replace"},{"t":"pandas.Timestamp.round","d":"Round the Timestamp to the specified resolution.","p":"api\/pandas.Timestamp.round.html#pandas.Timestamp.round"},{"t":"pandas.Timestamp.strftime","d":"Return a string representing the given POSIX timestamp controlled by an explicit format string.","p":"api\/pandas.Timestamp.strftime.html#pandas.Timestamp.strftime"},{"t":"pandas.Timestamp.strptime","d":"Function is not implemented.","p":"api\/pandas.Timestamp.strptime.html#pandas.Timestamp.strptime"},{"t":"pandas.Timestamp.time","d":"Return time object with same time but with tzinfo=None.","p":"api\/pandas.Timestamp.time.html#pandas.Timestamp.time"},{"t":"pandas.Timestamp.timestamp","d":"Return POSIX timestamp as float.","p":"api\/pandas.Timestamp.timestamp.html#pandas.Timestamp.timestamp"},{"t":"pandas.Timestamp.timetuple","d":"Return time tuple, compatible with time.localtime().","p":"api\/pandas.Timestamp.timetuple.html#pandas.Timestamp.timetuple"},{"t":"pandas.Timestamp.timetz","d":"Return time object with same time and tzinfo.","p":"api\/pandas.Timestamp.timetz.html#pandas.Timestamp.timetz"},{"t":"pandas.Timestamp.to_datetime64","d":"Return a numpy.datetime64 object with \u2018ns\u2019 precision.","p":"api\/pandas.Timestamp.to_datetime64.html#pandas.Timestamp.to_datetime64"},{"t":"pandas.Timestamp.to_numpy","d":"Convert the Timestamp to a NumPy datetime64.","p":"api\/pandas.Timestamp.to_numpy.html#pandas.Timestamp.to_numpy"},{"t":"pandas.Timestamp.to_julian_date","d":"Convert TimeStamp to a Julian Date.","p":"api\/pandas.Timestamp.to_julian_date.html#pandas.Timestamp.to_julian_date"},{"t":"pandas.Timestamp.to_period","d":"Return an period of which this timestamp is an observation.","p":"api\/pandas.Timestamp.to_period.html#pandas.Timestamp.to_period"},{"t":"pandas.Timestamp.to_pydatetime","d":"Convert a Timestamp object to a native Python datetime object.","p":"api\/pandas.Timestamp.to_pydatetime.html#pandas.Timestamp.to_pydatetime"},{"t":"pandas.Timestamp.today","d":"Return the current time in the local timezone.","p":"api\/pandas.Timestamp.today.html#pandas.Timestamp.today"},{"t":"pandas.Timestamp.toordinal","d":"Return proleptic Gregorian ordinal.","p":"api\/pandas.Timestamp.toordinal.html#pandas.Timestamp.toordinal"},{"t":"pandas.Timestamp.tz_convert","d":"Convert tz-aware Timestamp to another time zone.","p":"api\/pandas.Timestamp.tz_convert.html#pandas.Timestamp.tz_convert"},{"t":"pandas.Timestamp.tz_localize","d":"Convert naive Timestamp to local time zone, or remove timezone from tz-aware Timestamp.","p":"api\/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize"},{"t":"pandas.Timestamp.tzname","d":"Return self.tzinfo.tzname(self).","p":"api\/pandas.Timestamp.tzname.html#pandas.Timestamp.tzname"},{"t":"pandas.Timestamp.utcfromtimestamp","d":"Construct a naive UTC datetime from a POSIX timestamp.","p":"api\/pandas.Timestamp.utcfromtimestamp.html#pandas.Timestamp.utcfromtimestamp"},{"t":"pandas.Timestamp.utcnow","d":"Return a new Timestamp representing UTC day and time.","p":"api\/pandas.Timestamp.utcnow.html#pandas.Timestamp.utcnow"},{"t":"pandas.Timestamp.utcoffset","d":"Return self.tzinfo.utcoffset(self).","p":"api\/pandas.Timestamp.utcoffset.html#pandas.Timestamp.utcoffset"},{"t":"pandas.Timestamp.utctimetuple","d":"Return UTC time tuple, compatible with time.localtime().","p":"api\/pandas.Timestamp.utctimetuple.html#pandas.Timestamp.utctimetuple"},{"t":"pandas.Timestamp.weekday","d":"Return the day of the week represented by the date.","p":"api\/pandas.Timestamp.weekday.html#pandas.Timestamp.weekday"},{"t":"pandas.arrays.DatetimeArray","d":"Pandas ExtensionArray for tz-naive or tz-aware datetime data.","p":"api\/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray"},{"t":"pandas.DatetimeTZDtype","d":"An ExtensionDtype for timezone-aware datetime data.","p":"api\/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype"},{"t":"pandas.Timedelta","d":"Represents a duration, the difference between two dates or times.","p":"api\/pandas.Timedelta.html#pandas.Timedelta"},{"t":"pandas.Timedelta.asm8","d":"Return a numpy timedelta64 array scalar view.","p":"api\/pandas.Timedelta.asm8.html#pandas.Timedelta.asm8"},{"t":"pandas.Timedelta.components","d":"Return a components namedtuple-like.","p":"api\/pandas.Timedelta.components.html#pandas.Timedelta.components"},{"t":"pandas.Timedelta.days","d":"Number of days.","p":"api\/pandas.Timedelta.days.html#pandas.Timedelta.days"},{"t":"pandas.Timedelta.delta","d":"Return the timedelta in nanoseconds (ns), for internal compatibility.","p":"api\/pandas.Timedelta.delta.html#pandas.Timedelta.delta"},{"t":"pandas.Timedelta.freq","d":"","p":"api\/pandas.Timedelta.freq.html#pandas.Timedelta.freq"},{"t":"pandas.Timedelta.is_populated","d":"","p":"api\/pandas.Timedelta.is_populated.html#pandas.Timedelta.is_populated"},{"t":"pandas.Timedelta.max","d":"","p":"api\/pandas.Timedelta.max.html#pandas.Timedelta.max"},{"t":"pandas.Timedelta.microseconds","d":"Number of microseconds (>= 0 and less than 1 second).","p":"api\/pandas.Timedelta.microseconds.html#pandas.Timedelta.microseconds"},{"t":"pandas.Timedelta.min","d":"","p":"api\/pandas.Timedelta.min.html#pandas.Timedelta.min"},{"t":"pandas.Timedelta.nanoseconds","d":"Return the number of nanoseconds (n), where 0 <= n < 1 microsecond.","p":"api\/pandas.Timedelta.nanoseconds.html#pandas.Timedelta.nanoseconds"},{"t":"pandas.Timedelta.resolution","d":"","p":"api\/pandas.Timedelta.resolution.html#pandas.Timedelta.resolution"},{"t":"pandas.Timedelta.seconds","d":"Number of seconds (>= 0 and less than 1 day).","p":"api\/pandas.Timedelta.seconds.html#pandas.Timedelta.seconds"},{"t":"pandas.Timedelta.value","d":"","p":"api\/pandas.Timedelta.value.html#pandas.Timedelta.value"},{"t":"pandas.Timedelta.view","d":"Array view compatibility.","p":"api\/pandas.Timedelta.view.html#pandas.Timedelta.view"},{"t":"pandas.Timedelta.ceil","d":"Return a new Timedelta ceiled to this resolution.","p":"api\/pandas.Timedelta.ceil.html#pandas.Timedelta.ceil"},{"t":"pandas.Timedelta.floor","d":"Return a new Timedelta floored to this resolution.","p":"api\/pandas.Timedelta.floor.html#pandas.Timedelta.floor"},{"t":"pandas.Timedelta.isoformat","d":"Format Timedelta as ISO 8601 Duration like P[n]Y[n]M[n]DT[n]H[n]M[n]S, where the [n] s are replaced by the values.","p":"api\/pandas.Timedelta.isoformat.html#pandas.Timedelta.isoformat"},{"t":"pandas.Timedelta.round","d":"Round the Timedelta to the specified resolution.","p":"api\/pandas.Timedelta.round.html#pandas.Timedelta.round"},{"t":"pandas.Timedelta.to_pytimedelta","d":"Convert a pandas Timedelta object into a python timedelta object.","p":"api\/pandas.Timedelta.to_pytimedelta.html#pandas.Timedelta.to_pytimedelta"},{"t":"pandas.Timedelta.to_timedelta64","d":"Return a numpy.timedelta64 object with \u2018ns\u2019 precision.","p":"api\/pandas.Timedelta.to_timedelta64.html#pandas.Timedelta.to_timedelta64"},{"t":"pandas.Timedelta.to_numpy","d":"Convert the Timedelta to a NumPy timedelta64.","p":"api\/pandas.Timedelta.to_numpy.html#pandas.Timedelta.to_numpy"},{"t":"pandas.Timedelta.total_seconds","d":"Total seconds in the duration.","p":"api\/pandas.Timedelta.total_seconds.html#pandas.Timedelta.total_seconds"},{"t":"pandas.arrays.TimedeltaArray","d":"Pandas ExtensionArray for timedelta data.","p":"api\/pandas.arrays.TimedeltaArray.html#pandas.arrays.TimedeltaArray"},{"t":"pandas.Period","d":"Represents a period of time.","p":"api\/pandas.Period.html#pandas.Period"},{"t":"pandas.Period.day","d":"Get day of the month that a Period falls on.","p":"api\/pandas.Period.day.html#pandas.Period.day"},{"t":"pandas.Period.dayofweek","d":"Day of the week the period lies in, with Monday=0 and Sunday=6.","p":"api\/pandas.Period.dayofweek.html#pandas.Period.dayofweek"},{"t":"pandas.Period.day_of_week","d":"Day of the week the period lies in, with Monday=0 and Sunday=6.","p":"api\/pandas.Period.day_of_week.html#pandas.Period.day_of_week"},{"t":"pandas.Period.dayofyear","d":"Return the day of the year.","p":"api\/pandas.Period.dayofyear.html#pandas.Period.dayofyear"},{"t":"pandas.Period.day_of_year","d":"Return the day of the year.","p":"api\/pandas.Period.day_of_year.html#pandas.Period.day_of_year"},{"t":"pandas.Period.days_in_month","d":"Get the total number of days in the month that this period falls on.","p":"api\/pandas.Period.days_in_month.html#pandas.Period.days_in_month"},{"t":"pandas.Period.daysinmonth","d":"Get the total number of days of the month that the Period falls in.","p":"api\/pandas.Period.daysinmonth.html#pandas.Period.daysinmonth"},{"t":"pandas.Period.end_time","d":"","p":"api\/pandas.Period.end_time.html#pandas.Period.end_time"},{"t":"pandas.Period.freq","d":"","p":"api\/pandas.Period.freq.html#pandas.Period.freq"},{"t":"pandas.Period.freqstr","d":"","p":"api\/pandas.Period.freqstr.html#pandas.Period.freqstr"},{"t":"pandas.Period.hour","d":"Get the hour of the day component of the Period.","p":"api\/pandas.Period.hour.html#pandas.Period.hour"},{"t":"pandas.Period.is_leap_year","d":"","p":"api\/pandas.Period.is_leap_year.html#pandas.Period.is_leap_year"},{"t":"pandas.Period.minute","d":"Get minute of the hour component of the Period.","p":"api\/pandas.Period.minute.html#pandas.Period.minute"},{"t":"pandas.Period.month","d":"","p":"api\/pandas.Period.month.html#pandas.Period.month"},{"t":"pandas.Period.ordinal","d":"","p":"api\/pandas.Period.ordinal.html#pandas.Period.ordinal"},{"t":"pandas.Period.quarter","d":"","p":"api\/pandas.Period.quarter.html#pandas.Period.quarter"},{"t":"pandas.Period.qyear","d":"Fiscal year the Period lies in according to its starting-quarter.","p":"api\/pandas.Period.qyear.html#pandas.Period.qyear"},{"t":"pandas.Period.second","d":"Get the second component of the Period.","p":"api\/pandas.Period.second.html#pandas.Period.second"},{"t":"pandas.Period.start_time","d":"Get the Timestamp for the start of the period.","p":"api\/pandas.Period.start_time.html#pandas.Period.start_time"},{"t":"pandas.Period.week","d":"Get the week of the year on the given Period.","p":"api\/pandas.Period.week.html#pandas.Period.week"},{"t":"pandas.Period.weekday","d":"Day of the week the period lies in, with Monday=0 and Sunday=6.","p":"api\/pandas.Period.weekday.html#pandas.Period.weekday"},{"t":"pandas.Period.weekofyear","d":"","p":"api\/pandas.Period.weekofyear.html#pandas.Period.weekofyear"},{"t":"pandas.Period.year","d":"","p":"api\/pandas.Period.year.html#pandas.Period.year"},{"t":"pandas.Period.asfreq","d":"Convert Period to desired frequency, at the start or end of the interval.","p":"api\/pandas.Period.asfreq.html#pandas.Period.asfreq"},{"t":"pandas.Period.now","d":"","p":"api\/pandas.Period.now.html#pandas.Period.now"},{"t":"pandas.Period.strftime","d":"Returns the string representation of the Period, depending on the selected fmt.","p":"api\/pandas.Period.strftime.html#pandas.Period.strftime"},{"t":"pandas.Period.to_timestamp","d":"Return the Timestamp representation of the Period.","p":"api\/pandas.Period.to_timestamp.html#pandas.Period.to_timestamp"},{"t":"pandas.arrays.PeriodArray","d":"Pandas ExtensionArray for storing Period data.","p":"api\/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray"},{"t":"pandas.PeriodDtype","d":"An ExtensionDtype for Period data.","p":"api\/pandas.PeriodDtype.html#pandas.PeriodDtype"},{"t":"pandas.Interval","d":"Immutable object implementing an Interval, a bounded slice-like interval.","p":"api\/pandas.Interval.html#pandas.Interval"},{"t":"pandas.Interval.closed","d":"Whether the interval is closed on the left-side, right-side, both or neither.","p":"api\/pandas.Interval.closed.html#pandas.Interval.closed"},{"t":"pandas.Interval.closed_left","d":"Check if the interval is closed on the left side.","p":"api\/pandas.Interval.closed_left.html#pandas.Interval.closed_left"},{"t":"pandas.Interval.closed_right","d":"Check if the interval is closed on the right side.","p":"api\/pandas.Interval.closed_right.html#pandas.Interval.closed_right"},{"t":"pandas.Interval.is_empty","d":"Indicates if an interval is empty, meaning it contains no points.","p":"api\/pandas.Interval.is_empty.html#pandas.Interval.is_empty"},{"t":"pandas.Interval.left","d":"Left bound for the interval.","p":"api\/pandas.Interval.left.html#pandas.Interval.left"},{"t":"pandas.Interval.length","d":"Return the length of the Interval.","p":"api\/pandas.Interval.length.html#pandas.Interval.length"},{"t":"pandas.Interval.mid","d":"Return the midpoint of the Interval.","p":"api\/pandas.Interval.mid.html#pandas.Interval.mid"},{"t":"pandas.Interval.open_left","d":"Check if the interval is open on the left side.","p":"api\/pandas.Interval.open_left.html#pandas.Interval.open_left"},{"t":"pandas.Interval.open_right","d":"Check if the interval is open on the right side.","p":"api\/pandas.Interval.open_right.html#pandas.Interval.open_right"},{"t":"pandas.Interval.overlaps","d":"Check whether two Interval objects overlap.","p":"api\/pandas.Interval.overlaps.html#pandas.Interval.overlaps"},{"t":"pandas.Interval.right","d":"Right bound for the interval.","p":"api\/pandas.Interval.right.html#pandas.Interval.right"},{"t":"pandas.arrays.IntervalArray","d":"Pandas array for interval data that are closed on the same side.","p":"api\/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray"},{"t":"pandas.IntervalDtype","d":"An ExtensionDtype for Interval data.","p":"api\/pandas.IntervalDtype.html#pandas.IntervalDtype"},{"t":"pandas.arrays.IntegerArray","d":"Array of integer (optional missing) values.","p":"api\/pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray"},{"t":"pandas.Int8Dtype","d":"An ExtensionDtype for int8 integer data.","p":"api\/pandas.Int8Dtype.html#pandas.Int8Dtype"},{"t":"pandas.Int16Dtype","d":"An ExtensionDtype for int16 integer data.","p":"api\/pandas.Int16Dtype.html#pandas.Int16Dtype"},{"t":"pandas.Int32Dtype","d":"An ExtensionDtype for int32 integer data.","p":"api\/pandas.Int32Dtype.html#pandas.Int32Dtype"},{"t":"pandas.Int64Dtype","d":"An ExtensionDtype for int64 integer data.","p":"api\/pandas.Int64Dtype.html#pandas.Int64Dtype"},{"t":"pandas.UInt8Dtype","d":"An ExtensionDtype for uint8 integer data.","p":"api\/pandas.UInt8Dtype.html#pandas.UInt8Dtype"},{"t":"pandas.UInt16Dtype","d":"An ExtensionDtype for uint16 integer data.","p":"api\/pandas.UInt16Dtype.html#pandas.UInt16Dtype"},{"t":"pandas.UInt32Dtype","d":"An ExtensionDtype for uint32 integer data.","p":"api\/pandas.UInt32Dtype.html#pandas.UInt32Dtype"},{"t":"pandas.UInt64Dtype","d":"An ExtensionDtype for uint64 integer data.","p":"api\/pandas.UInt64Dtype.html#pandas.UInt64Dtype"},{"t":"pandas.CategoricalDtype","d":"Type for categorical data with the categories and orderedness.","p":"api\/pandas.CategoricalDtype.html#pandas.CategoricalDtype"},{"t":"pandas.CategoricalDtype.categories","d":"An Index containing the unique categories allowed.","p":"api\/pandas.CategoricalDtype.categories.html#pandas.CategoricalDtype.categories"},{"t":"pandas.CategoricalDtype.ordered","d":"Whether the categories have an ordered relationship.","p":"api\/pandas.CategoricalDtype.ordered.html#pandas.CategoricalDtype.ordered"},{"t":"pandas.Categorical","d":"Represent a categorical variable in classic R \/ S-plus fashion.","p":"api\/pandas.Categorical.html#pandas.Categorical"},{"t":"pandas.Categorical.from_codes","d":"Make a Categorical type from codes and categories or dtype.","p":"api\/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes"},{"t":"pandas.Categorical.dtype","d":"The CategoricalDtype for this instance.","p":"api\/pandas.Categorical.dtype.html#pandas.Categorical.dtype"},{"t":"pandas.Categorical.categories","d":"The categories of this categorical.","p":"api\/pandas.Categorical.categories.html#pandas.Categorical.categories"},{"t":"pandas.Categorical.ordered","d":"Whether the categories have an ordered relationship.","p":"api\/pandas.Categorical.ordered.html#pandas.Categorical.ordered"},{"t":"pandas.Categorical.codes","d":"The category codes of this categorical.","p":"api\/pandas.Categorical.codes.html#pandas.Categorical.codes"},{"t":"pandas.Categorical.__array__","d":"The numpy array interface.","p":"api\/pandas.Categorical.__array__.html#pandas.Categorical.__array__"},{"t":"pandas.arrays.SparseArray","d":"An ExtensionArray for storing sparse data.","p":"api\/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray"},{"t":"pandas.SparseDtype","d":"Dtype for data stored in SparseArray.","p":"api\/pandas.SparseDtype.html#pandas.SparseDtype"},{"t":"pandas.arrays.StringArray","d":"Extension array for string data.","p":"api\/pandas.arrays.StringArray.html#pandas.arrays.StringArray"},{"t":"pandas.StringDtype","d":"Extension dtype for string data.","p":"api\/pandas.StringDtype.html#pandas.StringDtype"},{"t":"pandas.arrays.BooleanArray","d":"Array of boolean (True\/False) data with missing values.","p":"api\/pandas.arrays.BooleanArray.html#pandas.arrays.BooleanArray"},{"t":"pandas.BooleanDtype","d":"Extension dtype for boolean data.","p":"api\/pandas.BooleanDtype.html#pandas.BooleanDtype"},{"t":"pandas.Index","d":"Immutable sequence used for indexing and alignment.","p":"api\/pandas.Index.html#pandas.Index"},{"t":"pandas.Index.values","d":"Return an array representing the data in the Index.","p":"api\/pandas.Index.values.html#pandas.Index.values"},{"t":"pandas.Index.is_monotonic","d":"Alias for is_monotonic_increasing.","p":"api\/pandas.Index.is_monotonic.html#pandas.Index.is_monotonic"},{"t":"pandas.Index.is_monotonic_increasing","d":"Return if the index is monotonic increasing (only equal or increasing) values.","p":"api\/pandas.Index.is_monotonic_increasing.html#pandas.Index.is_monotonic_increasing"},{"t":"pandas.Index.is_monotonic_decreasing","d":"Return if the index is monotonic decreasing (only equal or decreasing) values.","p":"api\/pandas.Index.is_monotonic_decreasing.html#pandas.Index.is_monotonic_decreasing"},{"t":"pandas.Index.is_unique","d":"Return if the index has unique values.","p":"api\/pandas.Index.is_unique.html#pandas.Index.is_unique"},{"t":"pandas.Index.has_duplicates","d":"Check if the Index has duplicate values.","p":"api\/pandas.Index.has_duplicates.html#pandas.Index.has_duplicates"},{"t":"pandas.Index.hasnans","d":"Return if I have any nans; enables various perf speedups.","p":"api\/pandas.Index.hasnans.html#pandas.Index.hasnans"},{"t":"pandas.Index.dtype","d":"Return the dtype object of the underlying data.","p":"api\/pandas.Index.dtype.html#pandas.Index.dtype"},{"t":"pandas.Index.inferred_type","d":"Return a string of the type inferred from the values.","p":"api\/pandas.Index.inferred_type.html#pandas.Index.inferred_type"},{"t":"pandas.Index.is_all_dates","d":"Whether or not the index values only consist of dates.","p":"api\/pandas.Index.is_all_dates.html#pandas.Index.is_all_dates"},{"t":"pandas.Index.shape","d":"Return a tuple of the shape of the underlying data.","p":"api\/pandas.Index.shape.html#pandas.Index.shape"},{"t":"pandas.Index.name","d":"Return Index or MultiIndex name.","p":"api\/pandas.Index.name.html#pandas.Index.name"},{"t":"pandas.Index.names","d":"","p":"api\/pandas.Index.names.html#pandas.Index.names"},{"t":"pandas.Index.nbytes","d":"Return the number of bytes in the underlying data.","p":"api\/pandas.Index.nbytes.html#pandas.Index.nbytes"},{"t":"pandas.Index.ndim","d":"Number of dimensions of the underlying data, by definition 1.","p":"api\/pandas.Index.ndim.html#pandas.Index.ndim"},{"t":"pandas.Index.size","d":"Return the number of elements in the underlying data.","p":"api\/pandas.Index.size.html#pandas.Index.size"},{"t":"pandas.Index.empty","d":"","p":"api\/pandas.Index.empty.html#pandas.Index.empty"},{"t":"pandas.Index.T","d":"Return the transpose, which is by definition self.","p":"api\/pandas.Index.T.html#pandas.Index.T"},{"t":"pandas.Index.memory_usage","d":"Memory usage of the values.","p":"api\/pandas.Index.memory_usage.html#pandas.Index.memory_usage"},{"t":"pandas.Index.all","d":"Return whether all elements are Truthy.","p":"api\/pandas.Index.all.html#pandas.Index.all"},{"t":"pandas.Index.any","d":"Return whether any element is Truthy.","p":"api\/pandas.Index.any.html#pandas.Index.any"},{"t":"pandas.Index.argmin","d":"Return int position of the smallest value in the Series.","p":"api\/pandas.Index.argmin.html#pandas.Index.argmin"},{"t":"pandas.Index.argmax","d":"Return int position of the largest value in the Series.","p":"api\/pandas.Index.argmax.html#pandas.Index.argmax"},{"t":"pandas.Index.copy","d":"Make a copy of this object.","p":"api\/pandas.Index.copy.html#pandas.Index.copy"},{"t":"pandas.Index.delete","d":"Make new Index with passed location(-s) deleted.","p":"api\/pandas.Index.delete.html#pandas.Index.delete"},{"t":"pandas.Index.drop","d":"Make new Index with passed list of labels deleted.","p":"api\/pandas.Index.drop.html#pandas.Index.drop"},{"t":"pandas.Index.drop_duplicates","d":"Return Index with duplicate values removed.","p":"api\/pandas.Index.drop_duplicates.html#pandas.Index.drop_duplicates"},{"t":"pandas.Index.duplicated","d":"Indicate duplicate index values.","p":"api\/pandas.Index.duplicated.html#pandas.Index.duplicated"},{"t":"pandas.Index.equals","d":"Determine if two Index object are equal.","p":"api\/pandas.Index.equals.html#pandas.Index.equals"},{"t":"pandas.Index.factorize","d":"Encode the object as an enumerated type or categorical variable.","p":"api\/pandas.Index.factorize.html#pandas.Index.factorize"},{"t":"pandas.Index.identical","d":"Similar to equals, but checks that object attributes and types are also equal.","p":"api\/pandas.Index.identical.html#pandas.Index.identical"},{"t":"pandas.Index.insert","d":"Make new Index inserting new item at location.","p":"api\/pandas.Index.insert.html#pandas.Index.insert"},{"t":"pandas.Index.is_","d":"More flexible, faster check like is but that works through views.","p":"api\/pandas.Index.is_.html#pandas.Index.is_"},{"t":"pandas.Index.is_boolean","d":"Check if the Index only consists of booleans.","p":"api\/pandas.Index.is_boolean.html#pandas.Index.is_boolean"},{"t":"pandas.Index.is_categorical","d":"Check if the Index holds categorical data.","p":"api\/pandas.Index.is_categorical.html#pandas.Index.is_categorical"},{"t":"pandas.Index.is_floating","d":"Check if the Index is a floating type.","p":"api\/pandas.Index.is_floating.html#pandas.Index.is_floating"},{"t":"pandas.Index.is_integer","d":"Check if the Index only consists of integers.","p":"api\/pandas.Index.is_integer.html#pandas.Index.is_integer"},{"t":"pandas.Index.is_interval","d":"Check if the Index holds Interval objects.","p":"api\/pandas.Index.is_interval.html#pandas.Index.is_interval"},{"t":"pandas.Index.is_mixed","d":"Check if the Index holds data with mixed data types.","p":"api\/pandas.Index.is_mixed.html#pandas.Index.is_mixed"},{"t":"pandas.Index.is_numeric","d":"Check if the Index only consists of numeric data.","p":"api\/pandas.Index.is_numeric.html#pandas.Index.is_numeric"},{"t":"pandas.Index.is_object","d":"Check if the Index is of the object dtype.","p":"api\/pandas.Index.is_object.html#pandas.Index.is_object"},{"t":"pandas.Index.min","d":"Return the minimum value of the Index.","p":"api\/pandas.Index.min.html#pandas.Index.min"},{"t":"pandas.Index.max","d":"Return the maximum value of the Index.","p":"api\/pandas.Index.max.html#pandas.Index.max"},{"t":"pandas.Index.reindex","d":"Create index with target\u2019s values.","p":"api\/pandas.Index.reindex.html#pandas.Index.reindex"},{"t":"pandas.Index.rename","d":"Alter Index or MultiIndex name.","p":"api\/pandas.Index.rename.html#pandas.Index.rename"},{"t":"pandas.Index.repeat","d":"Repeat elements of a Index.","p":"api\/pandas.Index.repeat.html#pandas.Index.repeat"},{"t":"pandas.Index.where","d":"Replace values where the condition is False.","p":"api\/pandas.Index.where.html#pandas.Index.where"},{"t":"pandas.Index.take","d":"Return a new Index of the values selected by the indices.","p":"api\/pandas.Index.take.html#pandas.Index.take"},{"t":"pandas.Index.putmask","d":"Return a new Index of the values set with the mask.","p":"api\/pandas.Index.putmask.html#pandas.Index.putmask"},{"t":"pandas.Index.unique","d":"Return unique values in the index.","p":"api\/pandas.Index.unique.html#pandas.Index.unique"},{"t":"pandas.Index.nunique","d":"Return number of unique elements in the object.","p":"api\/pandas.Index.nunique.html#pandas.Index.nunique"},{"t":"pandas.Index.value_counts","d":"Return a Series containing counts of unique values.","p":"api\/pandas.Index.value_counts.html#pandas.Index.value_counts"},{"t":"pandas.Index.set_names","d":"Set Index or MultiIndex name.","p":"api\/pandas.Index.set_names.html#pandas.Index.set_names"},{"t":"pandas.Index.droplevel","d":"Return index with requested level(s) removed.","p":"api\/pandas.Index.droplevel.html#pandas.Index.droplevel"},{"t":"pandas.Index.fillna","d":"Fill NA\/NaN values with the specified value.","p":"api\/pandas.Index.fillna.html#pandas.Index.fillna"},{"t":"pandas.Index.dropna","d":"Return Index without NA\/NaN values.","p":"api\/pandas.Index.dropna.html#pandas.Index.dropna"},{"t":"pandas.Index.isna","d":"Detect missing values.","p":"api\/pandas.Index.isna.html#pandas.Index.isna"},{"t":"pandas.Index.notna","d":"Detect existing (non-missing) values.","p":"api\/pandas.Index.notna.html#pandas.Index.notna"},{"t":"pandas.Index.astype","d":"Create an Index with values cast to dtypes.","p":"api\/pandas.Index.astype.html#pandas.Index.astype"},{"t":"pandas.Index.item","d":"Return the first element of the underlying data as a Python scalar.","p":"api\/pandas.Index.item.html#pandas.Index.item"},{"t":"pandas.Index.map","d":"Map values using input correspondence (a dict, Series, or function).","p":"api\/pandas.Index.map.html#pandas.Index.map"},{"t":"pandas.Index.ravel","d":"Return an ndarray of the flattened values of the underlying data.","p":"api\/pandas.Index.ravel.html#pandas.Index.ravel"},{"t":"pandas.Index.to_list","d":"Return a list of the values.","p":"api\/pandas.Index.to_list.html#pandas.Index.to_list"},{"t":"pandas.Index.to_native_types","d":"(DEPRECATED) Format specified values of self and return them.","p":"api\/pandas.Index.to_native_types.html#pandas.Index.to_native_types"},{"t":"pandas.Index.to_series","d":"Create a Series with both index and values equal to the index keys.","p":"api\/pandas.Index.to_series.html#pandas.Index.to_series"},{"t":"pandas.Index.to_frame","d":"Create a DataFrame with a column containing the Index.","p":"api\/pandas.Index.to_frame.html#pandas.Index.to_frame"},{"t":"pandas.Index.view","d":"","p":"api\/pandas.Index.view.html#pandas.Index.view"},{"t":"pandas.Index.argsort","d":"Return the integer indices that would sort the index.","p":"api\/pandas.Index.argsort.html#pandas.Index.argsort"},{"t":"pandas.Index.searchsorted","d":"Find indices where elements should be inserted to maintain order.","p":"api\/pandas.Index.searchsorted.html#pandas.Index.searchsorted"},{"t":"pandas.Index.sort_values","d":"Return a sorted copy of the index.","p":"api\/pandas.Index.sort_values.html#pandas.Index.sort_values"},{"t":"pandas.Index.shift","d":"Shift index by desired number of time frequency increments.","p":"api\/pandas.Index.shift.html#pandas.Index.shift"},{"t":"pandas.Index.append","d":"Append a collection of Index options together.","p":"api\/pandas.Index.append.html#pandas.Index.append"},{"t":"pandas.Index.join","d":"Compute join_index and indexers to conform data structures to the new index.","p":"api\/pandas.Index.join.html#pandas.Index.join"},{"t":"pandas.Index.intersection","d":"Form the intersection of two Index objects.","p":"api\/pandas.Index.intersection.html#pandas.Index.intersection"},{"t":"pandas.Index.union","d":"Form the union of two Index objects.","p":"api\/pandas.Index.union.html#pandas.Index.union"},{"t":"pandas.Index.difference","d":"Return a new Index with elements of index not in other.","p":"api\/pandas.Index.difference.html#pandas.Index.difference"},{"t":"pandas.Index.symmetric_difference","d":"Compute the symmetric difference of two Index objects.","p":"api\/pandas.Index.symmetric_difference.html#pandas.Index.symmetric_difference"},{"t":"pandas.Index.asof","d":"Return the label from the index, or, if not present, the previous one.","p":"api\/pandas.Index.asof.html#pandas.Index.asof"},{"t":"pandas.Index.asof_locs","d":"Return the locations (indices) of labels in the index.","p":"api\/pandas.Index.asof_locs.html#pandas.Index.asof_locs"},{"t":"pandas.Index.get_indexer","d":"Compute indexer and mask for new index given the current index.","p":"api\/pandas.Index.get_indexer.html#pandas.Index.get_indexer"},{"t":"pandas.Index.get_indexer_for","d":"Guaranteed return of an indexer even when non-unique.","p":"api\/pandas.Index.get_indexer_for.html#pandas.Index.get_indexer_for"},{"t":"pandas.Index.get_indexer_non_unique","d":"Compute indexer and mask for new index given the current index.","p":"api\/pandas.Index.get_indexer_non_unique.html#pandas.Index.get_indexer_non_unique"},{"t":"pandas.Index.get_level_values","d":"Return an Index of values for requested level.","p":"api\/pandas.Index.get_level_values.html#pandas.Index.get_level_values"},{"t":"pandas.Index.get_loc","d":"Get integer location, slice or boolean mask for requested label.","p":"api\/pandas.Index.get_loc.html#pandas.Index.get_loc"},{"t":"pandas.Index.get_slice_bound","d":"Calculate slice bound that corresponds to given label.","p":"api\/pandas.Index.get_slice_bound.html#pandas.Index.get_slice_bound"},{"t":"pandas.Index.get_value","d":"Fast lookup of value from 1-dimensional ndarray.","p":"api\/pandas.Index.get_value.html#pandas.Index.get_value"},{"t":"pandas.Index.isin","d":"Return a boolean array where the index values are in values.","p":"api\/pandas.Index.isin.html#pandas.Index.isin"},{"t":"pandas.Index.slice_indexer","d":"Compute the slice indexer for input labels and step.","p":"api\/pandas.Index.slice_indexer.html#pandas.Index.slice_indexer"},{"t":"pandas.Index.slice_locs","d":"Compute slice locations for input labels.","p":"api\/pandas.Index.slice_locs.html#pandas.Index.slice_locs"},{"t":"pandas.RangeIndex","d":"Immutable Index implementing a monotonic integer range.","p":"api\/pandas.RangeIndex.html#pandas.RangeIndex"},{"t":"pandas.Int64Index","d":"Immutable sequence used for indexing and alignment.","p":"api\/pandas.Int64Index.html#pandas.Int64Index"},{"t":"pandas.UInt64Index","d":"Immutable sequence used for indexing and alignment.","p":"api\/pandas.UInt64Index.html#pandas.UInt64Index"},{"t":"pandas.Float64Index","d":"Immutable sequence used for indexing and alignment.","p":"api\/pandas.Float64Index.html#pandas.Float64Index"},{"t":"pandas.RangeIndex.start","d":"The value of the start parameter (0 if this was not supplied).","p":"api\/pandas.RangeIndex.start.html#pandas.RangeIndex.start"},{"t":"pandas.RangeIndex.stop","d":"The value of the stop parameter.","p":"api\/pandas.RangeIndex.stop.html#pandas.RangeIndex.stop"},{"t":"pandas.RangeIndex.step","d":"The value of the step parameter (1 if this was not supplied).","p":"api\/pandas.RangeIndex.step.html#pandas.RangeIndex.step"},{"t":"pandas.RangeIndex.from_range","d":"Create RangeIndex from a range object.","p":"api\/pandas.RangeIndex.from_range.html#pandas.RangeIndex.from_range"},{"t":"pandas.CategoricalIndex","d":"Index based on an underlying Categorical.","p":"api\/pandas.CategoricalIndex.html#pandas.CategoricalIndex"},{"t":"pandas.CategoricalIndex.codes","d":"The category codes of this categorical.","p":"api\/pandas.CategoricalIndex.codes.html#pandas.CategoricalIndex.codes"},{"t":"pandas.CategoricalIndex.categories","d":"The categories of this categorical.","p":"api\/pandas.CategoricalIndex.categories.html#pandas.CategoricalIndex.categories"},{"t":"pandas.CategoricalIndex.ordered","d":"Whether the categories have an ordered relationship.","p":"api\/pandas.CategoricalIndex.ordered.html#pandas.CategoricalIndex.ordered"},{"t":"pandas.CategoricalIndex.rename_categories","d":"Rename categories.","p":"api\/pandas.CategoricalIndex.rename_categories.html#pandas.CategoricalIndex.rename_categories"},{"t":"pandas.CategoricalIndex.reorder_categories","d":"Reorder categories as specified in new_categories.","p":"api\/pandas.CategoricalIndex.reorder_categories.html#pandas.CategoricalIndex.reorder_categories"},{"t":"pandas.CategoricalIndex.add_categories","d":"Add new categories.","p":"api\/pandas.CategoricalIndex.add_categories.html#pandas.CategoricalIndex.add_categories"},{"t":"pandas.CategoricalIndex.remove_categories","d":"Remove the specified categories.","p":"api\/pandas.CategoricalIndex.remove_categories.html#pandas.CategoricalIndex.remove_categories"},{"t":"pandas.CategoricalIndex.remove_unused_categories","d":"Remove categories which are not used.","p":"api\/pandas.CategoricalIndex.remove_unused_categories.html#pandas.CategoricalIndex.remove_unused_categories"},{"t":"pandas.CategoricalIndex.set_categories","d":"Set the categories to the specified new_categories.","p":"api\/pandas.CategoricalIndex.set_categories.html#pandas.CategoricalIndex.set_categories"},{"t":"pandas.CategoricalIndex.as_ordered","d":"Set the Categorical to be ordered.","p":"api\/pandas.CategoricalIndex.as_ordered.html#pandas.CategoricalIndex.as_ordered"},{"t":"pandas.CategoricalIndex.as_unordered","d":"Set the Categorical to be unordered.","p":"api\/pandas.CategoricalIndex.as_unordered.html#pandas.CategoricalIndex.as_unordered"},{"t":"pandas.CategoricalIndex.map","d":"Map values using input correspondence (a dict, Series, or function).","p":"api\/pandas.CategoricalIndex.map.html#pandas.CategoricalIndex.map"},{"t":"pandas.CategoricalIndex.equals","d":"Determine if two CategoricalIndex objects contain the same elements.","p":"api\/pandas.CategoricalIndex.equals.html#pandas.CategoricalIndex.equals"},{"t":"pandas.IntervalIndex","d":"Immutable index of intervals that are closed on the same side.","p":"api\/pandas.IntervalIndex.html#pandas.IntervalIndex"},{"t":"pandas.IntervalIndex.from_arrays","d":"Construct from two arrays defining the left and right bounds.","p":"api\/pandas.IntervalIndex.from_arrays.html#pandas.IntervalIndex.from_arrays"},{"t":"pandas.IntervalIndex.from_tuples","d":"Construct an IntervalIndex from an array-like of tuples.","p":"api\/pandas.IntervalIndex.from_tuples.html#pandas.IntervalIndex.from_tuples"},{"t":"pandas.IntervalIndex.from_breaks","d":"Construct an IntervalIndex from an array of splits.","p":"api\/pandas.IntervalIndex.from_breaks.html#pandas.IntervalIndex.from_breaks"},{"t":"pandas.IntervalIndex.left","d":"","p":"api\/pandas.IntervalIndex.left.html#pandas.IntervalIndex.left"},{"t":"pandas.IntervalIndex.right","d":"","p":"api\/pandas.IntervalIndex.right.html#pandas.IntervalIndex.right"},{"t":"pandas.IntervalIndex.mid","d":"","p":"api\/pandas.IntervalIndex.mid.html#pandas.IntervalIndex.mid"},{"t":"pandas.IntervalIndex.closed","d":"Whether the intervals are closed on the left-side, right-side, both or neither.","p":"api\/pandas.IntervalIndex.closed.html#pandas.IntervalIndex.closed"},{"t":"pandas.IntervalIndex.length","d":"Return the length of the Interval.","p":"api\/pandas.IntervalIndex.length.html#pandas.IntervalIndex.length"},{"t":"pandas.IntervalIndex.values","d":"Return the IntervalIndex\u2019s data as an IntervalArray.","p":"api\/pandas.IntervalIndex.values.html#pandas.IntervalIndex.values"},{"t":"pandas.IntervalIndex.is_empty","d":"Indicates if an interval is empty, meaning it contains no points.","p":"api\/pandas.IntervalIndex.is_empty.html#pandas.IntervalIndex.is_empty"},{"t":"pandas.IntervalIndex.is_non_overlapping_monotonic","d":"Return True if the IntervalArray is non-overlapping (no Intervals share points) and is either monotonic increasing or monotonic decreasing, else False.","p":"api\/pandas.IntervalIndex.is_non_overlapping_monotonic.html#pandas.IntervalIndex.is_non_overlapping_monotonic"},{"t":"pandas.IntervalIndex.is_overlapping","d":"Return True if the IntervalIndex has overlapping intervals, else False.","p":"api\/pandas.IntervalIndex.is_overlapping.html#pandas.IntervalIndex.is_overlapping"},{"t":"pandas.IntervalIndex.get_loc","d":"Get integer location, slice or boolean mask for requested label.","p":"api\/pandas.IntervalIndex.get_loc.html#pandas.IntervalIndex.get_loc"},{"t":"pandas.IntervalIndex.get_indexer","d":"Compute indexer and mask for new index given the current index.","p":"api\/pandas.IntervalIndex.get_indexer.html#pandas.IntervalIndex.get_indexer"},{"t":"pandas.IntervalIndex.set_closed","d":"Return an IntervalArray identical to the current one, but closed on the specified side.","p":"api\/pandas.IntervalIndex.set_closed.html#pandas.IntervalIndex.set_closed"},{"t":"pandas.IntervalIndex.contains","d":"Check elementwise if the Intervals contain the value.","p":"api\/pandas.IntervalIndex.contains.html#pandas.IntervalIndex.contains"},{"t":"pandas.IntervalIndex.overlaps","d":"Check elementwise if an Interval overlaps the values in the IntervalArray.","p":"api\/pandas.IntervalIndex.overlaps.html#pandas.IntervalIndex.overlaps"},{"t":"pandas.IntervalIndex.to_tuples","d":"Return an ndarray of tuples of the form (left, right).","p":"api\/pandas.IntervalIndex.to_tuples.html#pandas.IntervalIndex.to_tuples"},{"t":"pandas.MultiIndex","d":"A multi-level, or hierarchical, index object for pandas objects.","p":"api\/pandas.MultiIndex.html#pandas.MultiIndex"},{"t":"pandas.IndexSlice","d":"Create an object to more easily perform multi-index slicing.","p":"api\/pandas.IndexSlice.html#pandas.IndexSlice"},{"t":"pandas.MultiIndex.from_arrays","d":"Convert arrays to MultiIndex.","p":"api\/pandas.MultiIndex.from_arrays.html#pandas.MultiIndex.from_arrays"},{"t":"pandas.MultiIndex.from_tuples","d":"Convert list of tuples to MultiIndex.","p":"api\/pandas.MultiIndex.from_tuples.html#pandas.MultiIndex.from_tuples"},{"t":"pandas.MultiIndex.from_product","d":"Make a MultiIndex from the cartesian product of multiple iterables.","p":"api\/pandas.MultiIndex.from_product.html#pandas.MultiIndex.from_product"},{"t":"pandas.MultiIndex.from_frame","d":"Make a MultiIndex from a DataFrame.","p":"api\/pandas.MultiIndex.from_frame.html#pandas.MultiIndex.from_frame"},{"t":"pandas.MultiIndex.names","d":"Names of levels in MultiIndex.","p":"api\/pandas.MultiIndex.names.html#pandas.MultiIndex.names"},{"t":"pandas.MultiIndex.levels","d":"","p":"api\/pandas.MultiIndex.levels.html#pandas.MultiIndex.levels"},{"t":"pandas.MultiIndex.codes","d":"","p":"api\/pandas.MultiIndex.codes.html#pandas.MultiIndex.codes"},{"t":"pandas.MultiIndex.nlevels","d":"Integer number of levels in this MultiIndex.","p":"api\/pandas.MultiIndex.nlevels.html#pandas.MultiIndex.nlevels"},{"t":"pandas.MultiIndex.levshape","d":"A tuple with the length of each level.","p":"api\/pandas.MultiIndex.levshape.html#pandas.MultiIndex.levshape"},{"t":"pandas.MultiIndex.set_levels","d":"Set new levels on MultiIndex.","p":"api\/pandas.MultiIndex.set_levels.html#pandas.MultiIndex.set_levels"},{"t":"pandas.MultiIndex.set_codes","d":"Set new codes on MultiIndex.","p":"api\/pandas.MultiIndex.set_codes.html#pandas.MultiIndex.set_codes"},{"t":"pandas.MultiIndex.to_flat_index","d":"Convert a MultiIndex to an Index of Tuples containing the level values.","p":"api\/pandas.MultiIndex.to_flat_index.html#pandas.MultiIndex.to_flat_index"},{"t":"pandas.MultiIndex.to_frame","d":"Create a DataFrame with the levels of the MultiIndex as columns.","p":"api\/pandas.MultiIndex.to_frame.html#pandas.MultiIndex.to_frame"},{"t":"pandas.MultiIndex.is_lexsorted","d":"Return True if the codes are lexicographically sorted.","p":"api\/pandas.MultiIndex.is_lexsorted.html#pandas.MultiIndex.is_lexsorted"},{"t":"pandas.MultiIndex.sortlevel","d":"Sort MultiIndex at the requested level.","p":"api\/pandas.MultiIndex.sortlevel.html#pandas.MultiIndex.sortlevel"},{"t":"pandas.MultiIndex.droplevel","d":"Return index with requested level(s) removed.","p":"api\/pandas.MultiIndex.droplevel.html#pandas.MultiIndex.droplevel"},{"t":"pandas.MultiIndex.swaplevel","d":"Swap level i with level j.","p":"api\/pandas.MultiIndex.swaplevel.html#pandas.MultiIndex.swaplevel"},{"t":"pandas.MultiIndex.reorder_levels","d":"Rearrange levels using input order.","p":"api\/pandas.MultiIndex.reorder_levels.html#pandas.MultiIndex.reorder_levels"},{"t":"pandas.MultiIndex.remove_unused_levels","d":"Create new MultiIndex from current that removes unused levels.","p":"api\/pandas.MultiIndex.remove_unused_levels.html#pandas.MultiIndex.remove_unused_levels"},{"t":"pandas.MultiIndex.get_loc","d":"Get location for a label or a tuple of labels.","p":"api\/pandas.MultiIndex.get_loc.html#pandas.MultiIndex.get_loc"},{"t":"pandas.MultiIndex.get_locs","d":"Get location for a sequence of labels.","p":"api\/pandas.MultiIndex.get_locs.html#pandas.MultiIndex.get_locs"},{"t":"pandas.MultiIndex.get_loc_level","d":"Get location and sliced index for requested label(s)\/level(s).","p":"api\/pandas.MultiIndex.get_loc_level.html#pandas.MultiIndex.get_loc_level"},{"t":"pandas.MultiIndex.get_indexer","d":"Compute indexer and mask for new index given the current index.","p":"api\/pandas.MultiIndex.get_indexer.html#pandas.MultiIndex.get_indexer"},{"t":"pandas.MultiIndex.get_level_values","d":"Return vector of label values for requested level.","p":"api\/pandas.MultiIndex.get_level_values.html#pandas.MultiIndex.get_level_values"},{"t":"pandas.DatetimeIndex","d":"Immutable ndarray-like of datetime64 data.","p":"api\/pandas.DatetimeIndex.html#pandas.DatetimeIndex"},{"t":"pandas.DatetimeIndex.year","d":"The year of the datetime.","p":"api\/pandas.DatetimeIndex.year.html#pandas.DatetimeIndex.year"},{"t":"pandas.DatetimeIndex.month","d":"The month as January=1, December=12.","p":"api\/pandas.DatetimeIndex.month.html#pandas.DatetimeIndex.month"},{"t":"pandas.DatetimeIndex.day","d":"The day of the datetime.","p":"api\/pandas.DatetimeIndex.day.html#pandas.DatetimeIndex.day"},{"t":"pandas.DatetimeIndex.hour","d":"The hours of the datetime.","p":"api\/pandas.DatetimeIndex.hour.html#pandas.DatetimeIndex.hour"},{"t":"pandas.DatetimeIndex.minute","d":"The minutes of the datetime.","p":"api\/pandas.DatetimeIndex.minute.html#pandas.DatetimeIndex.minute"},{"t":"pandas.DatetimeIndex.second","d":"The seconds of the datetime.","p":"api\/pandas.DatetimeIndex.second.html#pandas.DatetimeIndex.second"},{"t":"pandas.DatetimeIndex.microsecond","d":"The microseconds of the datetime.","p":"api\/pandas.DatetimeIndex.microsecond.html#pandas.DatetimeIndex.microsecond"},{"t":"pandas.DatetimeIndex.nanosecond","d":"The nanoseconds of the datetime.","p":"api\/pandas.DatetimeIndex.nanosecond.html#pandas.DatetimeIndex.nanosecond"},{"t":"pandas.DatetimeIndex.date","d":"Returns numpy array of python datetime.date objects (namely, the date part of Timestamps without timezone information).","p":"api\/pandas.DatetimeIndex.date.html#pandas.DatetimeIndex.date"},{"t":"pandas.DatetimeIndex.time","d":"Returns numpy array of datetime.time.","p":"api\/pandas.DatetimeIndex.time.html#pandas.DatetimeIndex.time"},{"t":"pandas.DatetimeIndex.timetz","d":"Returns numpy array of datetime.time also containing timezone information.","p":"api\/pandas.DatetimeIndex.timetz.html#pandas.DatetimeIndex.timetz"},{"t":"pandas.DatetimeIndex.dayofyear","d":"The ordinal day of the year.","p":"api\/pandas.DatetimeIndex.dayofyear.html#pandas.DatetimeIndex.dayofyear"},{"t":"pandas.DatetimeIndex.day_of_year","d":"The ordinal day of the year.","p":"api\/pandas.DatetimeIndex.day_of_year.html#pandas.DatetimeIndex.day_of_year"},{"t":"pandas.DatetimeIndex.weekofyear","d":"(DEPRECATED) The week ordinal of the year.","p":"api\/pandas.DatetimeIndex.weekofyear.html#pandas.DatetimeIndex.weekofyear"},{"t":"pandas.DatetimeIndex.week","d":"(DEPRECATED) The week ordinal of the year.","p":"api\/pandas.DatetimeIndex.week.html#pandas.DatetimeIndex.week"},{"t":"pandas.DatetimeIndex.dayofweek","d":"The day of the week with Monday=0, Sunday=6.","p":"api\/pandas.DatetimeIndex.dayofweek.html#pandas.DatetimeIndex.dayofweek"},{"t":"pandas.DatetimeIndex.day_of_week","d":"The day of the week with Monday=0, Sunday=6.","p":"api\/pandas.DatetimeIndex.day_of_week.html#pandas.DatetimeIndex.day_of_week"},{"t":"pandas.DatetimeIndex.weekday","d":"The day of the week with Monday=0, Sunday=6.","p":"api\/pandas.DatetimeIndex.weekday.html#pandas.DatetimeIndex.weekday"},{"t":"pandas.DatetimeIndex.quarter","d":"The quarter of the date.","p":"api\/pandas.DatetimeIndex.quarter.html#pandas.DatetimeIndex.quarter"},{"t":"pandas.DatetimeIndex.tz","d":"Return timezone, if any.","p":"api\/pandas.DatetimeIndex.tz.html#pandas.DatetimeIndex.tz"},{"t":"pandas.DatetimeIndex.freq","d":"Return the frequency object if it is set, otherwise None.","p":"api\/pandas.DatetimeIndex.freq.html#pandas.DatetimeIndex.freq"},{"t":"pandas.DatetimeIndex.freqstr","d":"Return the frequency object as a string if its set, otherwise None.","p":"api\/pandas.DatetimeIndex.freqstr.html#pandas.DatetimeIndex.freqstr"},{"t":"pandas.DatetimeIndex.is_month_start","d":"Indicates whether the date is the first day of the month.","p":"api\/pandas.DatetimeIndex.is_month_start.html#pandas.DatetimeIndex.is_month_start"},{"t":"pandas.DatetimeIndex.is_month_end","d":"Indicates whether the date is the last day of the month.","p":"api\/pandas.DatetimeIndex.is_month_end.html#pandas.DatetimeIndex.is_month_end"},{"t":"pandas.DatetimeIndex.is_quarter_start","d":"Indicator for whether the date is the first day of a quarter.","p":"api\/pandas.DatetimeIndex.is_quarter_start.html#pandas.DatetimeIndex.is_quarter_start"},{"t":"pandas.DatetimeIndex.is_quarter_end","d":"Indicator for whether the date is the last day of a quarter.","p":"api\/pandas.DatetimeIndex.is_quarter_end.html#pandas.DatetimeIndex.is_quarter_end"},{"t":"pandas.DatetimeIndex.is_year_start","d":"Indicate whether the date is the first day of a year.","p":"api\/pandas.DatetimeIndex.is_year_start.html#pandas.DatetimeIndex.is_year_start"},{"t":"pandas.DatetimeIndex.is_year_end","d":"Indicate whether the date is the last day of the year.","p":"api\/pandas.DatetimeIndex.is_year_end.html#pandas.DatetimeIndex.is_year_end"},{"t":"pandas.DatetimeIndex.is_leap_year","d":"Boolean indicator if the date belongs to a leap year.","p":"api\/pandas.DatetimeIndex.is_leap_year.html#pandas.DatetimeIndex.is_leap_year"},{"t":"pandas.DatetimeIndex.inferred_freq","d":"Tries to return a string representing a frequency guess, generated by infer_freq.","p":"api\/pandas.DatetimeIndex.inferred_freq.html#pandas.DatetimeIndex.inferred_freq"},{"t":"pandas.DatetimeIndex.indexer_at_time","d":"Return index locations of values at particular time of day (e.g.","p":"api\/pandas.DatetimeIndex.indexer_at_time.html#pandas.DatetimeIndex.indexer_at_time"},{"t":"pandas.DatetimeIndex.indexer_between_time","d":"Return index locations of values between particular times of day (e.g., 9:00-9:30AM).","p":"api\/pandas.DatetimeIndex.indexer_between_time.html#pandas.DatetimeIndex.indexer_between_time"},{"t":"pandas.DatetimeIndex.normalize","d":"Convert times to midnight.","p":"api\/pandas.DatetimeIndex.normalize.html#pandas.DatetimeIndex.normalize"},{"t":"pandas.DatetimeIndex.strftime","d":"Convert to Index using specified date_format.","p":"api\/pandas.DatetimeIndex.strftime.html#pandas.DatetimeIndex.strftime"},{"t":"pandas.DatetimeIndex.snap","d":"Snap time stamps to nearest occurring frequency.","p":"api\/pandas.DatetimeIndex.snap.html#pandas.DatetimeIndex.snap"},{"t":"pandas.DatetimeIndex.tz_convert","d":"Convert tz-aware Datetime Array\/Index from one time zone to another.","p":"api\/pandas.DatetimeIndex.tz_convert.html#pandas.DatetimeIndex.tz_convert"},{"t":"pandas.DatetimeIndex.tz_localize","d":"Localize tz-naive Datetime Array\/Index to tz-aware Datetime Array\/Index.","p":"api\/pandas.DatetimeIndex.tz_localize.html#pandas.DatetimeIndex.tz_localize"},{"t":"pandas.DatetimeIndex.round","d":"Perform round operation on the data to the specified freq.","p":"api\/pandas.DatetimeIndex.round.html#pandas.DatetimeIndex.round"},{"t":"pandas.DatetimeIndex.floor","d":"Perform floor operation on the data to the specified freq.","p":"api\/pandas.DatetimeIndex.floor.html#pandas.DatetimeIndex.floor"},{"t":"pandas.DatetimeIndex.ceil","d":"Perform ceil operation on the data to the specified freq.","p":"api\/pandas.DatetimeIndex.ceil.html#pandas.DatetimeIndex.ceil"},{"t":"pandas.DatetimeIndex.month_name","d":"Return the month names of the DateTimeIndex with specified locale.","p":"api\/pandas.DatetimeIndex.month_name.html#pandas.DatetimeIndex.month_name"},{"t":"pandas.DatetimeIndex.day_name","d":"Return the day names of the DateTimeIndex with specified locale.","p":"api\/pandas.DatetimeIndex.day_name.html#pandas.DatetimeIndex.day_name"},{"t":"pandas.DatetimeIndex.to_period","d":"Cast to PeriodArray\/Index at a particular frequency.","p":"api\/pandas.DatetimeIndex.to_period.html#pandas.DatetimeIndex.to_period"},{"t":"pandas.DatetimeIndex.to_perioddelta","d":"Calculate TimedeltaArray of difference between index values and index converted to PeriodArray at specified freq.","p":"api\/pandas.DatetimeIndex.to_perioddelta.html#pandas.DatetimeIndex.to_perioddelta"},{"t":"pandas.DatetimeIndex.to_pydatetime","d":"Return Datetime Array\/Index as object ndarray of datetime.datetime objects.","p":"api\/pandas.DatetimeIndex.to_pydatetime.html#pandas.DatetimeIndex.to_pydatetime"},{"t":"pandas.DatetimeIndex.to_series","d":"Create a Series with both index and values equal to the index keys useful with map for returning an indexer based on an index.","p":"api\/pandas.DatetimeIndex.to_series.html#pandas.DatetimeIndex.to_series"},{"t":"pandas.DatetimeIndex.to_frame","d":"Create a DataFrame with a column containing the Index.","p":"api\/pandas.DatetimeIndex.to_frame.html#pandas.DatetimeIndex.to_frame"},{"t":"pandas.DatetimeIndex.mean","d":"Return the mean value of the Array.","p":"api\/pandas.DatetimeIndex.mean.html#pandas.DatetimeIndex.mean"},{"t":"pandas.TimedeltaIndex","d":"Immutable ndarray of timedelta64 data, represented internally as int64, and which can be boxed to timedelta objects.","p":"api\/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex"},{"t":"pandas.TimedeltaIndex.days","d":"Number of days for each element.","p":"api\/pandas.TimedeltaIndex.days.html#pandas.TimedeltaIndex.days"},{"t":"pandas.TimedeltaIndex.seconds","d":"Number of seconds (>= 0 and less than 1 day) for each element.","p":"api\/pandas.TimedeltaIndex.seconds.html#pandas.TimedeltaIndex.seconds"},{"t":"pandas.TimedeltaIndex.microseconds","d":"Number of microseconds (>= 0 and less than 1 second) for each element.","p":"api\/pandas.TimedeltaIndex.microseconds.html#pandas.TimedeltaIndex.microseconds"},{"t":"pandas.TimedeltaIndex.nanoseconds","d":"Number of nanoseconds (>= 0 and less than 1 microsecond) for each element.","p":"api\/pandas.TimedeltaIndex.nanoseconds.html#pandas.TimedeltaIndex.nanoseconds"},{"t":"pandas.TimedeltaIndex.components","d":"Return a dataframe of the components (days, hours, minutes, seconds, milliseconds, microseconds, nanoseconds) of the Timedeltas.","p":"api\/pandas.TimedeltaIndex.components.html#pandas.TimedeltaIndex.components"},{"t":"pandas.TimedeltaIndex.inferred_freq","d":"Tries to return a string representing a frequency guess, generated by infer_freq.","p":"api\/pandas.TimedeltaIndex.inferred_freq.html#pandas.TimedeltaIndex.inferred_freq"},{"t":"pandas.TimedeltaIndex.to_pytimedelta","d":"Return Timedelta Array\/Index as object ndarray of datetime.timedelta objects.","p":"api\/pandas.TimedeltaIndex.to_pytimedelta.html#pandas.TimedeltaIndex.to_pytimedelta"},{"t":"pandas.TimedeltaIndex.to_series","d":"Create a Series with both index and values equal to the index keys.","p":"api\/pandas.TimedeltaIndex.to_series.html#pandas.TimedeltaIndex.to_series"},{"t":"pandas.TimedeltaIndex.round","d":"Perform round operation on the data to the specified freq.","p":"api\/pandas.TimedeltaIndex.round.html#pandas.TimedeltaIndex.round"},{"t":"pandas.TimedeltaIndex.floor","d":"Perform floor operation on the data to the specified freq.","p":"api\/pandas.TimedeltaIndex.floor.html#pandas.TimedeltaIndex.floor"},{"t":"pandas.TimedeltaIndex.ceil","d":"Perform ceil operation on the data to the specified freq.","p":"api\/pandas.TimedeltaIndex.ceil.html#pandas.TimedeltaIndex.ceil"},{"t":"pandas.TimedeltaIndex.to_frame","d":"Create a DataFrame with a column containing the Index.","p":"api\/pandas.TimedeltaIndex.to_frame.html#pandas.TimedeltaIndex.to_frame"},{"t":"pandas.TimedeltaIndex.mean","d":"Return the mean value of the Array.","p":"api\/pandas.TimedeltaIndex.mean.html#pandas.TimedeltaIndex.mean"},{"t":"pandas.PeriodIndex","d":"Immutable ndarray holding ordinal values indicating regular periods in time.","p":"api\/pandas.PeriodIndex.html#pandas.PeriodIndex"},{"t":"pandas.PeriodIndex.day","d":"The days of the period.","p":"api\/pandas.PeriodIndex.day.html#pandas.PeriodIndex.day"},{"t":"pandas.PeriodIndex.dayofweek","d":"The day of the week with Monday=0, Sunday=6.","p":"api\/pandas.PeriodIndex.dayofweek.html#pandas.PeriodIndex.dayofweek"},{"t":"pandas.PeriodIndex.day_of_week","d":"The day of the week with Monday=0, Sunday=6.","p":"api\/pandas.PeriodIndex.day_of_week.html#pandas.PeriodIndex.day_of_week"},{"t":"pandas.PeriodIndex.dayofyear","d":"The ordinal day of the year.","p":"api\/pandas.PeriodIndex.dayofyear.html#pandas.PeriodIndex.dayofyear"},{"t":"pandas.PeriodIndex.day_of_year","d":"The ordinal day of the year.","p":"api\/pandas.PeriodIndex.day_of_year.html#pandas.PeriodIndex.day_of_year"},{"t":"pandas.PeriodIndex.days_in_month","d":"The number of days in the month.","p":"api\/pandas.PeriodIndex.days_in_month.html#pandas.PeriodIndex.days_in_month"},{"t":"pandas.PeriodIndex.daysinmonth","d":"The number of days in the month.","p":"api\/pandas.PeriodIndex.daysinmonth.html#pandas.PeriodIndex.daysinmonth"},{"t":"pandas.PeriodIndex.end_time","d":"","p":"api\/pandas.PeriodIndex.end_time.html#pandas.PeriodIndex.end_time"},{"t":"pandas.PeriodIndex.freq","d":"Return the frequency object if it is set, otherwise None.","p":"api\/pandas.PeriodIndex.freq.html#pandas.PeriodIndex.freq"},{"t":"pandas.PeriodIndex.freqstr","d":"Return the frequency object as a string if its set, otherwise None.","p":"api\/pandas.PeriodIndex.freqstr.html#pandas.PeriodIndex.freqstr"},{"t":"pandas.PeriodIndex.hour","d":"The hour of the period.","p":"api\/pandas.PeriodIndex.hour.html#pandas.PeriodIndex.hour"},{"t":"pandas.PeriodIndex.is_leap_year","d":"Logical indicating if the date belongs to a leap year.","p":"api\/pandas.PeriodIndex.is_leap_year.html#pandas.PeriodIndex.is_leap_year"},{"t":"pandas.PeriodIndex.minute","d":"The minute of the period.","p":"api\/pandas.PeriodIndex.minute.html#pandas.PeriodIndex.minute"},{"t":"pandas.PeriodIndex.month","d":"The month as January=1, December=12.","p":"api\/pandas.PeriodIndex.month.html#pandas.PeriodIndex.month"},{"t":"pandas.PeriodIndex.quarter","d":"The quarter of the date.","p":"api\/pandas.PeriodIndex.quarter.html#pandas.PeriodIndex.quarter"},{"t":"pandas.PeriodIndex.qyear","d":"","p":"api\/pandas.PeriodIndex.qyear.html#pandas.PeriodIndex.qyear"},{"t":"pandas.PeriodIndex.second","d":"The second of the period.","p":"api\/pandas.PeriodIndex.second.html#pandas.PeriodIndex.second"},{"t":"pandas.PeriodIndex.start_time","d":"","p":"api\/pandas.PeriodIndex.start_time.html#pandas.PeriodIndex.start_time"},{"t":"pandas.PeriodIndex.week","d":"The week ordinal of the year.","p":"api\/pandas.PeriodIndex.week.html#pandas.PeriodIndex.week"},{"t":"pandas.PeriodIndex.weekday","d":"The day of the week with Monday=0, Sunday=6.","p":"api\/pandas.PeriodIndex.weekday.html#pandas.PeriodIndex.weekday"},{"t":"pandas.PeriodIndex.weekofyear","d":"The week ordinal of the year.","p":"api\/pandas.PeriodIndex.weekofyear.html#pandas.PeriodIndex.weekofyear"},{"t":"pandas.PeriodIndex.year","d":"The year of the period.","p":"api\/pandas.PeriodIndex.year.html#pandas.PeriodIndex.year"},{"t":"pandas.PeriodIndex.asfreq","d":"Convert the Period Array\/Index to the specified frequency freq.","p":"api\/pandas.PeriodIndex.asfreq.html#pandas.PeriodIndex.asfreq"},{"t":"pandas.PeriodIndex.strftime","d":"Convert to Index using specified date_format.","p":"api\/pandas.PeriodIndex.strftime.html#pandas.PeriodIndex.strftime"},{"t":"pandas.PeriodIndex.to_timestamp","d":"Cast to DatetimeArray\/Index.","p":"api\/pandas.PeriodIndex.to_timestamp.html#pandas.PeriodIndex.to_timestamp"},{"t":"pandas.tseries.offsets.DateOffset","d":"Standard kind of date increment used for a date range.","p":"api\/pandas.tseries.offsets.DateOffset.html#pandas.tseries.offsets.DateOffset"},{"t":"pandas.tseries.offsets.DateOffset.freqstr","d":"","p":"api\/pandas.tseries.offsets.DateOffset.freqstr.html#pandas.tseries.offsets.DateOffset.freqstr"},{"t":"pandas.tseries.offsets.DateOffset.kwds","d":"","p":"api\/pandas.tseries.offsets.DateOffset.kwds.html#pandas.tseries.offsets.DateOffset.kwds"},{"t":"pandas.tseries.offsets.DateOffset.name","d":"","p":"api\/pandas.tseries.offsets.DateOffset.name.html#pandas.tseries.offsets.DateOffset.name"},{"t":"pandas.tseries.offsets.DateOffset.nanos","d":"","p":"api\/pandas.tseries.offsets.DateOffset.nanos.html#pandas.tseries.offsets.DateOffset.nanos"},{"t":"pandas.tseries.offsets.DateOffset.normalize","d":"","p":"api\/pandas.tseries.offsets.DateOffset.normalize.html#pandas.tseries.offsets.DateOffset.normalize"},{"t":"pandas.tseries.offsets.DateOffset.rule_code","d":"","p":"api\/pandas.tseries.offsets.DateOffset.rule_code.html#pandas.tseries.offsets.DateOffset.rule_code"},{"t":"pandas.tseries.offsets.DateOffset.n","d":"","p":"api\/pandas.tseries.offsets.DateOffset.n.html#pandas.tseries.offsets.DateOffset.n"},{"t":"pandas.tseries.offsets.DateOffset.apply","d":"","p":"api\/pandas.tseries.offsets.DateOffset.apply.html#pandas.tseries.offsets.DateOffset.apply"},{"t":"pandas.tseries.offsets.DateOffset.apply_index","d":"","p":"api\/pandas.tseries.offsets.DateOffset.apply_index.html#pandas.tseries.offsets.DateOffset.apply_index"},{"t":"pandas.tseries.offsets.DateOffset.copy","d":"","p":"api\/pandas.tseries.offsets.DateOffset.copy.html#pandas.tseries.offsets.DateOffset.copy"},{"t":"pandas.tseries.offsets.DateOffset.isAnchored","d":"","p":"api\/pandas.tseries.offsets.DateOffset.isAnchored.html#pandas.tseries.offsets.DateOffset.isAnchored"},{"t":"pandas.tseries.offsets.DateOffset.onOffset","d":"","p":"api\/pandas.tseries.offsets.DateOffset.onOffset.html#pandas.tseries.offsets.DateOffset.onOffset"},{"t":"pandas.tseries.offsets.DateOffset.is_anchored","d":"","p":"api\/pandas.tseries.offsets.DateOffset.is_anchored.html#pandas.tseries.offsets.DateOffset.is_anchored"},{"t":"pandas.tseries.offsets.DateOffset.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.DateOffset.is_on_offset.html#pandas.tseries.offsets.DateOffset.is_on_offset"},{"t":"pandas.tseries.offsets.DateOffset.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.DateOffset.__call__.html#pandas.tseries.offsets.DateOffset.__call__"},{"t":"pandas.tseries.offsets.BusinessDay","d":"DateOffset subclass representing possibly n business days.","p":"api\/pandas.tseries.offsets.BusinessDay.html#pandas.tseries.offsets.BusinessDay"},{"t":"pandas.tseries.offsets.BDay","d":"alias of pandas._libs.tslibs.offsets.BusinessDay","p":"api\/pandas.tseries.offsets.BDay.html#pandas.tseries.offsets.BDay"},{"t":"pandas.tseries.offsets.BusinessDay.freqstr","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.freqstr.html#pandas.tseries.offsets.BusinessDay.freqstr"},{"t":"pandas.tseries.offsets.BusinessDay.kwds","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.kwds.html#pandas.tseries.offsets.BusinessDay.kwds"},{"t":"pandas.tseries.offsets.BusinessDay.name","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.name.html#pandas.tseries.offsets.BusinessDay.name"},{"t":"pandas.tseries.offsets.BusinessDay.nanos","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.nanos.html#pandas.tseries.offsets.BusinessDay.nanos"},{"t":"pandas.tseries.offsets.BusinessDay.normalize","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.normalize.html#pandas.tseries.offsets.BusinessDay.normalize"},{"t":"pandas.tseries.offsets.BusinessDay.rule_code","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.rule_code.html#pandas.tseries.offsets.BusinessDay.rule_code"},{"t":"pandas.tseries.offsets.BusinessDay.n","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.n.html#pandas.tseries.offsets.BusinessDay.n"},{"t":"pandas.tseries.offsets.BusinessDay.weekmask","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.weekmask.html#pandas.tseries.offsets.BusinessDay.weekmask"},{"t":"pandas.tseries.offsets.BusinessDay.holidays","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.holidays.html#pandas.tseries.offsets.BusinessDay.holidays"},{"t":"pandas.tseries.offsets.BusinessDay.calendar","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.calendar.html#pandas.tseries.offsets.BusinessDay.calendar"},{"t":"pandas.tseries.offsets.BusinessDay.apply","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.apply.html#pandas.tseries.offsets.BusinessDay.apply"},{"t":"pandas.tseries.offsets.BusinessDay.apply_index","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.apply_index.html#pandas.tseries.offsets.BusinessDay.apply_index"},{"t":"pandas.tseries.offsets.BusinessDay.copy","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.copy.html#pandas.tseries.offsets.BusinessDay.copy"},{"t":"pandas.tseries.offsets.BusinessDay.isAnchored","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.isAnchored.html#pandas.tseries.offsets.BusinessDay.isAnchored"},{"t":"pandas.tseries.offsets.BusinessDay.onOffset","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.onOffset.html#pandas.tseries.offsets.BusinessDay.onOffset"},{"t":"pandas.tseries.offsets.BusinessDay.is_anchored","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.is_anchored.html#pandas.tseries.offsets.BusinessDay.is_anchored"},{"t":"pandas.tseries.offsets.BusinessDay.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.BusinessDay.is_on_offset.html#pandas.tseries.offsets.BusinessDay.is_on_offset"},{"t":"pandas.tseries.offsets.BusinessDay.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.BusinessDay.__call__.html#pandas.tseries.offsets.BusinessDay.__call__"},{"t":"pandas.tseries.offsets.BusinessHour","d":"DateOffset subclass representing possibly n business hours.","p":"api\/pandas.tseries.offsets.BusinessHour.html#pandas.tseries.offsets.BusinessHour"},{"t":"pandas.tseries.offsets.BusinessHour.freqstr","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.freqstr.html#pandas.tseries.offsets.BusinessHour.freqstr"},{"t":"pandas.tseries.offsets.BusinessHour.kwds","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.kwds.html#pandas.tseries.offsets.BusinessHour.kwds"},{"t":"pandas.tseries.offsets.BusinessHour.name","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.name.html#pandas.tseries.offsets.BusinessHour.name"},{"t":"pandas.tseries.offsets.BusinessHour.nanos","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.nanos.html#pandas.tseries.offsets.BusinessHour.nanos"},{"t":"pandas.tseries.offsets.BusinessHour.normalize","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.normalize.html#pandas.tseries.offsets.BusinessHour.normalize"},{"t":"pandas.tseries.offsets.BusinessHour.rule_code","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.rule_code.html#pandas.tseries.offsets.BusinessHour.rule_code"},{"t":"pandas.tseries.offsets.BusinessHour.n","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.n.html#pandas.tseries.offsets.BusinessHour.n"},{"t":"pandas.tseries.offsets.BusinessHour.start","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.start.html#pandas.tseries.offsets.BusinessHour.start"},{"t":"pandas.tseries.offsets.BusinessHour.end","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.end.html#pandas.tseries.offsets.BusinessHour.end"},{"t":"pandas.tseries.offsets.BusinessHour.weekmask","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.weekmask.html#pandas.tseries.offsets.BusinessHour.weekmask"},{"t":"pandas.tseries.offsets.BusinessHour.holidays","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.holidays.html#pandas.tseries.offsets.BusinessHour.holidays"},{"t":"pandas.tseries.offsets.BusinessHour.calendar","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.calendar.html#pandas.tseries.offsets.BusinessHour.calendar"},{"t":"pandas.tseries.offsets.BusinessHour.apply","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.apply.html#pandas.tseries.offsets.BusinessHour.apply"},{"t":"pandas.tseries.offsets.BusinessHour.apply_index","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.apply_index.html#pandas.tseries.offsets.BusinessHour.apply_index"},{"t":"pandas.tseries.offsets.BusinessHour.copy","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.copy.html#pandas.tseries.offsets.BusinessHour.copy"},{"t":"pandas.tseries.offsets.BusinessHour.isAnchored","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.isAnchored.html#pandas.tseries.offsets.BusinessHour.isAnchored"},{"t":"pandas.tseries.offsets.BusinessHour.onOffset","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.onOffset.html#pandas.tseries.offsets.BusinessHour.onOffset"},{"t":"pandas.tseries.offsets.BusinessHour.is_anchored","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.is_anchored.html#pandas.tseries.offsets.BusinessHour.is_anchored"},{"t":"pandas.tseries.offsets.BusinessHour.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.BusinessHour.is_on_offset.html#pandas.tseries.offsets.BusinessHour.is_on_offset"},{"t":"pandas.tseries.offsets.BusinessHour.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.BusinessHour.__call__.html#pandas.tseries.offsets.BusinessHour.__call__"},{"t":"pandas.tseries.offsets.CustomBusinessDay","d":"DateOffset subclass representing custom business days excluding holidays.","p":"api\/pandas.tseries.offsets.CustomBusinessDay.html#pandas.tseries.offsets.CustomBusinessDay"},{"t":"pandas.tseries.offsets.CDay","d":"alias of pandas._libs.tslibs.offsets.CustomBusinessDay","p":"api\/pandas.tseries.offsets.CDay.html#pandas.tseries.offsets.CDay"},{"t":"pandas.tseries.offsets.CustomBusinessDay.freqstr","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.freqstr.html#pandas.tseries.offsets.CustomBusinessDay.freqstr"},{"t":"pandas.tseries.offsets.CustomBusinessDay.kwds","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.kwds.html#pandas.tseries.offsets.CustomBusinessDay.kwds"},{"t":"pandas.tseries.offsets.CustomBusinessDay.name","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.name.html#pandas.tseries.offsets.CustomBusinessDay.name"},{"t":"pandas.tseries.offsets.CustomBusinessDay.nanos","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.nanos.html#pandas.tseries.offsets.CustomBusinessDay.nanos"},{"t":"pandas.tseries.offsets.CustomBusinessDay.normalize","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.normalize.html#pandas.tseries.offsets.CustomBusinessDay.normalize"},{"t":"pandas.tseries.offsets.CustomBusinessDay.rule_code","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.rule_code.html#pandas.tseries.offsets.CustomBusinessDay.rule_code"},{"t":"pandas.tseries.offsets.CustomBusinessDay.n","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.n.html#pandas.tseries.offsets.CustomBusinessDay.n"},{"t":"pandas.tseries.offsets.CustomBusinessDay.weekmask","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.weekmask.html#pandas.tseries.offsets.CustomBusinessDay.weekmask"},{"t":"pandas.tseries.offsets.CustomBusinessDay.calendar","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.calendar.html#pandas.tseries.offsets.CustomBusinessDay.calendar"},{"t":"pandas.tseries.offsets.CustomBusinessDay.holidays","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.holidays.html#pandas.tseries.offsets.CustomBusinessDay.holidays"},{"t":"pandas.tseries.offsets.CustomBusinessDay.apply_index","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.apply_index.html#pandas.tseries.offsets.CustomBusinessDay.apply_index"},{"t":"pandas.tseries.offsets.CustomBusinessDay.apply","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.apply.html#pandas.tseries.offsets.CustomBusinessDay.apply"},{"t":"pandas.tseries.offsets.CustomBusinessDay.copy","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.copy.html#pandas.tseries.offsets.CustomBusinessDay.copy"},{"t":"pandas.tseries.offsets.CustomBusinessDay.isAnchored","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.isAnchored.html#pandas.tseries.offsets.CustomBusinessDay.isAnchored"},{"t":"pandas.tseries.offsets.CustomBusinessDay.onOffset","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.onOffset.html#pandas.tseries.offsets.CustomBusinessDay.onOffset"},{"t":"pandas.tseries.offsets.CustomBusinessDay.is_anchored","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.is_anchored.html#pandas.tseries.offsets.CustomBusinessDay.is_anchored"},{"t":"pandas.tseries.offsets.CustomBusinessDay.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessDay.is_on_offset.html#pandas.tseries.offsets.CustomBusinessDay.is_on_offset"},{"t":"pandas.tseries.offsets.CustomBusinessDay.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.CustomBusinessDay.__call__.html#pandas.tseries.offsets.CustomBusinessDay.__call__"},{"t":"pandas.tseries.offsets.CustomBusinessHour","d":"DateOffset subclass representing possibly n custom business days.","p":"api\/pandas.tseries.offsets.CustomBusinessHour.html#pandas.tseries.offsets.CustomBusinessHour"},{"t":"pandas.tseries.offsets.CustomBusinessHour.freqstr","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.freqstr.html#pandas.tseries.offsets.CustomBusinessHour.freqstr"},{"t":"pandas.tseries.offsets.CustomBusinessHour.kwds","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.kwds.html#pandas.tseries.offsets.CustomBusinessHour.kwds"},{"t":"pandas.tseries.offsets.CustomBusinessHour.name","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.name.html#pandas.tseries.offsets.CustomBusinessHour.name"},{"t":"pandas.tseries.offsets.CustomBusinessHour.nanos","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.nanos.html#pandas.tseries.offsets.CustomBusinessHour.nanos"},{"t":"pandas.tseries.offsets.CustomBusinessHour.normalize","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.normalize.html#pandas.tseries.offsets.CustomBusinessHour.normalize"},{"t":"pandas.tseries.offsets.CustomBusinessHour.rule_code","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.rule_code.html#pandas.tseries.offsets.CustomBusinessHour.rule_code"},{"t":"pandas.tseries.offsets.CustomBusinessHour.n","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.n.html#pandas.tseries.offsets.CustomBusinessHour.n"},{"t":"pandas.tseries.offsets.CustomBusinessHour.weekmask","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.weekmask.html#pandas.tseries.offsets.CustomBusinessHour.weekmask"},{"t":"pandas.tseries.offsets.CustomBusinessHour.calendar","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.calendar.html#pandas.tseries.offsets.CustomBusinessHour.calendar"},{"t":"pandas.tseries.offsets.CustomBusinessHour.holidays","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.holidays.html#pandas.tseries.offsets.CustomBusinessHour.holidays"},{"t":"pandas.tseries.offsets.CustomBusinessHour.start","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.start.html#pandas.tseries.offsets.CustomBusinessHour.start"},{"t":"pandas.tseries.offsets.CustomBusinessHour.end","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.end.html#pandas.tseries.offsets.CustomBusinessHour.end"},{"t":"pandas.tseries.offsets.CustomBusinessHour.apply","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.apply.html#pandas.tseries.offsets.CustomBusinessHour.apply"},{"t":"pandas.tseries.offsets.CustomBusinessHour.apply_index","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.apply_index.html#pandas.tseries.offsets.CustomBusinessHour.apply_index"},{"t":"pandas.tseries.offsets.CustomBusinessHour.copy","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.copy.html#pandas.tseries.offsets.CustomBusinessHour.copy"},{"t":"pandas.tseries.offsets.CustomBusinessHour.isAnchored","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.isAnchored.html#pandas.tseries.offsets.CustomBusinessHour.isAnchored"},{"t":"pandas.tseries.offsets.CustomBusinessHour.onOffset","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.onOffset.html#pandas.tseries.offsets.CustomBusinessHour.onOffset"},{"t":"pandas.tseries.offsets.CustomBusinessHour.is_anchored","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.is_anchored.html#pandas.tseries.offsets.CustomBusinessHour.is_anchored"},{"t":"pandas.tseries.offsets.CustomBusinessHour.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessHour.is_on_offset.html#pandas.tseries.offsets.CustomBusinessHour.is_on_offset"},{"t":"pandas.tseries.offsets.CustomBusinessHour.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.CustomBusinessHour.__call__.html#pandas.tseries.offsets.CustomBusinessHour.__call__"},{"t":"pandas.tseries.offsets.MonthEnd","d":"DateOffset of one month end.","p":"api\/pandas.tseries.offsets.MonthEnd.html#pandas.tseries.offsets.MonthEnd"},{"t":"pandas.tseries.offsets.MonthEnd.freqstr","d":"","p":"api\/pandas.tseries.offsets.MonthEnd.freqstr.html#pandas.tseries.offsets.MonthEnd.freqstr"},{"t":"pandas.tseries.offsets.MonthEnd.kwds","d":"","p":"api\/pandas.tseries.offsets.MonthEnd.kwds.html#pandas.tseries.offsets.MonthEnd.kwds"},{"t":"pandas.tseries.offsets.MonthEnd.name","d":"","p":"api\/pandas.tseries.offsets.MonthEnd.name.html#pandas.tseries.offsets.MonthEnd.name"},{"t":"pandas.tseries.offsets.MonthEnd.nanos","d":"","p":"api\/pandas.tseries.offsets.MonthEnd.nanos.html#pandas.tseries.offsets.MonthEnd.nanos"},{"t":"pandas.tseries.offsets.MonthEnd.normalize","d":"","p":"api\/pandas.tseries.offsets.MonthEnd.normalize.html#pandas.tseries.offsets.MonthEnd.normalize"},{"t":"pandas.tseries.offsets.MonthEnd.rule_code","d":"","p":"api\/pandas.tseries.offsets.MonthEnd.rule_code.html#pandas.tseries.offsets.MonthEnd.rule_code"},{"t":"pandas.tseries.offsets.MonthEnd.n","d":"","p":"api\/pandas.tseries.offsets.MonthEnd.n.html#pandas.tseries.offsets.MonthEnd.n"},{"t":"pandas.tseries.offsets.MonthEnd.apply","d":"","p":"api\/pandas.tseries.offsets.MonthEnd.apply.html#pandas.tseries.offsets.MonthEnd.apply"},{"t":"pandas.tseries.offsets.MonthEnd.apply_index","d":"","p":"api\/pandas.tseries.offsets.MonthEnd.apply_index.html#pandas.tseries.offsets.MonthEnd.apply_index"},{"t":"pandas.tseries.offsets.MonthEnd.copy","d":"","p":"api\/pandas.tseries.offsets.MonthEnd.copy.html#pandas.tseries.offsets.MonthEnd.copy"},{"t":"pandas.tseries.offsets.MonthEnd.isAnchored","d":"","p":"api\/pandas.tseries.offsets.MonthEnd.isAnchored.html#pandas.tseries.offsets.MonthEnd.isAnchored"},{"t":"pandas.tseries.offsets.MonthEnd.onOffset","d":"","p":"api\/pandas.tseries.offsets.MonthEnd.onOffset.html#pandas.tseries.offsets.MonthEnd.onOffset"},{"t":"pandas.tseries.offsets.MonthEnd.is_anchored","d":"","p":"api\/pandas.tseries.offsets.MonthEnd.is_anchored.html#pandas.tseries.offsets.MonthEnd.is_anchored"},{"t":"pandas.tseries.offsets.MonthEnd.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.MonthEnd.is_on_offset.html#pandas.tseries.offsets.MonthEnd.is_on_offset"},{"t":"pandas.tseries.offsets.MonthEnd.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.MonthEnd.__call__.html#pandas.tseries.offsets.MonthEnd.__call__"},{"t":"pandas.tseries.offsets.MonthBegin","d":"DateOffset of one month at beginning.","p":"api\/pandas.tseries.offsets.MonthBegin.html#pandas.tseries.offsets.MonthBegin"},{"t":"pandas.tseries.offsets.MonthBegin.freqstr","d":"","p":"api\/pandas.tseries.offsets.MonthBegin.freqstr.html#pandas.tseries.offsets.MonthBegin.freqstr"},{"t":"pandas.tseries.offsets.MonthBegin.kwds","d":"","p":"api\/pandas.tseries.offsets.MonthBegin.kwds.html#pandas.tseries.offsets.MonthBegin.kwds"},{"t":"pandas.tseries.offsets.MonthBegin.name","d":"","p":"api\/pandas.tseries.offsets.MonthBegin.name.html#pandas.tseries.offsets.MonthBegin.name"},{"t":"pandas.tseries.offsets.MonthBegin.nanos","d":"","p":"api\/pandas.tseries.offsets.MonthBegin.nanos.html#pandas.tseries.offsets.MonthBegin.nanos"},{"t":"pandas.tseries.offsets.MonthBegin.normalize","d":"","p":"api\/pandas.tseries.offsets.MonthBegin.normalize.html#pandas.tseries.offsets.MonthBegin.normalize"},{"t":"pandas.tseries.offsets.MonthBegin.rule_code","d":"","p":"api\/pandas.tseries.offsets.MonthBegin.rule_code.html#pandas.tseries.offsets.MonthBegin.rule_code"},{"t":"pandas.tseries.offsets.MonthBegin.n","d":"","p":"api\/pandas.tseries.offsets.MonthBegin.n.html#pandas.tseries.offsets.MonthBegin.n"},{"t":"pandas.tseries.offsets.MonthBegin.apply","d":"","p":"api\/pandas.tseries.offsets.MonthBegin.apply.html#pandas.tseries.offsets.MonthBegin.apply"},{"t":"pandas.tseries.offsets.MonthBegin.apply_index","d":"","p":"api\/pandas.tseries.offsets.MonthBegin.apply_index.html#pandas.tseries.offsets.MonthBegin.apply_index"},{"t":"pandas.tseries.offsets.MonthBegin.copy","d":"","p":"api\/pandas.tseries.offsets.MonthBegin.copy.html#pandas.tseries.offsets.MonthBegin.copy"},{"t":"pandas.tseries.offsets.MonthBegin.isAnchored","d":"","p":"api\/pandas.tseries.offsets.MonthBegin.isAnchored.html#pandas.tseries.offsets.MonthBegin.isAnchored"},{"t":"pandas.tseries.offsets.MonthBegin.onOffset","d":"","p":"api\/pandas.tseries.offsets.MonthBegin.onOffset.html#pandas.tseries.offsets.MonthBegin.onOffset"},{"t":"pandas.tseries.offsets.MonthBegin.is_anchored","d":"","p":"api\/pandas.tseries.offsets.MonthBegin.is_anchored.html#pandas.tseries.offsets.MonthBegin.is_anchored"},{"t":"pandas.tseries.offsets.MonthBegin.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.MonthBegin.is_on_offset.html#pandas.tseries.offsets.MonthBegin.is_on_offset"},{"t":"pandas.tseries.offsets.MonthBegin.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.MonthBegin.__call__.html#pandas.tseries.offsets.MonthBegin.__call__"},{"t":"pandas.tseries.offsets.BusinessMonthEnd","d":"DateOffset increments between the last business day of the month","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.html#pandas.tseries.offsets.BusinessMonthEnd"},{"t":"pandas.tseries.offsets.BMonthEnd","d":"alias of pandas._libs.tslibs.offsets.BusinessMonthEnd","p":"api\/pandas.tseries.offsets.BMonthEnd.html#pandas.tseries.offsets.BMonthEnd"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.freqstr","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.freqstr.html#pandas.tseries.offsets.BusinessMonthEnd.freqstr"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.kwds","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.kwds.html#pandas.tseries.offsets.BusinessMonthEnd.kwds"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.name","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.name.html#pandas.tseries.offsets.BusinessMonthEnd.name"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.nanos","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.nanos.html#pandas.tseries.offsets.BusinessMonthEnd.nanos"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.normalize","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.normalize.html#pandas.tseries.offsets.BusinessMonthEnd.normalize"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.rule_code","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.rule_code.html#pandas.tseries.offsets.BusinessMonthEnd.rule_code"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.n","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.n.html#pandas.tseries.offsets.BusinessMonthEnd.n"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.apply","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.apply.html#pandas.tseries.offsets.BusinessMonthEnd.apply"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.apply_index","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.apply_index.html#pandas.tseries.offsets.BusinessMonthEnd.apply_index"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.copy","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.copy.html#pandas.tseries.offsets.BusinessMonthEnd.copy"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.isAnchored","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.isAnchored.html#pandas.tseries.offsets.BusinessMonthEnd.isAnchored"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.onOffset","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.onOffset.html#pandas.tseries.offsets.BusinessMonthEnd.onOffset"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.is_anchored","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.is_anchored.html#pandas.tseries.offsets.BusinessMonthEnd.is_anchored"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.is_on_offset.html#pandas.tseries.offsets.BusinessMonthEnd.is_on_offset"},{"t":"pandas.tseries.offsets.BusinessMonthEnd.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.BusinessMonthEnd.__call__.html#pandas.tseries.offsets.BusinessMonthEnd.__call__"},{"t":"pandas.tseries.offsets.BusinessMonthBegin","d":"DateOffset of one month at the first business day.","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.html#pandas.tseries.offsets.BusinessMonthBegin"},{"t":"pandas.tseries.offsets.BMonthBegin","d":"alias of pandas._libs.tslibs.offsets.BusinessMonthBegin","p":"api\/pandas.tseries.offsets.BMonthBegin.html#pandas.tseries.offsets.BMonthBegin"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.freqstr","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.freqstr.html#pandas.tseries.offsets.BusinessMonthBegin.freqstr"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.kwds","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.kwds.html#pandas.tseries.offsets.BusinessMonthBegin.kwds"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.name","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.name.html#pandas.tseries.offsets.BusinessMonthBegin.name"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.nanos","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.nanos.html#pandas.tseries.offsets.BusinessMonthBegin.nanos"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.normalize","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.normalize.html#pandas.tseries.offsets.BusinessMonthBegin.normalize"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.rule_code","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.rule_code.html#pandas.tseries.offsets.BusinessMonthBegin.rule_code"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.n","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.n.html#pandas.tseries.offsets.BusinessMonthBegin.n"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.apply","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.apply.html#pandas.tseries.offsets.BusinessMonthBegin.apply"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.apply_index","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.apply_index.html#pandas.tseries.offsets.BusinessMonthBegin.apply_index"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.copy","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.copy.html#pandas.tseries.offsets.BusinessMonthBegin.copy"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.isAnchored","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.isAnchored.html#pandas.tseries.offsets.BusinessMonthBegin.isAnchored"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.onOffset","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.onOffset.html#pandas.tseries.offsets.BusinessMonthBegin.onOffset"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.is_anchored","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.is_anchored.html#pandas.tseries.offsets.BusinessMonthBegin.is_anchored"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.is_on_offset.html#pandas.tseries.offsets.BusinessMonthBegin.is_on_offset"},{"t":"pandas.tseries.offsets.BusinessMonthBegin.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.BusinessMonthBegin.__call__.html#pandas.tseries.offsets.BusinessMonthBegin.__call__"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.html#pandas.tseries.offsets.CustomBusinessMonthEnd"},{"t":"pandas.tseries.offsets.CBMonthEnd","d":"alias of pandas._libs.tslibs.offsets.CustomBusinessMonthEnd","p":"api\/pandas.tseries.offsets.CBMonthEnd.html#pandas.tseries.offsets.CBMonthEnd"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.freqstr","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.freqstr.html#pandas.tseries.offsets.CustomBusinessMonthEnd.freqstr"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.kwds","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.kwds.html#pandas.tseries.offsets.CustomBusinessMonthEnd.kwds"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.m_offset","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.m_offset.html#pandas.tseries.offsets.CustomBusinessMonthEnd.m_offset"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.name","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.name.html#pandas.tseries.offsets.CustomBusinessMonthEnd.name"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.nanos","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.nanos.html#pandas.tseries.offsets.CustomBusinessMonthEnd.nanos"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.normalize","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.normalize.html#pandas.tseries.offsets.CustomBusinessMonthEnd.normalize"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.rule_code","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.rule_code.html#pandas.tseries.offsets.CustomBusinessMonthEnd.rule_code"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.n","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.n.html#pandas.tseries.offsets.CustomBusinessMonthEnd.n"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.weekmask","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.weekmask.html#pandas.tseries.offsets.CustomBusinessMonthEnd.weekmask"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.calendar","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.calendar.html#pandas.tseries.offsets.CustomBusinessMonthEnd.calendar"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.holidays","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.holidays.html#pandas.tseries.offsets.CustomBusinessMonthEnd.holidays"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.apply","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.apply.html#pandas.tseries.offsets.CustomBusinessMonthEnd.apply"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.apply_index","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.apply_index.html#pandas.tseries.offsets.CustomBusinessMonthEnd.apply_index"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.copy","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.copy.html#pandas.tseries.offsets.CustomBusinessMonthEnd.copy"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.isAnchored","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.isAnchored.html#pandas.tseries.offsets.CustomBusinessMonthEnd.isAnchored"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.onOffset","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.onOffset.html#pandas.tseries.offsets.CustomBusinessMonthEnd.onOffset"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.is_anchored","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.is_anchored.html#pandas.tseries.offsets.CustomBusinessMonthEnd.is_anchored"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.is_on_offset.html#pandas.tseries.offsets.CustomBusinessMonthEnd.is_on_offset"},{"t":"pandas.tseries.offsets.CustomBusinessMonthEnd.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.CustomBusinessMonthEnd.__call__.html#pandas.tseries.offsets.CustomBusinessMonthEnd.__call__"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.html#pandas.tseries.offsets.CustomBusinessMonthBegin"},{"t":"pandas.tseries.offsets.CBMonthBegin","d":"alias of pandas._libs.tslibs.offsets.CustomBusinessMonthBegin","p":"api\/pandas.tseries.offsets.CBMonthBegin.html#pandas.tseries.offsets.CBMonthBegin"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.freqstr","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.freqstr.html#pandas.tseries.offsets.CustomBusinessMonthBegin.freqstr"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.kwds","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.kwds.html#pandas.tseries.offsets.CustomBusinessMonthBegin.kwds"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.m_offset","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.m_offset.html#pandas.tseries.offsets.CustomBusinessMonthBegin.m_offset"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.name","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.name.html#pandas.tseries.offsets.CustomBusinessMonthBegin.name"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.nanos","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.nanos.html#pandas.tseries.offsets.CustomBusinessMonthBegin.nanos"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.normalize","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.normalize.html#pandas.tseries.offsets.CustomBusinessMonthBegin.normalize"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.rule_code","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.rule_code.html#pandas.tseries.offsets.CustomBusinessMonthBegin.rule_code"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.n","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.n.html#pandas.tseries.offsets.CustomBusinessMonthBegin.n"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.weekmask","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.weekmask.html#pandas.tseries.offsets.CustomBusinessMonthBegin.weekmask"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.calendar","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.calendar.html#pandas.tseries.offsets.CustomBusinessMonthBegin.calendar"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.holidays","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.holidays.html#pandas.tseries.offsets.CustomBusinessMonthBegin.holidays"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.apply","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.apply.html#pandas.tseries.offsets.CustomBusinessMonthBegin.apply"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.apply_index","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.apply_index.html#pandas.tseries.offsets.CustomBusinessMonthBegin.apply_index"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.copy","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.copy.html#pandas.tseries.offsets.CustomBusinessMonthBegin.copy"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.isAnchored","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.isAnchored.html#pandas.tseries.offsets.CustomBusinessMonthBegin.isAnchored"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.onOffset","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.onOffset.html#pandas.tseries.offsets.CustomBusinessMonthBegin.onOffset"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.is_anchored","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.is_anchored.html#pandas.tseries.offsets.CustomBusinessMonthBegin.is_anchored"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.is_on_offset.html#pandas.tseries.offsets.CustomBusinessMonthBegin.is_on_offset"},{"t":"pandas.tseries.offsets.CustomBusinessMonthBegin.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.CustomBusinessMonthBegin.__call__.html#pandas.tseries.offsets.CustomBusinessMonthBegin.__call__"},{"t":"pandas.tseries.offsets.SemiMonthEnd","d":"Two DateOffset\u2019s per month repeating on the last day of the month and day_of_month.","p":"api\/pandas.tseries.offsets.SemiMonthEnd.html#pandas.tseries.offsets.SemiMonthEnd"},{"t":"pandas.tseries.offsets.SemiMonthEnd.freqstr","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.freqstr.html#pandas.tseries.offsets.SemiMonthEnd.freqstr"},{"t":"pandas.tseries.offsets.SemiMonthEnd.kwds","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.kwds.html#pandas.tseries.offsets.SemiMonthEnd.kwds"},{"t":"pandas.tseries.offsets.SemiMonthEnd.name","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.name.html#pandas.tseries.offsets.SemiMonthEnd.name"},{"t":"pandas.tseries.offsets.SemiMonthEnd.nanos","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.nanos.html#pandas.tseries.offsets.SemiMonthEnd.nanos"},{"t":"pandas.tseries.offsets.SemiMonthEnd.normalize","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.normalize.html#pandas.tseries.offsets.SemiMonthEnd.normalize"},{"t":"pandas.tseries.offsets.SemiMonthEnd.rule_code","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.rule_code.html#pandas.tseries.offsets.SemiMonthEnd.rule_code"},{"t":"pandas.tseries.offsets.SemiMonthEnd.n","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.n.html#pandas.tseries.offsets.SemiMonthEnd.n"},{"t":"pandas.tseries.offsets.SemiMonthEnd.day_of_month","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.day_of_month.html#pandas.tseries.offsets.SemiMonthEnd.day_of_month"},{"t":"pandas.tseries.offsets.SemiMonthEnd.apply","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.apply.html#pandas.tseries.offsets.SemiMonthEnd.apply"},{"t":"pandas.tseries.offsets.SemiMonthEnd.apply_index","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.apply_index.html#pandas.tseries.offsets.SemiMonthEnd.apply_index"},{"t":"pandas.tseries.offsets.SemiMonthEnd.copy","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.copy.html#pandas.tseries.offsets.SemiMonthEnd.copy"},{"t":"pandas.tseries.offsets.SemiMonthEnd.isAnchored","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.isAnchored.html#pandas.tseries.offsets.SemiMonthEnd.isAnchored"},{"t":"pandas.tseries.offsets.SemiMonthEnd.onOffset","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.onOffset.html#pandas.tseries.offsets.SemiMonthEnd.onOffset"},{"t":"pandas.tseries.offsets.SemiMonthEnd.is_anchored","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.is_anchored.html#pandas.tseries.offsets.SemiMonthEnd.is_anchored"},{"t":"pandas.tseries.offsets.SemiMonthEnd.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.SemiMonthEnd.is_on_offset.html#pandas.tseries.offsets.SemiMonthEnd.is_on_offset"},{"t":"pandas.tseries.offsets.SemiMonthEnd.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.SemiMonthEnd.__call__.html#pandas.tseries.offsets.SemiMonthEnd.__call__"},{"t":"pandas.tseries.offsets.SemiMonthBegin","d":"Two DateOffset\u2019s per month repeating on the first day of the month and day_of_month.","p":"api\/pandas.tseries.offsets.SemiMonthBegin.html#pandas.tseries.offsets.SemiMonthBegin"},{"t":"pandas.tseries.offsets.SemiMonthBegin.freqstr","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.freqstr.html#pandas.tseries.offsets.SemiMonthBegin.freqstr"},{"t":"pandas.tseries.offsets.SemiMonthBegin.kwds","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.kwds.html#pandas.tseries.offsets.SemiMonthBegin.kwds"},{"t":"pandas.tseries.offsets.SemiMonthBegin.name","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.name.html#pandas.tseries.offsets.SemiMonthBegin.name"},{"t":"pandas.tseries.offsets.SemiMonthBegin.nanos","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.nanos.html#pandas.tseries.offsets.SemiMonthBegin.nanos"},{"t":"pandas.tseries.offsets.SemiMonthBegin.normalize","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.normalize.html#pandas.tseries.offsets.SemiMonthBegin.normalize"},{"t":"pandas.tseries.offsets.SemiMonthBegin.rule_code","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.rule_code.html#pandas.tseries.offsets.SemiMonthBegin.rule_code"},{"t":"pandas.tseries.offsets.SemiMonthBegin.n","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.n.html#pandas.tseries.offsets.SemiMonthBegin.n"},{"t":"pandas.tseries.offsets.SemiMonthBegin.day_of_month","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.day_of_month.html#pandas.tseries.offsets.SemiMonthBegin.day_of_month"},{"t":"pandas.tseries.offsets.SemiMonthBegin.apply","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.apply.html#pandas.tseries.offsets.SemiMonthBegin.apply"},{"t":"pandas.tseries.offsets.SemiMonthBegin.apply_index","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.apply_index.html#pandas.tseries.offsets.SemiMonthBegin.apply_index"},{"t":"pandas.tseries.offsets.SemiMonthBegin.copy","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.copy.html#pandas.tseries.offsets.SemiMonthBegin.copy"},{"t":"pandas.tseries.offsets.SemiMonthBegin.isAnchored","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.isAnchored.html#pandas.tseries.offsets.SemiMonthBegin.isAnchored"},{"t":"pandas.tseries.offsets.SemiMonthBegin.onOffset","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.onOffset.html#pandas.tseries.offsets.SemiMonthBegin.onOffset"},{"t":"pandas.tseries.offsets.SemiMonthBegin.is_anchored","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.is_anchored.html#pandas.tseries.offsets.SemiMonthBegin.is_anchored"},{"t":"pandas.tseries.offsets.SemiMonthBegin.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.SemiMonthBegin.is_on_offset.html#pandas.tseries.offsets.SemiMonthBegin.is_on_offset"},{"t":"pandas.tseries.offsets.SemiMonthBegin.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.SemiMonthBegin.__call__.html#pandas.tseries.offsets.SemiMonthBegin.__call__"},{"t":"pandas.tseries.offsets.Week","d":"Weekly offset.","p":"api\/pandas.tseries.offsets.Week.html#pandas.tseries.offsets.Week"},{"t":"pandas.tseries.offsets.Week.freqstr","d":"","p":"api\/pandas.tseries.offsets.Week.freqstr.html#pandas.tseries.offsets.Week.freqstr"},{"t":"pandas.tseries.offsets.Week.kwds","d":"","p":"api\/pandas.tseries.offsets.Week.kwds.html#pandas.tseries.offsets.Week.kwds"},{"t":"pandas.tseries.offsets.Week.name","d":"","p":"api\/pandas.tseries.offsets.Week.name.html#pandas.tseries.offsets.Week.name"},{"t":"pandas.tseries.offsets.Week.nanos","d":"","p":"api\/pandas.tseries.offsets.Week.nanos.html#pandas.tseries.offsets.Week.nanos"},{"t":"pandas.tseries.offsets.Week.normalize","d":"","p":"api\/pandas.tseries.offsets.Week.normalize.html#pandas.tseries.offsets.Week.normalize"},{"t":"pandas.tseries.offsets.Week.rule_code","d":"","p":"api\/pandas.tseries.offsets.Week.rule_code.html#pandas.tseries.offsets.Week.rule_code"},{"t":"pandas.tseries.offsets.Week.n","d":"","p":"api\/pandas.tseries.offsets.Week.n.html#pandas.tseries.offsets.Week.n"},{"t":"pandas.tseries.offsets.Week.weekday","d":"","p":"api\/pandas.tseries.offsets.Week.weekday.html#pandas.tseries.offsets.Week.weekday"},{"t":"pandas.tseries.offsets.Week.apply","d":"","p":"api\/pandas.tseries.offsets.Week.apply.html#pandas.tseries.offsets.Week.apply"},{"t":"pandas.tseries.offsets.Week.apply_index","d":"","p":"api\/pandas.tseries.offsets.Week.apply_index.html#pandas.tseries.offsets.Week.apply_index"},{"t":"pandas.tseries.offsets.Week.copy","d":"","p":"api\/pandas.tseries.offsets.Week.copy.html#pandas.tseries.offsets.Week.copy"},{"t":"pandas.tseries.offsets.Week.isAnchored","d":"","p":"api\/pandas.tseries.offsets.Week.isAnchored.html#pandas.tseries.offsets.Week.isAnchored"},{"t":"pandas.tseries.offsets.Week.onOffset","d":"","p":"api\/pandas.tseries.offsets.Week.onOffset.html#pandas.tseries.offsets.Week.onOffset"},{"t":"pandas.tseries.offsets.Week.is_anchored","d":"","p":"api\/pandas.tseries.offsets.Week.is_anchored.html#pandas.tseries.offsets.Week.is_anchored"},{"t":"pandas.tseries.offsets.Week.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.Week.is_on_offset.html#pandas.tseries.offsets.Week.is_on_offset"},{"t":"pandas.tseries.offsets.Week.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.Week.__call__.html#pandas.tseries.offsets.Week.__call__"},{"t":"pandas.tseries.offsets.WeekOfMonth","d":"Describes monthly dates like \u201cthe Tuesday of the 2nd week of each month\u201d.","p":"api\/pandas.tseries.offsets.WeekOfMonth.html#pandas.tseries.offsets.WeekOfMonth"},{"t":"pandas.tseries.offsets.WeekOfMonth.freqstr","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.freqstr.html#pandas.tseries.offsets.WeekOfMonth.freqstr"},{"t":"pandas.tseries.offsets.WeekOfMonth.kwds","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.kwds.html#pandas.tseries.offsets.WeekOfMonth.kwds"},{"t":"pandas.tseries.offsets.WeekOfMonth.name","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.name.html#pandas.tseries.offsets.WeekOfMonth.name"},{"t":"pandas.tseries.offsets.WeekOfMonth.nanos","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.nanos.html#pandas.tseries.offsets.WeekOfMonth.nanos"},{"t":"pandas.tseries.offsets.WeekOfMonth.normalize","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.normalize.html#pandas.tseries.offsets.WeekOfMonth.normalize"},{"t":"pandas.tseries.offsets.WeekOfMonth.rule_code","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.rule_code.html#pandas.tseries.offsets.WeekOfMonth.rule_code"},{"t":"pandas.tseries.offsets.WeekOfMonth.n","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.n.html#pandas.tseries.offsets.WeekOfMonth.n"},{"t":"pandas.tseries.offsets.WeekOfMonth.week","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.week.html#pandas.tseries.offsets.WeekOfMonth.week"},{"t":"pandas.tseries.offsets.WeekOfMonth.apply","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.apply.html#pandas.tseries.offsets.WeekOfMonth.apply"},{"t":"pandas.tseries.offsets.WeekOfMonth.apply_index","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.apply_index.html#pandas.tseries.offsets.WeekOfMonth.apply_index"},{"t":"pandas.tseries.offsets.WeekOfMonth.copy","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.copy.html#pandas.tseries.offsets.WeekOfMonth.copy"},{"t":"pandas.tseries.offsets.WeekOfMonth.isAnchored","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.isAnchored.html#pandas.tseries.offsets.WeekOfMonth.isAnchored"},{"t":"pandas.tseries.offsets.WeekOfMonth.onOffset","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.onOffset.html#pandas.tseries.offsets.WeekOfMonth.onOffset"},{"t":"pandas.tseries.offsets.WeekOfMonth.is_anchored","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.is_anchored.html#pandas.tseries.offsets.WeekOfMonth.is_anchored"},{"t":"pandas.tseries.offsets.WeekOfMonth.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.is_on_offset.html#pandas.tseries.offsets.WeekOfMonth.is_on_offset"},{"t":"pandas.tseries.offsets.WeekOfMonth.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.WeekOfMonth.__call__.html#pandas.tseries.offsets.WeekOfMonth.__call__"},{"t":"pandas.tseries.offsets.WeekOfMonth.weekday","d":"","p":"api\/pandas.tseries.offsets.WeekOfMonth.weekday.html#pandas.tseries.offsets.WeekOfMonth.weekday"},{"t":"pandas.tseries.offsets.LastWeekOfMonth","d":"Describes monthly dates in last week of month like \u201cthe last Tuesday of each month\u201d.","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.html#pandas.tseries.offsets.LastWeekOfMonth"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.freqstr","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.freqstr.html#pandas.tseries.offsets.LastWeekOfMonth.freqstr"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.kwds","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.kwds.html#pandas.tseries.offsets.LastWeekOfMonth.kwds"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.name","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.name.html#pandas.tseries.offsets.LastWeekOfMonth.name"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.nanos","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.nanos.html#pandas.tseries.offsets.LastWeekOfMonth.nanos"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.normalize","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.normalize.html#pandas.tseries.offsets.LastWeekOfMonth.normalize"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.rule_code","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.rule_code.html#pandas.tseries.offsets.LastWeekOfMonth.rule_code"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.n","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.n.html#pandas.tseries.offsets.LastWeekOfMonth.n"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.weekday","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.weekday.html#pandas.tseries.offsets.LastWeekOfMonth.weekday"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.week","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.week.html#pandas.tseries.offsets.LastWeekOfMonth.week"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.apply","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.apply.html#pandas.tseries.offsets.LastWeekOfMonth.apply"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.apply_index","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.apply_index.html#pandas.tseries.offsets.LastWeekOfMonth.apply_index"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.copy","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.copy.html#pandas.tseries.offsets.LastWeekOfMonth.copy"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.isAnchored","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.isAnchored.html#pandas.tseries.offsets.LastWeekOfMonth.isAnchored"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.onOffset","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.onOffset.html#pandas.tseries.offsets.LastWeekOfMonth.onOffset"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.is_anchored","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.is_anchored.html#pandas.tseries.offsets.LastWeekOfMonth.is_anchored"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.is_on_offset.html#pandas.tseries.offsets.LastWeekOfMonth.is_on_offset"},{"t":"pandas.tseries.offsets.LastWeekOfMonth.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.LastWeekOfMonth.__call__.html#pandas.tseries.offsets.LastWeekOfMonth.__call__"},{"t":"pandas.tseries.offsets.BQuarterEnd","d":"DateOffset increments between the last business day of each Quarter.","p":"api\/pandas.tseries.offsets.BQuarterEnd.html#pandas.tseries.offsets.BQuarterEnd"},{"t":"pandas.tseries.offsets.BQuarterEnd.freqstr","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.freqstr.html#pandas.tseries.offsets.BQuarterEnd.freqstr"},{"t":"pandas.tseries.offsets.BQuarterEnd.kwds","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.kwds.html#pandas.tseries.offsets.BQuarterEnd.kwds"},{"t":"pandas.tseries.offsets.BQuarterEnd.name","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.name.html#pandas.tseries.offsets.BQuarterEnd.name"},{"t":"pandas.tseries.offsets.BQuarterEnd.nanos","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.nanos.html#pandas.tseries.offsets.BQuarterEnd.nanos"},{"t":"pandas.tseries.offsets.BQuarterEnd.normalize","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.normalize.html#pandas.tseries.offsets.BQuarterEnd.normalize"},{"t":"pandas.tseries.offsets.BQuarterEnd.rule_code","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.rule_code.html#pandas.tseries.offsets.BQuarterEnd.rule_code"},{"t":"pandas.tseries.offsets.BQuarterEnd.n","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.n.html#pandas.tseries.offsets.BQuarterEnd.n"},{"t":"pandas.tseries.offsets.BQuarterEnd.startingMonth","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.startingMonth.html#pandas.tseries.offsets.BQuarterEnd.startingMonth"},{"t":"pandas.tseries.offsets.BQuarterEnd.apply","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.apply.html#pandas.tseries.offsets.BQuarterEnd.apply"},{"t":"pandas.tseries.offsets.BQuarterEnd.apply_index","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.apply_index.html#pandas.tseries.offsets.BQuarterEnd.apply_index"},{"t":"pandas.tseries.offsets.BQuarterEnd.copy","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.copy.html#pandas.tseries.offsets.BQuarterEnd.copy"},{"t":"pandas.tseries.offsets.BQuarterEnd.isAnchored","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.isAnchored.html#pandas.tseries.offsets.BQuarterEnd.isAnchored"},{"t":"pandas.tseries.offsets.BQuarterEnd.onOffset","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.onOffset.html#pandas.tseries.offsets.BQuarterEnd.onOffset"},{"t":"pandas.tseries.offsets.BQuarterEnd.is_anchored","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.is_anchored.html#pandas.tseries.offsets.BQuarterEnd.is_anchored"},{"t":"pandas.tseries.offsets.BQuarterEnd.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.BQuarterEnd.is_on_offset.html#pandas.tseries.offsets.BQuarterEnd.is_on_offset"},{"t":"pandas.tseries.offsets.BQuarterEnd.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.BQuarterEnd.__call__.html#pandas.tseries.offsets.BQuarterEnd.__call__"},{"t":"pandas.tseries.offsets.BQuarterBegin","d":"DateOffset increments between the first business day of each Quarter.","p":"api\/pandas.tseries.offsets.BQuarterBegin.html#pandas.tseries.offsets.BQuarterBegin"},{"t":"pandas.tseries.offsets.BQuarterBegin.freqstr","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.freqstr.html#pandas.tseries.offsets.BQuarterBegin.freqstr"},{"t":"pandas.tseries.offsets.BQuarterBegin.kwds","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.kwds.html#pandas.tseries.offsets.BQuarterBegin.kwds"},{"t":"pandas.tseries.offsets.BQuarterBegin.name","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.name.html#pandas.tseries.offsets.BQuarterBegin.name"},{"t":"pandas.tseries.offsets.BQuarterBegin.nanos","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.nanos.html#pandas.tseries.offsets.BQuarterBegin.nanos"},{"t":"pandas.tseries.offsets.BQuarterBegin.normalize","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.normalize.html#pandas.tseries.offsets.BQuarterBegin.normalize"},{"t":"pandas.tseries.offsets.BQuarterBegin.rule_code","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.rule_code.html#pandas.tseries.offsets.BQuarterBegin.rule_code"},{"t":"pandas.tseries.offsets.BQuarterBegin.n","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.n.html#pandas.tseries.offsets.BQuarterBegin.n"},{"t":"pandas.tseries.offsets.BQuarterBegin.startingMonth","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.startingMonth.html#pandas.tseries.offsets.BQuarterBegin.startingMonth"},{"t":"pandas.tseries.offsets.BQuarterBegin.apply","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.apply.html#pandas.tseries.offsets.BQuarterBegin.apply"},{"t":"pandas.tseries.offsets.BQuarterBegin.apply_index","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.apply_index.html#pandas.tseries.offsets.BQuarterBegin.apply_index"},{"t":"pandas.tseries.offsets.BQuarterBegin.copy","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.copy.html#pandas.tseries.offsets.BQuarterBegin.copy"},{"t":"pandas.tseries.offsets.BQuarterBegin.isAnchored","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.isAnchored.html#pandas.tseries.offsets.BQuarterBegin.isAnchored"},{"t":"pandas.tseries.offsets.BQuarterBegin.onOffset","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.onOffset.html#pandas.tseries.offsets.BQuarterBegin.onOffset"},{"t":"pandas.tseries.offsets.BQuarterBegin.is_anchored","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.is_anchored.html#pandas.tseries.offsets.BQuarterBegin.is_anchored"},{"t":"pandas.tseries.offsets.BQuarterBegin.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.BQuarterBegin.is_on_offset.html#pandas.tseries.offsets.BQuarterBegin.is_on_offset"},{"t":"pandas.tseries.offsets.BQuarterBegin.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.BQuarterBegin.__call__.html#pandas.tseries.offsets.BQuarterBegin.__call__"},{"t":"pandas.tseries.offsets.QuarterEnd","d":"DateOffset increments between Quarter end dates.","p":"api\/pandas.tseries.offsets.QuarterEnd.html#pandas.tseries.offsets.QuarterEnd"},{"t":"pandas.tseries.offsets.QuarterEnd.freqstr","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.freqstr.html#pandas.tseries.offsets.QuarterEnd.freqstr"},{"t":"pandas.tseries.offsets.QuarterEnd.kwds","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.kwds.html#pandas.tseries.offsets.QuarterEnd.kwds"},{"t":"pandas.tseries.offsets.QuarterEnd.name","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.name.html#pandas.tseries.offsets.QuarterEnd.name"},{"t":"pandas.tseries.offsets.QuarterEnd.nanos","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.nanos.html#pandas.tseries.offsets.QuarterEnd.nanos"},{"t":"pandas.tseries.offsets.QuarterEnd.normalize","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.normalize.html#pandas.tseries.offsets.QuarterEnd.normalize"},{"t":"pandas.tseries.offsets.QuarterEnd.rule_code","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.rule_code.html#pandas.tseries.offsets.QuarterEnd.rule_code"},{"t":"pandas.tseries.offsets.QuarterEnd.n","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.n.html#pandas.tseries.offsets.QuarterEnd.n"},{"t":"pandas.tseries.offsets.QuarterEnd.startingMonth","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.startingMonth.html#pandas.tseries.offsets.QuarterEnd.startingMonth"},{"t":"pandas.tseries.offsets.QuarterEnd.apply","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.apply.html#pandas.tseries.offsets.QuarterEnd.apply"},{"t":"pandas.tseries.offsets.QuarterEnd.apply_index","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.apply_index.html#pandas.tseries.offsets.QuarterEnd.apply_index"},{"t":"pandas.tseries.offsets.QuarterEnd.copy","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.copy.html#pandas.tseries.offsets.QuarterEnd.copy"},{"t":"pandas.tseries.offsets.QuarterEnd.isAnchored","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.isAnchored.html#pandas.tseries.offsets.QuarterEnd.isAnchored"},{"t":"pandas.tseries.offsets.QuarterEnd.onOffset","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.onOffset.html#pandas.tseries.offsets.QuarterEnd.onOffset"},{"t":"pandas.tseries.offsets.QuarterEnd.is_anchored","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.is_anchored.html#pandas.tseries.offsets.QuarterEnd.is_anchored"},{"t":"pandas.tseries.offsets.QuarterEnd.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.QuarterEnd.is_on_offset.html#pandas.tseries.offsets.QuarterEnd.is_on_offset"},{"t":"pandas.tseries.offsets.QuarterEnd.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.QuarterEnd.__call__.html#pandas.tseries.offsets.QuarterEnd.__call__"},{"t":"pandas.tseries.offsets.QuarterBegin","d":"DateOffset increments between Quarter start dates.","p":"api\/pandas.tseries.offsets.QuarterBegin.html#pandas.tseries.offsets.QuarterBegin"},{"t":"pandas.tseries.offsets.QuarterBegin.freqstr","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.freqstr.html#pandas.tseries.offsets.QuarterBegin.freqstr"},{"t":"pandas.tseries.offsets.QuarterBegin.kwds","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.kwds.html#pandas.tseries.offsets.QuarterBegin.kwds"},{"t":"pandas.tseries.offsets.QuarterBegin.name","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.name.html#pandas.tseries.offsets.QuarterBegin.name"},{"t":"pandas.tseries.offsets.QuarterBegin.nanos","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.nanos.html#pandas.tseries.offsets.QuarterBegin.nanos"},{"t":"pandas.tseries.offsets.QuarterBegin.normalize","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.normalize.html#pandas.tseries.offsets.QuarterBegin.normalize"},{"t":"pandas.tseries.offsets.QuarterBegin.rule_code","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.rule_code.html#pandas.tseries.offsets.QuarterBegin.rule_code"},{"t":"pandas.tseries.offsets.QuarterBegin.n","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.n.html#pandas.tseries.offsets.QuarterBegin.n"},{"t":"pandas.tseries.offsets.QuarterBegin.startingMonth","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.startingMonth.html#pandas.tseries.offsets.QuarterBegin.startingMonth"},{"t":"pandas.tseries.offsets.QuarterBegin.apply","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.apply.html#pandas.tseries.offsets.QuarterBegin.apply"},{"t":"pandas.tseries.offsets.QuarterBegin.apply_index","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.apply_index.html#pandas.tseries.offsets.QuarterBegin.apply_index"},{"t":"pandas.tseries.offsets.QuarterBegin.copy","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.copy.html#pandas.tseries.offsets.QuarterBegin.copy"},{"t":"pandas.tseries.offsets.QuarterBegin.isAnchored","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.isAnchored.html#pandas.tseries.offsets.QuarterBegin.isAnchored"},{"t":"pandas.tseries.offsets.QuarterBegin.onOffset","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.onOffset.html#pandas.tseries.offsets.QuarterBegin.onOffset"},{"t":"pandas.tseries.offsets.QuarterBegin.is_anchored","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.is_anchored.html#pandas.tseries.offsets.QuarterBegin.is_anchored"},{"t":"pandas.tseries.offsets.QuarterBegin.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.QuarterBegin.is_on_offset.html#pandas.tseries.offsets.QuarterBegin.is_on_offset"},{"t":"pandas.tseries.offsets.QuarterBegin.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.QuarterBegin.__call__.html#pandas.tseries.offsets.QuarterBegin.__call__"},{"t":"pandas.tseries.offsets.BYearEnd","d":"DateOffset increments between the last business day of the year.","p":"api\/pandas.tseries.offsets.BYearEnd.html#pandas.tseries.offsets.BYearEnd"},{"t":"pandas.tseries.offsets.BYearEnd.freqstr","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.freqstr.html#pandas.tseries.offsets.BYearEnd.freqstr"},{"t":"pandas.tseries.offsets.BYearEnd.kwds","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.kwds.html#pandas.tseries.offsets.BYearEnd.kwds"},{"t":"pandas.tseries.offsets.BYearEnd.name","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.name.html#pandas.tseries.offsets.BYearEnd.name"},{"t":"pandas.tseries.offsets.BYearEnd.nanos","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.nanos.html#pandas.tseries.offsets.BYearEnd.nanos"},{"t":"pandas.tseries.offsets.BYearEnd.normalize","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.normalize.html#pandas.tseries.offsets.BYearEnd.normalize"},{"t":"pandas.tseries.offsets.BYearEnd.rule_code","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.rule_code.html#pandas.tseries.offsets.BYearEnd.rule_code"},{"t":"pandas.tseries.offsets.BYearEnd.n","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.n.html#pandas.tseries.offsets.BYearEnd.n"},{"t":"pandas.tseries.offsets.BYearEnd.month","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.month.html#pandas.tseries.offsets.BYearEnd.month"},{"t":"pandas.tseries.offsets.BYearEnd.apply","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.apply.html#pandas.tseries.offsets.BYearEnd.apply"},{"t":"pandas.tseries.offsets.BYearEnd.apply_index","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.apply_index.html#pandas.tseries.offsets.BYearEnd.apply_index"},{"t":"pandas.tseries.offsets.BYearEnd.copy","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.copy.html#pandas.tseries.offsets.BYearEnd.copy"},{"t":"pandas.tseries.offsets.BYearEnd.isAnchored","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.isAnchored.html#pandas.tseries.offsets.BYearEnd.isAnchored"},{"t":"pandas.tseries.offsets.BYearEnd.onOffset","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.onOffset.html#pandas.tseries.offsets.BYearEnd.onOffset"},{"t":"pandas.tseries.offsets.BYearEnd.is_anchored","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.is_anchored.html#pandas.tseries.offsets.BYearEnd.is_anchored"},{"t":"pandas.tseries.offsets.BYearEnd.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.BYearEnd.is_on_offset.html#pandas.tseries.offsets.BYearEnd.is_on_offset"},{"t":"pandas.tseries.offsets.BYearEnd.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.BYearEnd.__call__.html#pandas.tseries.offsets.BYearEnd.__call__"},{"t":"pandas.tseries.offsets.BYearBegin","d":"DateOffset increments between the first business day of the year.","p":"api\/pandas.tseries.offsets.BYearBegin.html#pandas.tseries.offsets.BYearBegin"},{"t":"pandas.tseries.offsets.BYearBegin.freqstr","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.freqstr.html#pandas.tseries.offsets.BYearBegin.freqstr"},{"t":"pandas.tseries.offsets.BYearBegin.kwds","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.kwds.html#pandas.tseries.offsets.BYearBegin.kwds"},{"t":"pandas.tseries.offsets.BYearBegin.name","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.name.html#pandas.tseries.offsets.BYearBegin.name"},{"t":"pandas.tseries.offsets.BYearBegin.nanos","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.nanos.html#pandas.tseries.offsets.BYearBegin.nanos"},{"t":"pandas.tseries.offsets.BYearBegin.normalize","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.normalize.html#pandas.tseries.offsets.BYearBegin.normalize"},{"t":"pandas.tseries.offsets.BYearBegin.rule_code","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.rule_code.html#pandas.tseries.offsets.BYearBegin.rule_code"},{"t":"pandas.tseries.offsets.BYearBegin.n","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.n.html#pandas.tseries.offsets.BYearBegin.n"},{"t":"pandas.tseries.offsets.BYearBegin.month","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.month.html#pandas.tseries.offsets.BYearBegin.month"},{"t":"pandas.tseries.offsets.BYearBegin.apply","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.apply.html#pandas.tseries.offsets.BYearBegin.apply"},{"t":"pandas.tseries.offsets.BYearBegin.apply_index","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.apply_index.html#pandas.tseries.offsets.BYearBegin.apply_index"},{"t":"pandas.tseries.offsets.BYearBegin.copy","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.copy.html#pandas.tseries.offsets.BYearBegin.copy"},{"t":"pandas.tseries.offsets.BYearBegin.isAnchored","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.isAnchored.html#pandas.tseries.offsets.BYearBegin.isAnchored"},{"t":"pandas.tseries.offsets.BYearBegin.onOffset","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.onOffset.html#pandas.tseries.offsets.BYearBegin.onOffset"},{"t":"pandas.tseries.offsets.BYearBegin.is_anchored","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.is_anchored.html#pandas.tseries.offsets.BYearBegin.is_anchored"},{"t":"pandas.tseries.offsets.BYearBegin.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.BYearBegin.is_on_offset.html#pandas.tseries.offsets.BYearBegin.is_on_offset"},{"t":"pandas.tseries.offsets.BYearBegin.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.BYearBegin.__call__.html#pandas.tseries.offsets.BYearBegin.__call__"},{"t":"pandas.tseries.offsets.YearEnd","d":"DateOffset increments between calendar year ends.","p":"api\/pandas.tseries.offsets.YearEnd.html#pandas.tseries.offsets.YearEnd"},{"t":"pandas.tseries.offsets.YearEnd.freqstr","d":"","p":"api\/pandas.tseries.offsets.YearEnd.freqstr.html#pandas.tseries.offsets.YearEnd.freqstr"},{"t":"pandas.tseries.offsets.YearEnd.kwds","d":"","p":"api\/pandas.tseries.offsets.YearEnd.kwds.html#pandas.tseries.offsets.YearEnd.kwds"},{"t":"pandas.tseries.offsets.YearEnd.name","d":"","p":"api\/pandas.tseries.offsets.YearEnd.name.html#pandas.tseries.offsets.YearEnd.name"},{"t":"pandas.tseries.offsets.YearEnd.nanos","d":"","p":"api\/pandas.tseries.offsets.YearEnd.nanos.html#pandas.tseries.offsets.YearEnd.nanos"},{"t":"pandas.tseries.offsets.YearEnd.normalize","d":"","p":"api\/pandas.tseries.offsets.YearEnd.normalize.html#pandas.tseries.offsets.YearEnd.normalize"},{"t":"pandas.tseries.offsets.YearEnd.rule_code","d":"","p":"api\/pandas.tseries.offsets.YearEnd.rule_code.html#pandas.tseries.offsets.YearEnd.rule_code"},{"t":"pandas.tseries.offsets.YearEnd.n","d":"","p":"api\/pandas.tseries.offsets.YearEnd.n.html#pandas.tseries.offsets.YearEnd.n"},{"t":"pandas.tseries.offsets.YearEnd.month","d":"","p":"api\/pandas.tseries.offsets.YearEnd.month.html#pandas.tseries.offsets.YearEnd.month"},{"t":"pandas.tseries.offsets.YearEnd.apply","d":"","p":"api\/pandas.tseries.offsets.YearEnd.apply.html#pandas.tseries.offsets.YearEnd.apply"},{"t":"pandas.tseries.offsets.YearEnd.apply_index","d":"","p":"api\/pandas.tseries.offsets.YearEnd.apply_index.html#pandas.tseries.offsets.YearEnd.apply_index"},{"t":"pandas.tseries.offsets.YearEnd.copy","d":"","p":"api\/pandas.tseries.offsets.YearEnd.copy.html#pandas.tseries.offsets.YearEnd.copy"},{"t":"pandas.tseries.offsets.YearEnd.isAnchored","d":"","p":"api\/pandas.tseries.offsets.YearEnd.isAnchored.html#pandas.tseries.offsets.YearEnd.isAnchored"},{"t":"pandas.tseries.offsets.YearEnd.onOffset","d":"","p":"api\/pandas.tseries.offsets.YearEnd.onOffset.html#pandas.tseries.offsets.YearEnd.onOffset"},{"t":"pandas.tseries.offsets.YearEnd.is_anchored","d":"","p":"api\/pandas.tseries.offsets.YearEnd.is_anchored.html#pandas.tseries.offsets.YearEnd.is_anchored"},{"t":"pandas.tseries.offsets.YearEnd.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.YearEnd.is_on_offset.html#pandas.tseries.offsets.YearEnd.is_on_offset"},{"t":"pandas.tseries.offsets.YearEnd.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.YearEnd.__call__.html#pandas.tseries.offsets.YearEnd.__call__"},{"t":"pandas.tseries.offsets.YearBegin","d":"DateOffset increments between calendar year begin dates.","p":"api\/pandas.tseries.offsets.YearBegin.html#pandas.tseries.offsets.YearBegin"},{"t":"pandas.tseries.offsets.YearBegin.freqstr","d":"","p":"api\/pandas.tseries.offsets.YearBegin.freqstr.html#pandas.tseries.offsets.YearBegin.freqstr"},{"t":"pandas.tseries.offsets.YearBegin.kwds","d":"","p":"api\/pandas.tseries.offsets.YearBegin.kwds.html#pandas.tseries.offsets.YearBegin.kwds"},{"t":"pandas.tseries.offsets.YearBegin.name","d":"","p":"api\/pandas.tseries.offsets.YearBegin.name.html#pandas.tseries.offsets.YearBegin.name"},{"t":"pandas.tseries.offsets.YearBegin.nanos","d":"","p":"api\/pandas.tseries.offsets.YearBegin.nanos.html#pandas.tseries.offsets.YearBegin.nanos"},{"t":"pandas.tseries.offsets.YearBegin.normalize","d":"","p":"api\/pandas.tseries.offsets.YearBegin.normalize.html#pandas.tseries.offsets.YearBegin.normalize"},{"t":"pandas.tseries.offsets.YearBegin.rule_code","d":"","p":"api\/pandas.tseries.offsets.YearBegin.rule_code.html#pandas.tseries.offsets.YearBegin.rule_code"},{"t":"pandas.tseries.offsets.YearBegin.n","d":"","p":"api\/pandas.tseries.offsets.YearBegin.n.html#pandas.tseries.offsets.YearBegin.n"},{"t":"pandas.tseries.offsets.YearBegin.month","d":"","p":"api\/pandas.tseries.offsets.YearBegin.month.html#pandas.tseries.offsets.YearBegin.month"},{"t":"pandas.tseries.offsets.YearBegin.apply","d":"","p":"api\/pandas.tseries.offsets.YearBegin.apply.html#pandas.tseries.offsets.YearBegin.apply"},{"t":"pandas.tseries.offsets.YearBegin.apply_index","d":"","p":"api\/pandas.tseries.offsets.YearBegin.apply_index.html#pandas.tseries.offsets.YearBegin.apply_index"},{"t":"pandas.tseries.offsets.YearBegin.copy","d":"","p":"api\/pandas.tseries.offsets.YearBegin.copy.html#pandas.tseries.offsets.YearBegin.copy"},{"t":"pandas.tseries.offsets.YearBegin.isAnchored","d":"","p":"api\/pandas.tseries.offsets.YearBegin.isAnchored.html#pandas.tseries.offsets.YearBegin.isAnchored"},{"t":"pandas.tseries.offsets.YearBegin.onOffset","d":"","p":"api\/pandas.tseries.offsets.YearBegin.onOffset.html#pandas.tseries.offsets.YearBegin.onOffset"},{"t":"pandas.tseries.offsets.YearBegin.is_anchored","d":"","p":"api\/pandas.tseries.offsets.YearBegin.is_anchored.html#pandas.tseries.offsets.YearBegin.is_anchored"},{"t":"pandas.tseries.offsets.YearBegin.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.YearBegin.is_on_offset.html#pandas.tseries.offsets.YearBegin.is_on_offset"},{"t":"pandas.tseries.offsets.YearBegin.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.YearBegin.__call__.html#pandas.tseries.offsets.YearBegin.__call__"},{"t":"pandas.tseries.offsets.FY5253","d":"Describes 52-53 week fiscal year.","p":"api\/pandas.tseries.offsets.FY5253.html#pandas.tseries.offsets.FY5253"},{"t":"pandas.tseries.offsets.FY5253.freqstr","d":"","p":"api\/pandas.tseries.offsets.FY5253.freqstr.html#pandas.tseries.offsets.FY5253.freqstr"},{"t":"pandas.tseries.offsets.FY5253.kwds","d":"","p":"api\/pandas.tseries.offsets.FY5253.kwds.html#pandas.tseries.offsets.FY5253.kwds"},{"t":"pandas.tseries.offsets.FY5253.name","d":"","p":"api\/pandas.tseries.offsets.FY5253.name.html#pandas.tseries.offsets.FY5253.name"},{"t":"pandas.tseries.offsets.FY5253.nanos","d":"","p":"api\/pandas.tseries.offsets.FY5253.nanos.html#pandas.tseries.offsets.FY5253.nanos"},{"t":"pandas.tseries.offsets.FY5253.normalize","d":"","p":"api\/pandas.tseries.offsets.FY5253.normalize.html#pandas.tseries.offsets.FY5253.normalize"},{"t":"pandas.tseries.offsets.FY5253.rule_code","d":"","p":"api\/pandas.tseries.offsets.FY5253.rule_code.html#pandas.tseries.offsets.FY5253.rule_code"},{"t":"pandas.tseries.offsets.FY5253.n","d":"","p":"api\/pandas.tseries.offsets.FY5253.n.html#pandas.tseries.offsets.FY5253.n"},{"t":"pandas.tseries.offsets.FY5253.startingMonth","d":"","p":"api\/pandas.tseries.offsets.FY5253.startingMonth.html#pandas.tseries.offsets.FY5253.startingMonth"},{"t":"pandas.tseries.offsets.FY5253.variation","d":"","p":"api\/pandas.tseries.offsets.FY5253.variation.html#pandas.tseries.offsets.FY5253.variation"},{"t":"pandas.tseries.offsets.FY5253.weekday","d":"","p":"api\/pandas.tseries.offsets.FY5253.weekday.html#pandas.tseries.offsets.FY5253.weekday"},{"t":"pandas.tseries.offsets.FY5253.apply","d":"","p":"api\/pandas.tseries.offsets.FY5253.apply.html#pandas.tseries.offsets.FY5253.apply"},{"t":"pandas.tseries.offsets.FY5253.apply_index","d":"","p":"api\/pandas.tseries.offsets.FY5253.apply_index.html#pandas.tseries.offsets.FY5253.apply_index"},{"t":"pandas.tseries.offsets.FY5253.copy","d":"","p":"api\/pandas.tseries.offsets.FY5253.copy.html#pandas.tseries.offsets.FY5253.copy"},{"t":"pandas.tseries.offsets.FY5253.get_rule_code_suffix","d":"","p":"api\/pandas.tseries.offsets.FY5253.get_rule_code_suffix.html#pandas.tseries.offsets.FY5253.get_rule_code_suffix"},{"t":"pandas.tseries.offsets.FY5253.get_year_end","d":"","p":"api\/pandas.tseries.offsets.FY5253.get_year_end.html#pandas.tseries.offsets.FY5253.get_year_end"},{"t":"pandas.tseries.offsets.FY5253.isAnchored","d":"","p":"api\/pandas.tseries.offsets.FY5253.isAnchored.html#pandas.tseries.offsets.FY5253.isAnchored"},{"t":"pandas.tseries.offsets.FY5253.onOffset","d":"","p":"api\/pandas.tseries.offsets.FY5253.onOffset.html#pandas.tseries.offsets.FY5253.onOffset"},{"t":"pandas.tseries.offsets.FY5253.is_anchored","d":"","p":"api\/pandas.tseries.offsets.FY5253.is_anchored.html#pandas.tseries.offsets.FY5253.is_anchored"},{"t":"pandas.tseries.offsets.FY5253.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.FY5253.is_on_offset.html#pandas.tseries.offsets.FY5253.is_on_offset"},{"t":"pandas.tseries.offsets.FY5253.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.FY5253.__call__.html#pandas.tseries.offsets.FY5253.__call__"},{"t":"pandas.tseries.offsets.FY5253Quarter","d":"DateOffset increments between business quarter dates for 52-53 week fiscal year (also known as a 4-4-5 calendar).","p":"api\/pandas.tseries.offsets.FY5253Quarter.html#pandas.tseries.offsets.FY5253Quarter"},{"t":"pandas.tseries.offsets.FY5253Quarter.freqstr","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.freqstr.html#pandas.tseries.offsets.FY5253Quarter.freqstr"},{"t":"pandas.tseries.offsets.FY5253Quarter.kwds","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.kwds.html#pandas.tseries.offsets.FY5253Quarter.kwds"},{"t":"pandas.tseries.offsets.FY5253Quarter.name","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.name.html#pandas.tseries.offsets.FY5253Quarter.name"},{"t":"pandas.tseries.offsets.FY5253Quarter.nanos","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.nanos.html#pandas.tseries.offsets.FY5253Quarter.nanos"},{"t":"pandas.tseries.offsets.FY5253Quarter.normalize","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.normalize.html#pandas.tseries.offsets.FY5253Quarter.normalize"},{"t":"pandas.tseries.offsets.FY5253Quarter.rule_code","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.rule_code.html#pandas.tseries.offsets.FY5253Quarter.rule_code"},{"t":"pandas.tseries.offsets.FY5253Quarter.n","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.n.html#pandas.tseries.offsets.FY5253Quarter.n"},{"t":"pandas.tseries.offsets.FY5253Quarter.qtr_with_extra_week","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.qtr_with_extra_week.html#pandas.tseries.offsets.FY5253Quarter.qtr_with_extra_week"},{"t":"pandas.tseries.offsets.FY5253Quarter.startingMonth","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.startingMonth.html#pandas.tseries.offsets.FY5253Quarter.startingMonth"},{"t":"pandas.tseries.offsets.FY5253Quarter.variation","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.variation.html#pandas.tseries.offsets.FY5253Quarter.variation"},{"t":"pandas.tseries.offsets.FY5253Quarter.weekday","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.weekday.html#pandas.tseries.offsets.FY5253Quarter.weekday"},{"t":"pandas.tseries.offsets.FY5253Quarter.apply","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.apply.html#pandas.tseries.offsets.FY5253Quarter.apply"},{"t":"pandas.tseries.offsets.FY5253Quarter.apply_index","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.apply_index.html#pandas.tseries.offsets.FY5253Quarter.apply_index"},{"t":"pandas.tseries.offsets.FY5253Quarter.copy","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.copy.html#pandas.tseries.offsets.FY5253Quarter.copy"},{"t":"pandas.tseries.offsets.FY5253Quarter.get_rule_code_suffix","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.get_rule_code_suffix.html#pandas.tseries.offsets.FY5253Quarter.get_rule_code_suffix"},{"t":"pandas.tseries.offsets.FY5253Quarter.get_weeks","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.get_weeks.html#pandas.tseries.offsets.FY5253Quarter.get_weeks"},{"t":"pandas.tseries.offsets.FY5253Quarter.isAnchored","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.isAnchored.html#pandas.tseries.offsets.FY5253Quarter.isAnchored"},{"t":"pandas.tseries.offsets.FY5253Quarter.onOffset","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.onOffset.html#pandas.tseries.offsets.FY5253Quarter.onOffset"},{"t":"pandas.tseries.offsets.FY5253Quarter.is_anchored","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.is_anchored.html#pandas.tseries.offsets.FY5253Quarter.is_anchored"},{"t":"pandas.tseries.offsets.FY5253Quarter.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.is_on_offset.html#pandas.tseries.offsets.FY5253Quarter.is_on_offset"},{"t":"pandas.tseries.offsets.FY5253Quarter.year_has_extra_week","d":"","p":"api\/pandas.tseries.offsets.FY5253Quarter.year_has_extra_week.html#pandas.tseries.offsets.FY5253Quarter.year_has_extra_week"},{"t":"pandas.tseries.offsets.FY5253Quarter.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.FY5253Quarter.__call__.html#pandas.tseries.offsets.FY5253Quarter.__call__"},{"t":"pandas.tseries.offsets.Easter","d":"DateOffset for the Easter holiday using logic defined in dateutil.","p":"api\/pandas.tseries.offsets.Easter.html#pandas.tseries.offsets.Easter"},{"t":"pandas.tseries.offsets.Easter.freqstr","d":"","p":"api\/pandas.tseries.offsets.Easter.freqstr.html#pandas.tseries.offsets.Easter.freqstr"},{"t":"pandas.tseries.offsets.Easter.kwds","d":"","p":"api\/pandas.tseries.offsets.Easter.kwds.html#pandas.tseries.offsets.Easter.kwds"},{"t":"pandas.tseries.offsets.Easter.name","d":"","p":"api\/pandas.tseries.offsets.Easter.name.html#pandas.tseries.offsets.Easter.name"},{"t":"pandas.tseries.offsets.Easter.nanos","d":"","p":"api\/pandas.tseries.offsets.Easter.nanos.html#pandas.tseries.offsets.Easter.nanos"},{"t":"pandas.tseries.offsets.Easter.normalize","d":"","p":"api\/pandas.tseries.offsets.Easter.normalize.html#pandas.tseries.offsets.Easter.normalize"},{"t":"pandas.tseries.offsets.Easter.rule_code","d":"","p":"api\/pandas.tseries.offsets.Easter.rule_code.html#pandas.tseries.offsets.Easter.rule_code"},{"t":"pandas.tseries.offsets.Easter.n","d":"","p":"api\/pandas.tseries.offsets.Easter.n.html#pandas.tseries.offsets.Easter.n"},{"t":"pandas.tseries.offsets.Easter.apply","d":"","p":"api\/pandas.tseries.offsets.Easter.apply.html#pandas.tseries.offsets.Easter.apply"},{"t":"pandas.tseries.offsets.Easter.apply_index","d":"","p":"api\/pandas.tseries.offsets.Easter.apply_index.html#pandas.tseries.offsets.Easter.apply_index"},{"t":"pandas.tseries.offsets.Easter.copy","d":"","p":"api\/pandas.tseries.offsets.Easter.copy.html#pandas.tseries.offsets.Easter.copy"},{"t":"pandas.tseries.offsets.Easter.isAnchored","d":"","p":"api\/pandas.tseries.offsets.Easter.isAnchored.html#pandas.tseries.offsets.Easter.isAnchored"},{"t":"pandas.tseries.offsets.Easter.onOffset","d":"","p":"api\/pandas.tseries.offsets.Easter.onOffset.html#pandas.tseries.offsets.Easter.onOffset"},{"t":"pandas.tseries.offsets.Easter.is_anchored","d":"","p":"api\/pandas.tseries.offsets.Easter.is_anchored.html#pandas.tseries.offsets.Easter.is_anchored"},{"t":"pandas.tseries.offsets.Easter.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.Easter.is_on_offset.html#pandas.tseries.offsets.Easter.is_on_offset"},{"t":"pandas.tseries.offsets.Easter.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.Easter.__call__.html#pandas.tseries.offsets.Easter.__call__"},{"t":"pandas.tseries.offsets.Tick","d":"","p":"api\/pandas.tseries.offsets.Tick.html#pandas.tseries.offsets.Tick"},{"t":"pandas.tseries.offsets.Tick.delta","d":"","p":"api\/pandas.tseries.offsets.Tick.delta.html#pandas.tseries.offsets.Tick.delta"},{"t":"pandas.tseries.offsets.Tick.freqstr","d":"","p":"api\/pandas.tseries.offsets.Tick.freqstr.html#pandas.tseries.offsets.Tick.freqstr"},{"t":"pandas.tseries.offsets.Tick.kwds","d":"","p":"api\/pandas.tseries.offsets.Tick.kwds.html#pandas.tseries.offsets.Tick.kwds"},{"t":"pandas.tseries.offsets.Tick.name","d":"","p":"api\/pandas.tseries.offsets.Tick.name.html#pandas.tseries.offsets.Tick.name"},{"t":"pandas.tseries.offsets.Tick.nanos","d":"","p":"api\/pandas.tseries.offsets.Tick.nanos.html#pandas.tseries.offsets.Tick.nanos"},{"t":"pandas.tseries.offsets.Tick.normalize","d":"","p":"api\/pandas.tseries.offsets.Tick.normalize.html#pandas.tseries.offsets.Tick.normalize"},{"t":"pandas.tseries.offsets.Tick.rule_code","d":"","p":"api\/pandas.tseries.offsets.Tick.rule_code.html#pandas.tseries.offsets.Tick.rule_code"},{"t":"pandas.tseries.offsets.Tick.n","d":"","p":"api\/pandas.tseries.offsets.Tick.n.html#pandas.tseries.offsets.Tick.n"},{"t":"pandas.tseries.offsets.Tick.copy","d":"","p":"api\/pandas.tseries.offsets.Tick.copy.html#pandas.tseries.offsets.Tick.copy"},{"t":"pandas.tseries.offsets.Tick.isAnchored","d":"","p":"api\/pandas.tseries.offsets.Tick.isAnchored.html#pandas.tseries.offsets.Tick.isAnchored"},{"t":"pandas.tseries.offsets.Tick.onOffset","d":"","p":"api\/pandas.tseries.offsets.Tick.onOffset.html#pandas.tseries.offsets.Tick.onOffset"},{"t":"pandas.tseries.offsets.Tick.is_anchored","d":"","p":"api\/pandas.tseries.offsets.Tick.is_anchored.html#pandas.tseries.offsets.Tick.is_anchored"},{"t":"pandas.tseries.offsets.Tick.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.Tick.is_on_offset.html#pandas.tseries.offsets.Tick.is_on_offset"},{"t":"pandas.tseries.offsets.Tick.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.Tick.__call__.html#pandas.tseries.offsets.Tick.__call__"},{"t":"pandas.tseries.offsets.Tick.apply","d":"","p":"api\/pandas.tseries.offsets.Tick.apply.html#pandas.tseries.offsets.Tick.apply"},{"t":"pandas.tseries.offsets.Tick.apply_index","d":"","p":"api\/pandas.tseries.offsets.Tick.apply_index.html#pandas.tseries.offsets.Tick.apply_index"},{"t":"pandas.tseries.offsets.Day","d":"","p":"api\/pandas.tseries.offsets.Day.html#pandas.tseries.offsets.Day"},{"t":"pandas.tseries.offsets.Day.delta","d":"","p":"api\/pandas.tseries.offsets.Day.delta.html#pandas.tseries.offsets.Day.delta"},{"t":"pandas.tseries.offsets.Day.freqstr","d":"","p":"api\/pandas.tseries.offsets.Day.freqstr.html#pandas.tseries.offsets.Day.freqstr"},{"t":"pandas.tseries.offsets.Day.kwds","d":"","p":"api\/pandas.tseries.offsets.Day.kwds.html#pandas.tseries.offsets.Day.kwds"},{"t":"pandas.tseries.offsets.Day.name","d":"","p":"api\/pandas.tseries.offsets.Day.name.html#pandas.tseries.offsets.Day.name"},{"t":"pandas.tseries.offsets.Day.nanos","d":"","p":"api\/pandas.tseries.offsets.Day.nanos.html#pandas.tseries.offsets.Day.nanos"},{"t":"pandas.tseries.offsets.Day.normalize","d":"","p":"api\/pandas.tseries.offsets.Day.normalize.html#pandas.tseries.offsets.Day.normalize"},{"t":"pandas.tseries.offsets.Day.rule_code","d":"","p":"api\/pandas.tseries.offsets.Day.rule_code.html#pandas.tseries.offsets.Day.rule_code"},{"t":"pandas.tseries.offsets.Day.n","d":"","p":"api\/pandas.tseries.offsets.Day.n.html#pandas.tseries.offsets.Day.n"},{"t":"pandas.tseries.offsets.Day.copy","d":"","p":"api\/pandas.tseries.offsets.Day.copy.html#pandas.tseries.offsets.Day.copy"},{"t":"pandas.tseries.offsets.Day.isAnchored","d":"","p":"api\/pandas.tseries.offsets.Day.isAnchored.html#pandas.tseries.offsets.Day.isAnchored"},{"t":"pandas.tseries.offsets.Day.onOffset","d":"","p":"api\/pandas.tseries.offsets.Day.onOffset.html#pandas.tseries.offsets.Day.onOffset"},{"t":"pandas.tseries.offsets.Day.is_anchored","d":"","p":"api\/pandas.tseries.offsets.Day.is_anchored.html#pandas.tseries.offsets.Day.is_anchored"},{"t":"pandas.tseries.offsets.Day.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.Day.is_on_offset.html#pandas.tseries.offsets.Day.is_on_offset"},{"t":"pandas.tseries.offsets.Day.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.Day.__call__.html#pandas.tseries.offsets.Day.__call__"},{"t":"pandas.tseries.offsets.Day.apply","d":"","p":"api\/pandas.tseries.offsets.Day.apply.html#pandas.tseries.offsets.Day.apply"},{"t":"pandas.tseries.offsets.Day.apply_index","d":"","p":"api\/pandas.tseries.offsets.Day.apply_index.html#pandas.tseries.offsets.Day.apply_index"},{"t":"pandas.tseries.offsets.Hour","d":"","p":"api\/pandas.tseries.offsets.Hour.html#pandas.tseries.offsets.Hour"},{"t":"pandas.tseries.offsets.Hour.delta","d":"","p":"api\/pandas.tseries.offsets.Hour.delta.html#pandas.tseries.offsets.Hour.delta"},{"t":"pandas.tseries.offsets.Hour.freqstr","d":"","p":"api\/pandas.tseries.offsets.Hour.freqstr.html#pandas.tseries.offsets.Hour.freqstr"},{"t":"pandas.tseries.offsets.Hour.kwds","d":"","p":"api\/pandas.tseries.offsets.Hour.kwds.html#pandas.tseries.offsets.Hour.kwds"},{"t":"pandas.tseries.offsets.Hour.name","d":"","p":"api\/pandas.tseries.offsets.Hour.name.html#pandas.tseries.offsets.Hour.name"},{"t":"pandas.tseries.offsets.Hour.nanos","d":"","p":"api\/pandas.tseries.offsets.Hour.nanos.html#pandas.tseries.offsets.Hour.nanos"},{"t":"pandas.tseries.offsets.Hour.normalize","d":"","p":"api\/pandas.tseries.offsets.Hour.normalize.html#pandas.tseries.offsets.Hour.normalize"},{"t":"pandas.tseries.offsets.Hour.rule_code","d":"","p":"api\/pandas.tseries.offsets.Hour.rule_code.html#pandas.tseries.offsets.Hour.rule_code"},{"t":"pandas.tseries.offsets.Hour.n","d":"","p":"api\/pandas.tseries.offsets.Hour.n.html#pandas.tseries.offsets.Hour.n"},{"t":"pandas.tseries.offsets.Hour.copy","d":"","p":"api\/pandas.tseries.offsets.Hour.copy.html#pandas.tseries.offsets.Hour.copy"},{"t":"pandas.tseries.offsets.Hour.isAnchored","d":"","p":"api\/pandas.tseries.offsets.Hour.isAnchored.html#pandas.tseries.offsets.Hour.isAnchored"},{"t":"pandas.tseries.offsets.Hour.onOffset","d":"","p":"api\/pandas.tseries.offsets.Hour.onOffset.html#pandas.tseries.offsets.Hour.onOffset"},{"t":"pandas.tseries.offsets.Hour.is_anchored","d":"","p":"api\/pandas.tseries.offsets.Hour.is_anchored.html#pandas.tseries.offsets.Hour.is_anchored"},{"t":"pandas.tseries.offsets.Hour.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.Hour.is_on_offset.html#pandas.tseries.offsets.Hour.is_on_offset"},{"t":"pandas.tseries.offsets.Hour.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.Hour.__call__.html#pandas.tseries.offsets.Hour.__call__"},{"t":"pandas.tseries.offsets.Hour.apply","d":"","p":"api\/pandas.tseries.offsets.Hour.apply.html#pandas.tseries.offsets.Hour.apply"},{"t":"pandas.tseries.offsets.Hour.apply_index","d":"","p":"api\/pandas.tseries.offsets.Hour.apply_index.html#pandas.tseries.offsets.Hour.apply_index"},{"t":"pandas.tseries.offsets.Minute","d":"","p":"api\/pandas.tseries.offsets.Minute.html#pandas.tseries.offsets.Minute"},{"t":"pandas.tseries.offsets.Minute.delta","d":"","p":"api\/pandas.tseries.offsets.Minute.delta.html#pandas.tseries.offsets.Minute.delta"},{"t":"pandas.tseries.offsets.Minute.freqstr","d":"","p":"api\/pandas.tseries.offsets.Minute.freqstr.html#pandas.tseries.offsets.Minute.freqstr"},{"t":"pandas.tseries.offsets.Minute.kwds","d":"","p":"api\/pandas.tseries.offsets.Minute.kwds.html#pandas.tseries.offsets.Minute.kwds"},{"t":"pandas.tseries.offsets.Minute.name","d":"","p":"api\/pandas.tseries.offsets.Minute.name.html#pandas.tseries.offsets.Minute.name"},{"t":"pandas.tseries.offsets.Minute.nanos","d":"","p":"api\/pandas.tseries.offsets.Minute.nanos.html#pandas.tseries.offsets.Minute.nanos"},{"t":"pandas.tseries.offsets.Minute.normalize","d":"","p":"api\/pandas.tseries.offsets.Minute.normalize.html#pandas.tseries.offsets.Minute.normalize"},{"t":"pandas.tseries.offsets.Minute.rule_code","d":"","p":"api\/pandas.tseries.offsets.Minute.rule_code.html#pandas.tseries.offsets.Minute.rule_code"},{"t":"pandas.tseries.offsets.Minute.n","d":"","p":"api\/pandas.tseries.offsets.Minute.n.html#pandas.tseries.offsets.Minute.n"},{"t":"pandas.tseries.offsets.Minute.copy","d":"","p":"api\/pandas.tseries.offsets.Minute.copy.html#pandas.tseries.offsets.Minute.copy"},{"t":"pandas.tseries.offsets.Minute.isAnchored","d":"","p":"api\/pandas.tseries.offsets.Minute.isAnchored.html#pandas.tseries.offsets.Minute.isAnchored"},{"t":"pandas.tseries.offsets.Minute.onOffset","d":"","p":"api\/pandas.tseries.offsets.Minute.onOffset.html#pandas.tseries.offsets.Minute.onOffset"},{"t":"pandas.tseries.offsets.Minute.is_anchored","d":"","p":"api\/pandas.tseries.offsets.Minute.is_anchored.html#pandas.tseries.offsets.Minute.is_anchored"},{"t":"pandas.tseries.offsets.Minute.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.Minute.is_on_offset.html#pandas.tseries.offsets.Minute.is_on_offset"},{"t":"pandas.tseries.offsets.Minute.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.Minute.__call__.html#pandas.tseries.offsets.Minute.__call__"},{"t":"pandas.tseries.offsets.Minute.apply","d":"","p":"api\/pandas.tseries.offsets.Minute.apply.html#pandas.tseries.offsets.Minute.apply"},{"t":"pandas.tseries.offsets.Minute.apply_index","d":"","p":"api\/pandas.tseries.offsets.Minute.apply_index.html#pandas.tseries.offsets.Minute.apply_index"},{"t":"pandas.tseries.offsets.Second","d":"","p":"api\/pandas.tseries.offsets.Second.html#pandas.tseries.offsets.Second"},{"t":"pandas.tseries.offsets.Second.delta","d":"","p":"api\/pandas.tseries.offsets.Second.delta.html#pandas.tseries.offsets.Second.delta"},{"t":"pandas.tseries.offsets.Second.freqstr","d":"","p":"api\/pandas.tseries.offsets.Second.freqstr.html#pandas.tseries.offsets.Second.freqstr"},{"t":"pandas.tseries.offsets.Second.kwds","d":"","p":"api\/pandas.tseries.offsets.Second.kwds.html#pandas.tseries.offsets.Second.kwds"},{"t":"pandas.tseries.offsets.Second.name","d":"","p":"api\/pandas.tseries.offsets.Second.name.html#pandas.tseries.offsets.Second.name"},{"t":"pandas.tseries.offsets.Second.nanos","d":"","p":"api\/pandas.tseries.offsets.Second.nanos.html#pandas.tseries.offsets.Second.nanos"},{"t":"pandas.tseries.offsets.Second.normalize","d":"","p":"api\/pandas.tseries.offsets.Second.normalize.html#pandas.tseries.offsets.Second.normalize"},{"t":"pandas.tseries.offsets.Second.rule_code","d":"","p":"api\/pandas.tseries.offsets.Second.rule_code.html#pandas.tseries.offsets.Second.rule_code"},{"t":"pandas.tseries.offsets.Second.n","d":"","p":"api\/pandas.tseries.offsets.Second.n.html#pandas.tseries.offsets.Second.n"},{"t":"pandas.tseries.offsets.Second.copy","d":"","p":"api\/pandas.tseries.offsets.Second.copy.html#pandas.tseries.offsets.Second.copy"},{"t":"pandas.tseries.offsets.Second.isAnchored","d":"","p":"api\/pandas.tseries.offsets.Second.isAnchored.html#pandas.tseries.offsets.Second.isAnchored"},{"t":"pandas.tseries.offsets.Second.onOffset","d":"","p":"api\/pandas.tseries.offsets.Second.onOffset.html#pandas.tseries.offsets.Second.onOffset"},{"t":"pandas.tseries.offsets.Second.is_anchored","d":"","p":"api\/pandas.tseries.offsets.Second.is_anchored.html#pandas.tseries.offsets.Second.is_anchored"},{"t":"pandas.tseries.offsets.Second.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.Second.is_on_offset.html#pandas.tseries.offsets.Second.is_on_offset"},{"t":"pandas.tseries.offsets.Second.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.Second.__call__.html#pandas.tseries.offsets.Second.__call__"},{"t":"pandas.tseries.offsets.Second.apply","d":"","p":"api\/pandas.tseries.offsets.Second.apply.html#pandas.tseries.offsets.Second.apply"},{"t":"pandas.tseries.offsets.Second.apply_index","d":"","p":"api\/pandas.tseries.offsets.Second.apply_index.html#pandas.tseries.offsets.Second.apply_index"},{"t":"pandas.tseries.offsets.Milli","d":"","p":"api\/pandas.tseries.offsets.Milli.html#pandas.tseries.offsets.Milli"},{"t":"pandas.tseries.offsets.Milli.delta","d":"","p":"api\/pandas.tseries.offsets.Milli.delta.html#pandas.tseries.offsets.Milli.delta"},{"t":"pandas.tseries.offsets.Milli.freqstr","d":"","p":"api\/pandas.tseries.offsets.Milli.freqstr.html#pandas.tseries.offsets.Milli.freqstr"},{"t":"pandas.tseries.offsets.Milli.kwds","d":"","p":"api\/pandas.tseries.offsets.Milli.kwds.html#pandas.tseries.offsets.Milli.kwds"},{"t":"pandas.tseries.offsets.Milli.name","d":"","p":"api\/pandas.tseries.offsets.Milli.name.html#pandas.tseries.offsets.Milli.name"},{"t":"pandas.tseries.offsets.Milli.nanos","d":"","p":"api\/pandas.tseries.offsets.Milli.nanos.html#pandas.tseries.offsets.Milli.nanos"},{"t":"pandas.tseries.offsets.Milli.normalize","d":"","p":"api\/pandas.tseries.offsets.Milli.normalize.html#pandas.tseries.offsets.Milli.normalize"},{"t":"pandas.tseries.offsets.Milli.rule_code","d":"","p":"api\/pandas.tseries.offsets.Milli.rule_code.html#pandas.tseries.offsets.Milli.rule_code"},{"t":"pandas.tseries.offsets.Milli.n","d":"","p":"api\/pandas.tseries.offsets.Milli.n.html#pandas.tseries.offsets.Milli.n"},{"t":"pandas.tseries.offsets.Milli.copy","d":"","p":"api\/pandas.tseries.offsets.Milli.copy.html#pandas.tseries.offsets.Milli.copy"},{"t":"pandas.tseries.offsets.Milli.isAnchored","d":"","p":"api\/pandas.tseries.offsets.Milli.isAnchored.html#pandas.tseries.offsets.Milli.isAnchored"},{"t":"pandas.tseries.offsets.Milli.onOffset","d":"","p":"api\/pandas.tseries.offsets.Milli.onOffset.html#pandas.tseries.offsets.Milli.onOffset"},{"t":"pandas.tseries.offsets.Milli.is_anchored","d":"","p":"api\/pandas.tseries.offsets.Milli.is_anchored.html#pandas.tseries.offsets.Milli.is_anchored"},{"t":"pandas.tseries.offsets.Milli.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.Milli.is_on_offset.html#pandas.tseries.offsets.Milli.is_on_offset"},{"t":"pandas.tseries.offsets.Milli.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.Milli.__call__.html#pandas.tseries.offsets.Milli.__call__"},{"t":"pandas.tseries.offsets.Milli.apply","d":"","p":"api\/pandas.tseries.offsets.Milli.apply.html#pandas.tseries.offsets.Milli.apply"},{"t":"pandas.tseries.offsets.Milli.apply_index","d":"","p":"api\/pandas.tseries.offsets.Milli.apply_index.html#pandas.tseries.offsets.Milli.apply_index"},{"t":"pandas.tseries.offsets.Micro","d":"","p":"api\/pandas.tseries.offsets.Micro.html#pandas.tseries.offsets.Micro"},{"t":"pandas.tseries.offsets.Micro.delta","d":"","p":"api\/pandas.tseries.offsets.Micro.delta.html#pandas.tseries.offsets.Micro.delta"},{"t":"pandas.tseries.offsets.Micro.freqstr","d":"","p":"api\/pandas.tseries.offsets.Micro.freqstr.html#pandas.tseries.offsets.Micro.freqstr"},{"t":"pandas.tseries.offsets.Micro.kwds","d":"","p":"api\/pandas.tseries.offsets.Micro.kwds.html#pandas.tseries.offsets.Micro.kwds"},{"t":"pandas.tseries.offsets.Micro.name","d":"","p":"api\/pandas.tseries.offsets.Micro.name.html#pandas.tseries.offsets.Micro.name"},{"t":"pandas.tseries.offsets.Micro.nanos","d":"","p":"api\/pandas.tseries.offsets.Micro.nanos.html#pandas.tseries.offsets.Micro.nanos"},{"t":"pandas.tseries.offsets.Micro.normalize","d":"","p":"api\/pandas.tseries.offsets.Micro.normalize.html#pandas.tseries.offsets.Micro.normalize"},{"t":"pandas.tseries.offsets.Micro.rule_code","d":"","p":"api\/pandas.tseries.offsets.Micro.rule_code.html#pandas.tseries.offsets.Micro.rule_code"},{"t":"pandas.tseries.offsets.Micro.n","d":"","p":"api\/pandas.tseries.offsets.Micro.n.html#pandas.tseries.offsets.Micro.n"},{"t":"pandas.tseries.offsets.Micro.copy","d":"","p":"api\/pandas.tseries.offsets.Micro.copy.html#pandas.tseries.offsets.Micro.copy"},{"t":"pandas.tseries.offsets.Micro.isAnchored","d":"","p":"api\/pandas.tseries.offsets.Micro.isAnchored.html#pandas.tseries.offsets.Micro.isAnchored"},{"t":"pandas.tseries.offsets.Micro.onOffset","d":"","p":"api\/pandas.tseries.offsets.Micro.onOffset.html#pandas.tseries.offsets.Micro.onOffset"},{"t":"pandas.tseries.offsets.Micro.is_anchored","d":"","p":"api\/pandas.tseries.offsets.Micro.is_anchored.html#pandas.tseries.offsets.Micro.is_anchored"},{"t":"pandas.tseries.offsets.Micro.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.Micro.is_on_offset.html#pandas.tseries.offsets.Micro.is_on_offset"},{"t":"pandas.tseries.offsets.Micro.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.Micro.__call__.html#pandas.tseries.offsets.Micro.__call__"},{"t":"pandas.tseries.offsets.Micro.apply","d":"","p":"api\/pandas.tseries.offsets.Micro.apply.html#pandas.tseries.offsets.Micro.apply"},{"t":"pandas.tseries.offsets.Micro.apply_index","d":"","p":"api\/pandas.tseries.offsets.Micro.apply_index.html#pandas.tseries.offsets.Micro.apply_index"},{"t":"pandas.tseries.offsets.Nano","d":"","p":"api\/pandas.tseries.offsets.Nano.html#pandas.tseries.offsets.Nano"},{"t":"pandas.tseries.offsets.Nano.delta","d":"","p":"api\/pandas.tseries.offsets.Nano.delta.html#pandas.tseries.offsets.Nano.delta"},{"t":"pandas.tseries.offsets.Nano.freqstr","d":"","p":"api\/pandas.tseries.offsets.Nano.freqstr.html#pandas.tseries.offsets.Nano.freqstr"},{"t":"pandas.tseries.offsets.Nano.kwds","d":"","p":"api\/pandas.tseries.offsets.Nano.kwds.html#pandas.tseries.offsets.Nano.kwds"},{"t":"pandas.tseries.offsets.Nano.name","d":"","p":"api\/pandas.tseries.offsets.Nano.name.html#pandas.tseries.offsets.Nano.name"},{"t":"pandas.tseries.offsets.Nano.nanos","d":"","p":"api\/pandas.tseries.offsets.Nano.nanos.html#pandas.tseries.offsets.Nano.nanos"},{"t":"pandas.tseries.offsets.Nano.normalize","d":"","p":"api\/pandas.tseries.offsets.Nano.normalize.html#pandas.tseries.offsets.Nano.normalize"},{"t":"pandas.tseries.offsets.Nano.rule_code","d":"","p":"api\/pandas.tseries.offsets.Nano.rule_code.html#pandas.tseries.offsets.Nano.rule_code"},{"t":"pandas.tseries.offsets.Nano.n","d":"","p":"api\/pandas.tseries.offsets.Nano.n.html#pandas.tseries.offsets.Nano.n"},{"t":"pandas.tseries.offsets.Nano.copy","d":"","p":"api\/pandas.tseries.offsets.Nano.copy.html#pandas.tseries.offsets.Nano.copy"},{"t":"pandas.tseries.offsets.Nano.isAnchored","d":"","p":"api\/pandas.tseries.offsets.Nano.isAnchored.html#pandas.tseries.offsets.Nano.isAnchored"},{"t":"pandas.tseries.offsets.Nano.onOffset","d":"","p":"api\/pandas.tseries.offsets.Nano.onOffset.html#pandas.tseries.offsets.Nano.onOffset"},{"t":"pandas.tseries.offsets.Nano.is_anchored","d":"","p":"api\/pandas.tseries.offsets.Nano.is_anchored.html#pandas.tseries.offsets.Nano.is_anchored"},{"t":"pandas.tseries.offsets.Nano.is_on_offset","d":"","p":"api\/pandas.tseries.offsets.Nano.is_on_offset.html#pandas.tseries.offsets.Nano.is_on_offset"},{"t":"pandas.tseries.offsets.Nano.__call__","d":"Call self as a function.","p":"api\/pandas.tseries.offsets.Nano.__call__.html#pandas.tseries.offsets.Nano.__call__"},{"t":"pandas.tseries.offsets.Nano.apply","d":"","p":"api\/pandas.tseries.offsets.Nano.apply.html#pandas.tseries.offsets.Nano.apply"},{"t":"pandas.tseries.offsets.Nano.apply_index","d":"","p":"api\/pandas.tseries.offsets.Nano.apply_index.html#pandas.tseries.offsets.Nano.apply_index"},{"t":"pandas.tseries.frequencies.to_offset","d":"Return DateOffset object from string or tuple representation or datetime.timedelta object.","p":"api\/pandas.tseries.frequencies.to_offset.html#pandas.tseries.frequencies.to_offset"},{"t":"pandas.core.window.rolling.Rolling.count","d":"The rolling count of any non-NaN observations inside the window.","p":"api\/pandas.core.window.rolling.Rolling.count.html#pandas.core.window.rolling.Rolling.count"},{"t":"pandas.core.window.rolling.Rolling.sum","d":"Calculate rolling sum of given DataFrame or Series.","p":"api\/pandas.core.window.rolling.Rolling.sum.html#pandas.core.window.rolling.Rolling.sum"},{"t":"pandas.core.window.rolling.Rolling.mean","d":"Calculate the rolling mean of the values.","p":"api\/pandas.core.window.rolling.Rolling.mean.html#pandas.core.window.rolling.Rolling.mean"},{"t":"pandas.core.window.rolling.Rolling.median","d":"Calculate the rolling median.","p":"api\/pandas.core.window.rolling.Rolling.median.html#pandas.core.window.rolling.Rolling.median"},{"t":"pandas.core.window.rolling.Rolling.var","d":"Calculate unbiased rolling variance.","p":"api\/pandas.core.window.rolling.Rolling.var.html#pandas.core.window.rolling.Rolling.var"},{"t":"pandas.core.window.rolling.Rolling.std","d":"Calculate rolling standard deviation.","p":"api\/pandas.core.window.rolling.Rolling.std.html#pandas.core.window.rolling.Rolling.std"},{"t":"pandas.core.window.rolling.Rolling.min","d":"Calculate the rolling minimum.","p":"api\/pandas.core.window.rolling.Rolling.min.html#pandas.core.window.rolling.Rolling.min"},{"t":"pandas.core.window.rolling.Rolling.max","d":"Calculate the rolling maximum.","p":"api\/pandas.core.window.rolling.Rolling.max.html#pandas.core.window.rolling.Rolling.max"},{"t":"pandas.core.window.rolling.Rolling.corr","d":"Calculate rolling correlation.","p":"api\/pandas.core.window.rolling.Rolling.corr.html#pandas.core.window.rolling.Rolling.corr"},{"t":"pandas.core.window.rolling.Rolling.cov","d":"Calculate the rolling sample covariance.","p":"api\/pandas.core.window.rolling.Rolling.cov.html#pandas.core.window.rolling.Rolling.cov"},{"t":"pandas.core.window.rolling.Rolling.skew","d":"Unbiased rolling skewness.","p":"api\/pandas.core.window.rolling.Rolling.skew.html#pandas.core.window.rolling.Rolling.skew"},{"t":"pandas.core.window.rolling.Rolling.kurt","d":"Calculate unbiased rolling kurtosis.","p":"api\/pandas.core.window.rolling.Rolling.kurt.html#pandas.core.window.rolling.Rolling.kurt"},{"t":"pandas.core.window.rolling.Rolling.apply","d":"Apply an arbitrary function to each rolling window.","p":"api\/pandas.core.window.rolling.Rolling.apply.html#pandas.core.window.rolling.Rolling.apply"},{"t":"pandas.core.window.rolling.Rolling.aggregate","d":"Aggregate using one or more operations over the specified axis.","p":"api\/pandas.core.window.rolling.Rolling.aggregate.html#pandas.core.window.rolling.Rolling.aggregate"},{"t":"pandas.core.window.rolling.Rolling.quantile","d":"Calculate the rolling quantile.","p":"api\/pandas.core.window.rolling.Rolling.quantile.html#pandas.core.window.rolling.Rolling.quantile"},{"t":"pandas.core.window.rolling.Rolling.sem","d":"Compute rolling standard error of mean.","p":"api\/pandas.core.window.rolling.Rolling.sem.html#pandas.core.window.rolling.Rolling.sem"},{"t":"pandas.core.window.rolling.Window.mean","d":"Calculate the window mean of the values.","p":"api\/pandas.core.window.rolling.Window.mean.html#pandas.core.window.rolling.Window.mean"},{"t":"pandas.core.window.rolling.Window.sum","d":"Calculate window sum of given DataFrame or Series.","p":"api\/pandas.core.window.rolling.Window.sum.html#pandas.core.window.rolling.Window.sum"},{"t":"pandas.core.window.rolling.Window.var","d":"Calculate unbiased window variance.","p":"api\/pandas.core.window.rolling.Window.var.html#pandas.core.window.rolling.Window.var"},{"t":"pandas.core.window.rolling.Window.std","d":"Calculate window standard deviation.","p":"api\/pandas.core.window.rolling.Window.std.html#pandas.core.window.rolling.Window.std"},{"t":"pandas.core.window.expanding.Expanding.count","d":"The expanding count of any non-NaN observations inside the window.","p":"api\/pandas.core.window.expanding.Expanding.count.html#pandas.core.window.expanding.Expanding.count"},{"t":"pandas.core.window.expanding.Expanding.sum","d":"Calculate expanding sum of given DataFrame or Series.","p":"api\/pandas.core.window.expanding.Expanding.sum.html#pandas.core.window.expanding.Expanding.sum"},{"t":"pandas.core.window.expanding.Expanding.mean","d":"Calculate the expanding mean of the values.","p":"api\/pandas.core.window.expanding.Expanding.mean.html#pandas.core.window.expanding.Expanding.mean"},{"t":"pandas.core.window.expanding.Expanding.median","d":"Calculate the expanding median.","p":"api\/pandas.core.window.expanding.Expanding.median.html#pandas.core.window.expanding.Expanding.median"},{"t":"pandas.core.window.expanding.Expanding.var","d":"Calculate unbiased expanding variance.","p":"api\/pandas.core.window.expanding.Expanding.var.html#pandas.core.window.expanding.Expanding.var"},{"t":"pandas.core.window.expanding.Expanding.std","d":"Calculate expanding standard deviation.","p":"api\/pandas.core.window.expanding.Expanding.std.html#pandas.core.window.expanding.Expanding.std"},{"t":"pandas.core.window.expanding.Expanding.min","d":"Calculate the expanding minimum.","p":"api\/pandas.core.window.expanding.Expanding.min.html#pandas.core.window.expanding.Expanding.min"},{"t":"pandas.core.window.expanding.Expanding.max","d":"Calculate the expanding maximum.","p":"api\/pandas.core.window.expanding.Expanding.max.html#pandas.core.window.expanding.Expanding.max"},{"t":"pandas.core.window.expanding.Expanding.corr","d":"Calculate expanding correlation.","p":"api\/pandas.core.window.expanding.Expanding.corr.html#pandas.core.window.expanding.Expanding.corr"},{"t":"pandas.core.window.expanding.Expanding.cov","d":"Calculate the expanding sample covariance.","p":"api\/pandas.core.window.expanding.Expanding.cov.html#pandas.core.window.expanding.Expanding.cov"},{"t":"pandas.core.window.expanding.Expanding.skew","d":"Unbiased expanding skewness.","p":"api\/pandas.core.window.expanding.Expanding.skew.html#pandas.core.window.expanding.Expanding.skew"},{"t":"pandas.core.window.expanding.Expanding.kurt","d":"Calculate unbiased expanding kurtosis.","p":"api\/pandas.core.window.expanding.Expanding.kurt.html#pandas.core.window.expanding.Expanding.kurt"},{"t":"pandas.core.window.expanding.Expanding.apply","d":"Apply an arbitrary function to each expanding window.","p":"api\/pandas.core.window.expanding.Expanding.apply.html#pandas.core.window.expanding.Expanding.apply"},{"t":"pandas.core.window.expanding.Expanding.aggregate","d":"Aggregate using one or more operations over the specified axis.","p":"api\/pandas.core.window.expanding.Expanding.aggregate.html#pandas.core.window.expanding.Expanding.aggregate"},{"t":"pandas.core.window.expanding.Expanding.quantile","d":"Calculate the expanding quantile.","p":"api\/pandas.core.window.expanding.Expanding.quantile.html#pandas.core.window.expanding.Expanding.quantile"},{"t":"pandas.core.window.expanding.Expanding.sem","d":"Compute expanding standard error of mean.","p":"api\/pandas.core.window.expanding.Expanding.sem.html#pandas.core.window.expanding.Expanding.sem"},{"t":"pandas.core.window.ewm.ExponentialMovingWindow.mean","d":"Exponential weighted moving average.","p":"api\/pandas.core.window.ewm.ExponentialMovingWindow.mean.html#pandas.core.window.ewm.ExponentialMovingWindow.mean"},{"t":"pandas.core.window.ewm.ExponentialMovingWindow.std","d":"Exponential weighted moving stddev.","p":"api\/pandas.core.window.ewm.ExponentialMovingWindow.std.html#pandas.core.window.ewm.ExponentialMovingWindow.std"},{"t":"pandas.core.window.ewm.ExponentialMovingWindow.var","d":"Exponential weighted moving variance.","p":"api\/pandas.core.window.ewm.ExponentialMovingWindow.var.html#pandas.core.window.ewm.ExponentialMovingWindow.var"},{"t":"pandas.core.window.ewm.ExponentialMovingWindow.corr","d":"Exponential weighted sample correlation.","p":"api\/pandas.core.window.ewm.ExponentialMovingWindow.corr.html#pandas.core.window.ewm.ExponentialMovingWindow.corr"},{"t":"pandas.core.window.ewm.ExponentialMovingWindow.cov","d":"Exponential weighted sample covariance.","p":"api\/pandas.core.window.ewm.ExponentialMovingWindow.cov.html#pandas.core.window.ewm.ExponentialMovingWindow.cov"},{"t":"pandas.api.indexers.BaseIndexer","d":"Base class for window bounds calculations.","p":"api\/pandas.api.indexers.BaseIndexer.html#pandas.api.indexers.BaseIndexer"},{"t":"pandas.api.indexers.FixedForwardWindowIndexer","d":"Creates window boundaries for fixed-length windows that include the current row.","p":"api\/pandas.api.indexers.FixedForwardWindowIndexer.html#pandas.api.indexers.FixedForwardWindowIndexer"},{"t":"pandas.api.indexers.VariableOffsetWindowIndexer","d":"Calculate window boundaries based on a non-fixed offset such as a BusinessDay","p":"api\/pandas.api.indexers.VariableOffsetWindowIndexer.html#pandas.api.indexers.VariableOffsetWindowIndexer"},{"t":"pandas.core.groupby.GroupBy.__iter__","d":"Groupby iterator.","p":"api\/pandas.core.groupby.GroupBy.__iter__.html#pandas.core.groupby.GroupBy.__iter__"},{"t":"pandas.core.groupby.GroupBy.groups","d":"Dict {group name -> group labels}.","p":"api\/pandas.core.groupby.GroupBy.groups.html#pandas.core.groupby.GroupBy.groups"},{"t":"pandas.core.groupby.GroupBy.indices","d":"Dict {group name -> group indices}.","p":"api\/pandas.core.groupby.GroupBy.indices.html#pandas.core.groupby.GroupBy.indices"},{"t":"pandas.core.groupby.GroupBy.get_group","d":"Construct DataFrame from group with provided name.","p":"api\/pandas.core.groupby.GroupBy.get_group.html#pandas.core.groupby.GroupBy.get_group"},{"t":"pandas.Grouper","d":"A Grouper allows the user to specify a groupby instruction for an object.","p":"api\/pandas.Grouper.html#pandas.Grouper"},{"t":"pandas.core.groupby.GroupBy.apply","d":"Apply function func group-wise and combine the results together.","p":"api\/pandas.core.groupby.GroupBy.apply.html#pandas.core.groupby.GroupBy.apply"},{"t":"pandas.core.groupby.GroupBy.agg","d":"","p":"api\/pandas.core.groupby.GroupBy.agg.html#pandas.core.groupby.GroupBy.agg"},{"t":"pandas.core.groupby.SeriesGroupBy.aggregate","d":"Aggregate using one or more operations over the specified axis.","p":"api\/pandas.core.groupby.SeriesGroupBy.aggregate.html#pandas.core.groupby.SeriesGroupBy.aggregate"},{"t":"pandas.core.groupby.DataFrameGroupBy.aggregate","d":"Aggregate using one or more operations over the specified axis.","p":"api\/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate"},{"t":"pandas.core.groupby.SeriesGroupBy.transform","d":"Call function producing a like-indexed Series on each group and return a Series having the same indexes as the original object filled with the transformed values","p":"api\/pandas.core.groupby.SeriesGroupBy.transform.html#pandas.core.groupby.SeriesGroupBy.transform"},{"t":"pandas.core.groupby.DataFrameGroupBy.transform","d":"Call function producing a like-indexed DataFrame on each group and return a DataFrame having the same indexes as the original object filled with the transformed values","p":"api\/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform"},{"t":"pandas.core.groupby.GroupBy.pipe","d":"Apply a function func with arguments to this GroupBy object and return the function\u2019s result.","p":"api\/pandas.core.groupby.GroupBy.pipe.html#pandas.core.groupby.GroupBy.pipe"},{"t":"pandas.core.groupby.GroupBy.all","d":"Return True if all values in the group are truthful, else False.","p":"api\/pandas.core.groupby.GroupBy.all.html#pandas.core.groupby.GroupBy.all"},{"t":"pandas.core.groupby.GroupBy.any","d":"Return True if any value in the group is truthful, else False.","p":"api\/pandas.core.groupby.GroupBy.any.html#pandas.core.groupby.GroupBy.any"},{"t":"pandas.core.groupby.GroupBy.bfill","d":"Backward fill the values.","p":"api\/pandas.core.groupby.GroupBy.bfill.html#pandas.core.groupby.GroupBy.bfill"},{"t":"pandas.core.groupby.GroupBy.backfill","d":"Backward fill the values.","p":"api\/pandas.core.groupby.GroupBy.backfill.html#pandas.core.groupby.GroupBy.backfill"},{"t":"pandas.core.groupby.GroupBy.count","d":"Compute count of group, excluding missing values.","p":"api\/pandas.core.groupby.GroupBy.count.html#pandas.core.groupby.GroupBy.count"},{"t":"pandas.core.groupby.GroupBy.cumcount","d":"Number each item in each group from 0 to the length of that group - 1.","p":"api\/pandas.core.groupby.GroupBy.cumcount.html#pandas.core.groupby.GroupBy.cumcount"},{"t":"pandas.core.groupby.GroupBy.cummax","d":"Cumulative max for each group.","p":"api\/pandas.core.groupby.GroupBy.cummax.html#pandas.core.groupby.GroupBy.cummax"},{"t":"pandas.core.groupby.GroupBy.cummin","d":"Cumulative min for each group.","p":"api\/pandas.core.groupby.GroupBy.cummin.html#pandas.core.groupby.GroupBy.cummin"},{"t":"pandas.core.groupby.GroupBy.cumprod","d":"Cumulative product for each group.","p":"api\/pandas.core.groupby.GroupBy.cumprod.html#pandas.core.groupby.GroupBy.cumprod"},{"t":"pandas.core.groupby.GroupBy.cumsum","d":"Cumulative sum for each group.","p":"api\/pandas.core.groupby.GroupBy.cumsum.html#pandas.core.groupby.GroupBy.cumsum"},{"t":"pandas.core.groupby.GroupBy.ffill","d":"Forward fill the values.","p":"api\/pandas.core.groupby.GroupBy.ffill.html#pandas.core.groupby.GroupBy.ffill"},{"t":"pandas.core.groupby.GroupBy.first","d":"Compute first of group values.","p":"api\/pandas.core.groupby.GroupBy.first.html#pandas.core.groupby.GroupBy.first"},{"t":"pandas.core.groupby.GroupBy.head","d":"Return first n rows of each group.","p":"api\/pandas.core.groupby.GroupBy.head.html#pandas.core.groupby.GroupBy.head"},{"t":"pandas.core.groupby.GroupBy.last","d":"Compute last of group values.","p":"api\/pandas.core.groupby.GroupBy.last.html#pandas.core.groupby.GroupBy.last"},{"t":"pandas.core.groupby.GroupBy.max","d":"Compute max of group values.","p":"api\/pandas.core.groupby.GroupBy.max.html#pandas.core.groupby.GroupBy.max"},{"t":"pandas.core.groupby.GroupBy.mean","d":"Compute mean of groups, excluding missing values.","p":"api\/pandas.core.groupby.GroupBy.mean.html#pandas.core.groupby.GroupBy.mean"},{"t":"pandas.core.groupby.GroupBy.median","d":"Compute median of groups, excluding missing values.","p":"api\/pandas.core.groupby.GroupBy.median.html#pandas.core.groupby.GroupBy.median"},{"t":"pandas.core.groupby.GroupBy.min","d":"Compute min of group values.","p":"api\/pandas.core.groupby.GroupBy.min.html#pandas.core.groupby.GroupBy.min"},{"t":"pandas.core.groupby.GroupBy.ngroup","d":"Number each group from 0 to the number of groups - 1.","p":"api\/pandas.core.groupby.GroupBy.ngroup.html#pandas.core.groupby.GroupBy.ngroup"},{"t":"pandas.core.groupby.GroupBy.nth","d":"Take the nth row from each group if n is an int, or a subset of rows if n is a list of ints.","p":"api\/pandas.core.groupby.GroupBy.nth.html#pandas.core.groupby.GroupBy.nth"},{"t":"pandas.core.groupby.GroupBy.ohlc","d":"Compute open, high, low and close values of a group, excluding missing values.","p":"api\/pandas.core.groupby.GroupBy.ohlc.html#pandas.core.groupby.GroupBy.ohlc"},{"t":"pandas.core.groupby.GroupBy.pad","d":"Forward fill the values.","p":"api\/pandas.core.groupby.GroupBy.pad.html#pandas.core.groupby.GroupBy.pad"},{"t":"pandas.core.groupby.GroupBy.prod","d":"Compute prod of group values.","p":"api\/pandas.core.groupby.GroupBy.prod.html#pandas.core.groupby.GroupBy.prod"},{"t":"pandas.core.groupby.GroupBy.rank","d":"Provide the rank of values within each group.","p":"api\/pandas.core.groupby.GroupBy.rank.html#pandas.core.groupby.GroupBy.rank"},{"t":"pandas.core.groupby.GroupBy.pct_change","d":"Calculate pct_change of each value to previous entry in group.","p":"api\/pandas.core.groupby.GroupBy.pct_change.html#pandas.core.groupby.GroupBy.pct_change"},{"t":"pandas.core.groupby.GroupBy.size","d":"Compute group sizes.","p":"api\/pandas.core.groupby.GroupBy.size.html#pandas.core.groupby.GroupBy.size"},{"t":"pandas.core.groupby.GroupBy.sem","d":"Compute standard error of the mean of groups, excluding missing values.","p":"api\/pandas.core.groupby.GroupBy.sem.html#pandas.core.groupby.GroupBy.sem"},{"t":"pandas.core.groupby.GroupBy.std","d":"Compute standard deviation of groups, excluding missing values.","p":"api\/pandas.core.groupby.GroupBy.std.html#pandas.core.groupby.GroupBy.std"},{"t":"pandas.core.groupby.GroupBy.sum","d":"Compute sum of group values.","p":"api\/pandas.core.groupby.GroupBy.sum.html#pandas.core.groupby.GroupBy.sum"},{"t":"pandas.core.groupby.GroupBy.var","d":"Compute variance of groups, excluding missing values.","p":"api\/pandas.core.groupby.GroupBy.var.html#pandas.core.groupby.GroupBy.var"},{"t":"pandas.core.groupby.GroupBy.tail","d":"Return last n rows of each group.","p":"api\/pandas.core.groupby.GroupBy.tail.html#pandas.core.groupby.GroupBy.tail"},{"t":"pandas.core.groupby.DataFrameGroupBy.all","d":"Return True if all values in the group are truthful, else False.","p":"api\/pandas.core.groupby.DataFrameGroupBy.all.html#pandas.core.groupby.DataFrameGroupBy.all"},{"t":"pandas.core.groupby.DataFrameGroupBy.any","d":"Return True if any value in the group is truthful, else False.","p":"api\/pandas.core.groupby.DataFrameGroupBy.any.html#pandas.core.groupby.DataFrameGroupBy.any"},{"t":"pandas.core.groupby.DataFrameGroupBy.backfill","d":"Backward fill the values.","p":"api\/pandas.core.groupby.DataFrameGroupBy.backfill.html#pandas.core.groupby.DataFrameGroupBy.backfill"},{"t":"pandas.core.groupby.DataFrameGroupBy.bfill","d":"Backward fill the values.","p":"api\/pandas.core.groupby.DataFrameGroupBy.bfill.html#pandas.core.groupby.DataFrameGroupBy.bfill"},{"t":"pandas.core.groupby.DataFrameGroupBy.corr","d":"Compute pairwise correlation of columns, excluding NA\/null values.","p":"api\/pandas.core.groupby.DataFrameGroupBy.corr.html#pandas.core.groupby.DataFrameGroupBy.corr"},{"t":"pandas.core.groupby.DataFrameGroupBy.count","d":"Compute count of group, excluding missing values.","p":"api\/pandas.core.groupby.DataFrameGroupBy.count.html#pandas.core.groupby.DataFrameGroupBy.count"},{"t":"pandas.core.groupby.DataFrameGroupBy.cov","d":"Compute pairwise covariance of columns, excluding NA\/null values.","p":"api\/pandas.core.groupby.DataFrameGroupBy.cov.html#pandas.core.groupby.DataFrameGroupBy.cov"},{"t":"pandas.core.groupby.DataFrameGroupBy.cumcount","d":"Number each item in each group from 0 to the length of that group - 1.","p":"api\/pandas.core.groupby.DataFrameGroupBy.cumcount.html#pandas.core.groupby.DataFrameGroupBy.cumcount"},{"t":"pandas.core.groupby.DataFrameGroupBy.cummax","d":"Cumulative max for each group.","p":"api\/pandas.core.groupby.DataFrameGroupBy.cummax.html#pandas.core.groupby.DataFrameGroupBy.cummax"},{"t":"pandas.core.groupby.DataFrameGroupBy.cummin","d":"Cumulative min for each group.","p":"api\/pandas.core.groupby.DataFrameGroupBy.cummin.html#pandas.core.groupby.DataFrameGroupBy.cummin"},{"t":"pandas.core.groupby.DataFrameGroupBy.cumprod","d":"Cumulative product for each group.","p":"api\/pandas.core.groupby.DataFrameGroupBy.cumprod.html#pandas.core.groupby.DataFrameGroupBy.cumprod"},{"t":"pandas.core.groupby.DataFrameGroupBy.cumsum","d":"Cumulative sum for each group.","p":"api\/pandas.core.groupby.DataFrameGroupBy.cumsum.html#pandas.core.groupby.DataFrameGroupBy.cumsum"},{"t":"pandas.core.groupby.DataFrameGroupBy.describe","d":"Generate descriptive statistics.","p":"api\/pandas.core.groupby.DataFrameGroupBy.describe.html#pandas.core.groupby.DataFrameGroupBy.describe"},{"t":"pandas.core.groupby.DataFrameGroupBy.diff","d":"First discrete difference of element.","p":"api\/pandas.core.groupby.DataFrameGroupBy.diff.html#pandas.core.groupby.DataFrameGroupBy.diff"},{"t":"pandas.core.groupby.DataFrameGroupBy.ffill","d":"Forward fill the values.","p":"api\/pandas.core.groupby.DataFrameGroupBy.ffill.html#pandas.core.groupby.DataFrameGroupBy.ffill"},{"t":"pandas.core.groupby.DataFrameGroupBy.fillna","d":"Fill NA\/NaN values using the specified method.","p":"api\/pandas.core.groupby.DataFrameGroupBy.fillna.html#pandas.core.groupby.DataFrameGroupBy.fillna"},{"t":"pandas.core.groupby.DataFrameGroupBy.filter","d":"Return a copy of a DataFrame excluding filtered elements.","p":"api\/pandas.core.groupby.DataFrameGroupBy.filter.html#pandas.core.groupby.DataFrameGroupBy.filter"},{"t":"pandas.core.groupby.DataFrameGroupBy.hist","d":"Make a histogram of the DataFrame\u2019s.","p":"api\/pandas.core.groupby.DataFrameGroupBy.hist.html#pandas.core.groupby.DataFrameGroupBy.hist"},{"t":"pandas.core.groupby.DataFrameGroupBy.idxmax","d":"Return index of first occurrence of maximum over requested axis.","p":"api\/pandas.core.groupby.DataFrameGroupBy.idxmax.html#pandas.core.groupby.DataFrameGroupBy.idxmax"},{"t":"pandas.core.groupby.DataFrameGroupBy.idxmin","d":"Return index of first occurrence of minimum over requested axis.","p":"api\/pandas.core.groupby.DataFrameGroupBy.idxmin.html#pandas.core.groupby.DataFrameGroupBy.idxmin"},{"t":"pandas.core.groupby.DataFrameGroupBy.mad","d":"Return the mean absolute deviation of the values over the requested axis.","p":"api\/pandas.core.groupby.DataFrameGroupBy.mad.html#pandas.core.groupby.DataFrameGroupBy.mad"},{"t":"pandas.core.groupby.DataFrameGroupBy.nunique","d":"Return DataFrame with counts of unique elements in each position.","p":"api\/pandas.core.groupby.DataFrameGroupBy.nunique.html#pandas.core.groupby.DataFrameGroupBy.nunique"},{"t":"pandas.core.groupby.DataFrameGroupBy.pad","d":"Forward fill the values.","p":"api\/pandas.core.groupby.DataFrameGroupBy.pad.html#pandas.core.groupby.DataFrameGroupBy.pad"},{"t":"pandas.core.groupby.DataFrameGroupBy.pct_change","d":"Calculate pct_change of each value to previous entry in group.","p":"api\/pandas.core.groupby.DataFrameGroupBy.pct_change.html#pandas.core.groupby.DataFrameGroupBy.pct_change"},{"t":"pandas.core.groupby.DataFrameGroupBy.plot","d":"Class implementing the .plot attribute for groupby objects.","p":"api\/pandas.core.groupby.DataFrameGroupBy.plot.html#pandas.core.groupby.DataFrameGroupBy.plot"},{"t":"pandas.core.groupby.DataFrameGroupBy.quantile","d":"Return group values at the given quantile, a la numpy.percentile.","p":"api\/pandas.core.groupby.DataFrameGroupBy.quantile.html#pandas.core.groupby.DataFrameGroupBy.quantile"},{"t":"pandas.core.groupby.DataFrameGroupBy.rank","d":"Provide the rank of values within each group.","p":"api\/pandas.core.groupby.DataFrameGroupBy.rank.html#pandas.core.groupby.DataFrameGroupBy.rank"},{"t":"pandas.core.groupby.DataFrameGroupBy.resample","d":"Provide resampling when using a TimeGrouper.","p":"api\/pandas.core.groupby.DataFrameGroupBy.resample.html#pandas.core.groupby.DataFrameGroupBy.resample"},{"t":"pandas.core.groupby.DataFrameGroupBy.sample","d":"Return a random sample of items from each group.","p":"api\/pandas.core.groupby.DataFrameGroupBy.sample.html#pandas.core.groupby.DataFrameGroupBy.sample"},{"t":"pandas.core.groupby.DataFrameGroupBy.shift","d":"Shift each group by periods observations.","p":"api\/pandas.core.groupby.DataFrameGroupBy.shift.html#pandas.core.groupby.DataFrameGroupBy.shift"},{"t":"pandas.core.groupby.DataFrameGroupBy.size","d":"Compute group sizes.","p":"api\/pandas.core.groupby.DataFrameGroupBy.size.html#pandas.core.groupby.DataFrameGroupBy.size"},{"t":"pandas.core.groupby.DataFrameGroupBy.skew","d":"Return unbiased skew over requested axis.","p":"api\/pandas.core.groupby.DataFrameGroupBy.skew.html#pandas.core.groupby.DataFrameGroupBy.skew"},{"t":"pandas.core.groupby.DataFrameGroupBy.take","d":"Return the elements in the given positional indices along an axis.","p":"api\/pandas.core.groupby.DataFrameGroupBy.take.html#pandas.core.groupby.DataFrameGroupBy.take"},{"t":"pandas.core.groupby.DataFrameGroupBy.tshift","d":"(DEPRECATED) Shift the time index, using the index\u2019s frequency if available.","p":"api\/pandas.core.groupby.DataFrameGroupBy.tshift.html#pandas.core.groupby.DataFrameGroupBy.tshift"},{"t":"pandas.core.groupby.SeriesGroupBy.hist","d":"Draw histogram of the input series using matplotlib.","p":"api\/pandas.core.groupby.SeriesGroupBy.hist.html#pandas.core.groupby.SeriesGroupBy.hist"},{"t":"pandas.core.groupby.SeriesGroupBy.nlargest","d":"Return the largest n elements.","p":"api\/pandas.core.groupby.SeriesGroupBy.nlargest.html#pandas.core.groupby.SeriesGroupBy.nlargest"},{"t":"pandas.core.groupby.SeriesGroupBy.nsmallest","d":"Return the smallest n elements.","p":"api\/pandas.core.groupby.SeriesGroupBy.nsmallest.html#pandas.core.groupby.SeriesGroupBy.nsmallest"},{"t":"pandas.core.groupby.SeriesGroupBy.nunique","d":"Return number of unique elements in the group.","p":"api\/pandas.core.groupby.SeriesGroupBy.nunique.html#pandas.core.groupby.SeriesGroupBy.nunique"},{"t":"pandas.core.groupby.SeriesGroupBy.unique","d":"Return unique values of Series object.","p":"api\/pandas.core.groupby.SeriesGroupBy.unique.html#pandas.core.groupby.SeriesGroupBy.unique"},{"t":"pandas.core.groupby.SeriesGroupBy.value_counts","d":"","p":"api\/pandas.core.groupby.SeriesGroupBy.value_counts.html#pandas.core.groupby.SeriesGroupBy.value_counts"},{"t":"pandas.core.groupby.SeriesGroupBy.is_monotonic_increasing","d":"Alias for is_monotonic.","p":"api\/pandas.core.groupby.SeriesGroupBy.is_monotonic_increasing.html#pandas.core.groupby.SeriesGroupBy.is_monotonic_increasing"},{"t":"pandas.core.groupby.SeriesGroupBy.is_monotonic_decreasing","d":"Return boolean if values in the object are monotonic_decreasing.","p":"api\/pandas.core.groupby.SeriesGroupBy.is_monotonic_decreasing.html#pandas.core.groupby.SeriesGroupBy.is_monotonic_decreasing"},{"t":"pandas.core.groupby.DataFrameGroupBy.corrwith","d":"Compute pairwise correlation.","p":"api\/pandas.core.groupby.DataFrameGroupBy.corrwith.html#pandas.core.groupby.DataFrameGroupBy.corrwith"},{"t":"pandas.core.groupby.DataFrameGroupBy.boxplot","d":"Make box plots from DataFrameGroupBy data.","p":"api\/pandas.core.groupby.DataFrameGroupBy.boxplot.html#pandas.core.groupby.DataFrameGroupBy.boxplot"},{"t":"pandas.core.resample.Resampler.__iter__","d":"Resampler iterator.","p":"api\/pandas.core.resample.Resampler.__iter__.html#pandas.core.resample.Resampler.__iter__"},{"t":"pandas.core.resample.Resampler.groups","d":"Dict {group name -> group labels}.","p":"api\/pandas.core.resample.Resampler.groups.html#pandas.core.resample.Resampler.groups"},{"t":"pandas.core.resample.Resampler.indices","d":"Dict {group name -> group indices}.","p":"api\/pandas.core.resample.Resampler.indices.html#pandas.core.resample.Resampler.indices"},{"t":"pandas.core.resample.Resampler.get_group","d":"Construct DataFrame from group with provided name.","p":"api\/pandas.core.resample.Resampler.get_group.html#pandas.core.resample.Resampler.get_group"},{"t":"pandas.core.resample.Resampler.apply","d":"Aggregate using one or more operations over the specified axis.","p":"api\/pandas.core.resample.Resampler.apply.html#pandas.core.resample.Resampler.apply"},{"t":"pandas.core.resample.Resampler.aggregate","d":"Aggregate using one or more operations over the specified axis.","p":"api\/pandas.core.resample.Resampler.aggregate.html#pandas.core.resample.Resampler.aggregate"},{"t":"pandas.core.resample.Resampler.transform","d":"Call function producing a like-indexed Series on each group and return a Series with the transformed values.","p":"api\/pandas.core.resample.Resampler.transform.html#pandas.core.resample.Resampler.transform"},{"t":"pandas.core.resample.Resampler.pipe","d":"Apply a function func with arguments to this Resampler object and return the function\u2019s result.","p":"api\/pandas.core.resample.Resampler.pipe.html#pandas.core.resample.Resampler.pipe"},{"t":"pandas.core.resample.Resampler.ffill","d":"Forward fill the values.","p":"api\/pandas.core.resample.Resampler.ffill.html#pandas.core.resample.Resampler.ffill"},{"t":"pandas.core.resample.Resampler.backfill","d":"Backward fill the new missing values in the resampled data.","p":"api\/pandas.core.resample.Resampler.backfill.html#pandas.core.resample.Resampler.backfill"},{"t":"pandas.core.resample.Resampler.bfill","d":"Backward fill the new missing values in the resampled data.","p":"api\/pandas.core.resample.Resampler.bfill.html#pandas.core.resample.Resampler.bfill"},{"t":"pandas.core.resample.Resampler.pad","d":"Forward fill the values.","p":"api\/pandas.core.resample.Resampler.pad.html#pandas.core.resample.Resampler.pad"},{"t":"pandas.core.resample.Resampler.nearest","d":"Resample by using the nearest value.","p":"api\/pandas.core.resample.Resampler.nearest.html#pandas.core.resample.Resampler.nearest"},{"t":"pandas.core.resample.Resampler.fillna","d":"Fill missing values introduced by upsampling.","p":"api\/pandas.core.resample.Resampler.fillna.html#pandas.core.resample.Resampler.fillna"},{"t":"pandas.core.resample.Resampler.asfreq","d":"Return the values at the new freq, essentially a reindex.","p":"api\/pandas.core.resample.Resampler.asfreq.html#pandas.core.resample.Resampler.asfreq"},{"t":"pandas.core.resample.Resampler.interpolate","d":"Interpolate values according to different methods.","p":"api\/pandas.core.resample.Resampler.interpolate.html#pandas.core.resample.Resampler.interpolate"},{"t":"pandas.core.resample.Resampler.count","d":"Compute count of group, excluding missing values.","p":"api\/pandas.core.resample.Resampler.count.html#pandas.core.resample.Resampler.count"},{"t":"pandas.core.resample.Resampler.nunique","d":"Return number of unique elements in the group.","p":"api\/pandas.core.resample.Resampler.nunique.html#pandas.core.resample.Resampler.nunique"},{"t":"pandas.core.resample.Resampler.first","d":"Compute first of group values.","p":"api\/pandas.core.resample.Resampler.first.html#pandas.core.resample.Resampler.first"},{"t":"pandas.core.resample.Resampler.last","d":"Compute last of group values.","p":"api\/pandas.core.resample.Resampler.last.html#pandas.core.resample.Resampler.last"},{"t":"pandas.core.resample.Resampler.max","d":"Compute max of group values.","p":"api\/pandas.core.resample.Resampler.max.html#pandas.core.resample.Resampler.max"},{"t":"pandas.core.resample.Resampler.mean","d":"Compute mean of groups, excluding missing values.","p":"api\/pandas.core.resample.Resampler.mean.html#pandas.core.resample.Resampler.mean"},{"t":"pandas.core.resample.Resampler.median","d":"Compute median of groups, excluding missing values.","p":"api\/pandas.core.resample.Resampler.median.html#pandas.core.resample.Resampler.median"},{"t":"pandas.core.resample.Resampler.min","d":"Compute min of group values.","p":"api\/pandas.core.resample.Resampler.min.html#pandas.core.resample.Resampler.min"},{"t":"pandas.core.resample.Resampler.ohlc","d":"Compute open, high, low and close values of a group, excluding missing values.","p":"api\/pandas.core.resample.Resampler.ohlc.html#pandas.core.resample.Resampler.ohlc"},{"t":"pandas.core.resample.Resampler.prod","d":"Compute prod of group values.","p":"api\/pandas.core.resample.Resampler.prod.html#pandas.core.resample.Resampler.prod"},{"t":"pandas.core.resample.Resampler.size","d":"Compute group sizes.","p":"api\/pandas.core.resample.Resampler.size.html#pandas.core.resample.Resampler.size"},{"t":"pandas.core.resample.Resampler.sem","d":"Compute standard error of the mean of groups, excluding missing values.","p":"api\/pandas.core.resample.Resampler.sem.html#pandas.core.resample.Resampler.sem"},{"t":"pandas.core.resample.Resampler.std","d":"Compute standard deviation of groups, excluding missing values.","p":"api\/pandas.core.resample.Resampler.std.html#pandas.core.resample.Resampler.std"},{"t":"pandas.core.resample.Resampler.sum","d":"Compute sum of group values.","p":"api\/pandas.core.resample.Resampler.sum.html#pandas.core.resample.Resampler.sum"},{"t":"pandas.core.resample.Resampler.var","d":"Compute variance of groups, excluding missing values.","p":"api\/pandas.core.resample.Resampler.var.html#pandas.core.resample.Resampler.var"},{"t":"pandas.core.resample.Resampler.quantile","d":"Return value at the given quantile.","p":"api\/pandas.core.resample.Resampler.quantile.html#pandas.core.resample.Resampler.quantile"},{"t":"pandas.io.formats.style.Styler","d":"Helps style a DataFrame or Series according to the data with HTML and CSS.","p":"api\/pandas.io.formats.style.Styler.html#pandas.io.formats.style.Styler"},{"t":"pandas.io.formats.style.Styler.from_custom_template","d":"Factory function for creating a subclass of Styler.","p":"api\/pandas.io.formats.style.Styler.from_custom_template.html#pandas.io.formats.style.Styler.from_custom_template"},{"t":"pandas.io.formats.style.Styler.env","d":"","p":"api\/pandas.io.formats.style.Styler.env.html#pandas.io.formats.style.Styler.env"},{"t":"pandas.io.formats.style.Styler.template","d":"","p":"api\/pandas.io.formats.style.Styler.template.html#pandas.io.formats.style.Styler.template"},{"t":"pandas.io.formats.style.Styler.loader","d":"","p":"api\/pandas.io.formats.style.Styler.loader.html#pandas.io.formats.style.Styler.loader"},{"t":"pandas.io.formats.style.Styler.apply","d":"Apply a function column-wise, row-wise, or table-wise.","p":"api\/pandas.io.formats.style.Styler.apply.html#pandas.io.formats.style.Styler.apply"},{"t":"pandas.io.formats.style.Styler.applymap","d":"Apply a function elementwise.","p":"api\/pandas.io.formats.style.Styler.applymap.html#pandas.io.formats.style.Styler.applymap"},{"t":"pandas.io.formats.style.Styler.where","d":"Apply a function elementwise.","p":"api\/pandas.io.formats.style.Styler.where.html#pandas.io.formats.style.Styler.where"},{"t":"pandas.io.formats.style.Styler.format","d":"Format the text display value of cells.","p":"api\/pandas.io.formats.style.Styler.format.html#pandas.io.formats.style.Styler.format"},{"t":"pandas.io.formats.style.Styler.set_precision","d":"Set the precision used to render.","p":"api\/pandas.io.formats.style.Styler.set_precision.html#pandas.io.formats.style.Styler.set_precision"},{"t":"pandas.io.formats.style.Styler.set_td_classes","d":"Add string based CSS class names to data cells that will appear within the Styler HTML result.","p":"api\/pandas.io.formats.style.Styler.set_td_classes.html#pandas.io.formats.style.Styler.set_td_classes"},{"t":"pandas.io.formats.style.Styler.set_table_styles","d":"Set the table styles on a Styler.","p":"api\/pandas.io.formats.style.Styler.set_table_styles.html#pandas.io.formats.style.Styler.set_table_styles"},{"t":"pandas.io.formats.style.Styler.set_table_attributes","d":"Set the table attributes.","p":"api\/pandas.io.formats.style.Styler.set_table_attributes.html#pandas.io.formats.style.Styler.set_table_attributes"},{"t":"pandas.io.formats.style.Styler.set_caption","d":"Set the caption on a Styler.","p":"api\/pandas.io.formats.style.Styler.set_caption.html#pandas.io.formats.style.Styler.set_caption"},{"t":"pandas.io.formats.style.Styler.set_properties","d":"Method to set one or more non-data dependent properties or each cell.","p":"api\/pandas.io.formats.style.Styler.set_properties.html#pandas.io.formats.style.Styler.set_properties"},{"t":"pandas.io.formats.style.Styler.set_uuid","d":"Set the uuid for a Styler.","p":"api\/pandas.io.formats.style.Styler.set_uuid.html#pandas.io.formats.style.Styler.set_uuid"},{"t":"pandas.io.formats.style.Styler.set_na_rep","d":"Set the missing data representation on a Styler.","p":"api\/pandas.io.formats.style.Styler.set_na_rep.html#pandas.io.formats.style.Styler.set_na_rep"},{"t":"pandas.io.formats.style.Styler.clear","d":"Reset the styler, removing any previously applied styles.","p":"api\/pandas.io.formats.style.Styler.clear.html#pandas.io.formats.style.Styler.clear"},{"t":"pandas.io.formats.style.Styler.pipe","d":"Apply func(self, *args, **kwargs), and return the result.","p":"api\/pandas.io.formats.style.Styler.pipe.html#pandas.io.formats.style.Styler.pipe"},{"t":"pandas.io.formats.style.Styler.highlight_max","d":"Highlight the maximum by shading the background.","p":"api\/pandas.io.formats.style.Styler.highlight_max.html#pandas.io.formats.style.Styler.highlight_max"},{"t":"pandas.io.formats.style.Styler.highlight_min","d":"Highlight the minimum by shading the background.","p":"api\/pandas.io.formats.style.Styler.highlight_min.html#pandas.io.formats.style.Styler.highlight_min"},{"t":"pandas.io.formats.style.Styler.highlight_null","d":"Shade the background null_color for missing values.","p":"api\/pandas.io.formats.style.Styler.highlight_null.html#pandas.io.formats.style.Styler.highlight_null"},{"t":"pandas.io.formats.style.Styler.background_gradient","d":"Color the background in a gradient style.","p":"api\/pandas.io.formats.style.Styler.background_gradient.html#pandas.io.formats.style.Styler.background_gradient"},{"t":"pandas.io.formats.style.Styler.bar","d":"Draw bar chart in the cell backgrounds.","p":"api\/pandas.io.formats.style.Styler.bar.html#pandas.io.formats.style.Styler.bar"},{"t":"pandas.io.formats.style.Styler.render","d":"Render the built up styles to HTML.","p":"api\/pandas.io.formats.style.Styler.render.html#pandas.io.formats.style.Styler.render"},{"t":"pandas.io.formats.style.Styler.export","d":"Export the styles to applied to the current Styler.","p":"api\/pandas.io.formats.style.Styler.export.html#pandas.io.formats.style.Styler.export"},{"t":"pandas.io.formats.style.Styler.use","d":"Set the styles on the current Styler.","p":"api\/pandas.io.formats.style.Styler.use.html#pandas.io.formats.style.Styler.use"},{"t":"pandas.io.formats.style.Styler.to_excel","d":"Write Styler to an Excel sheet.","p":"api\/pandas.io.formats.style.Styler.to_excel.html#pandas.io.formats.style.Styler.to_excel"},{"t":"pandas.plotting.andrews_curves","d":"Generate a matplotlib plot of Andrews curves, for visualising clusters of multivariate data.","p":"api\/pandas.plotting.andrews_curves.html#pandas.plotting.andrews_curves"},{"t":"pandas.plotting.autocorrelation_plot","d":"Autocorrelation plot for time series.","p":"api\/pandas.plotting.autocorrelation_plot.html#pandas.plotting.autocorrelation_plot"},{"t":"pandas.plotting.bootstrap_plot","d":"Bootstrap plot on mean, median and mid-range statistics.","p":"api\/pandas.plotting.bootstrap_plot.html#pandas.plotting.bootstrap_plot"},{"t":"pandas.plotting.boxplot","d":"Make a box plot from DataFrame columns.","p":"api\/pandas.plotting.boxplot.html#pandas.plotting.boxplot"},{"t":"pandas.plotting.deregister_matplotlib_converters","d":"Remove pandas formatters and converters.","p":"api\/pandas.plotting.deregister_matplotlib_converters.html#pandas.plotting.deregister_matplotlib_converters"},{"t":"pandas.plotting.lag_plot","d":"Lag plot for time series.","p":"api\/pandas.plotting.lag_plot.html#pandas.plotting.lag_plot"},{"t":"pandas.plotting.parallel_coordinates","d":"Parallel coordinates plotting.","p":"api\/pandas.plotting.parallel_coordinates.html#pandas.plotting.parallel_coordinates"},{"t":"pandas.plotting.plot_params","d":"Stores pandas plotting options.","p":"api\/pandas.plotting.plot_params.html#pandas.plotting.plot_params"},{"t":"pandas.plotting.radviz","d":"Plot a multidimensional dataset in 2D.","p":"api\/pandas.plotting.radviz.html#pandas.plotting.radviz"},{"t":"pandas.plotting.register_matplotlib_converters","d":"Register pandas formatters and converters with matplotlib.","p":"api\/pandas.plotting.register_matplotlib_converters.html#pandas.plotting.register_matplotlib_converters"},{"t":"pandas.plotting.scatter_matrix","d":"Draw a matrix of scatter plots.","p":"api\/pandas.plotting.scatter_matrix.html#pandas.plotting.scatter_matrix"},{"t":"pandas.plotting.table","d":"Helper function to convert DataFrame and Series to matplotlib.table.","p":"api\/pandas.plotting.table.html#pandas.plotting.table"},{"t":"pandas.describe_option","d":"Prints the description for one or more registered options.","p":"api\/pandas.describe_option.html#pandas.describe_option"},{"t":"pandas.reset_option","d":"Reset one or more options to their default value.","p":"api\/pandas.reset_option.html#pandas.reset_option"},{"t":"pandas.get_option","d":"Retrieves the value of the specified option.","p":"api\/pandas.get_option.html#pandas.get_option"},{"t":"pandas.set_option","d":"Sets the value of the specified option.","p":"api\/pandas.set_option.html#pandas.set_option"},{"t":"pandas.option_context","d":"Context manager to temporarily set options in the with statement context.","p":"api\/pandas.option_context.html#pandas.option_context"},{"t":"pandas.testing.assert_frame_equal","d":"Check that left and right DataFrame are equal.","p":"api\/pandas.testing.assert_frame_equal.html#pandas.testing.assert_frame_equal"},{"t":"pandas.testing.assert_series_equal","d":"Check that left and right Series are equal.","p":"api\/pandas.testing.assert_series_equal.html#pandas.testing.assert_series_equal"},{"t":"pandas.testing.assert_index_equal","d":"Check that left and right Index are equal.","p":"api\/pandas.testing.assert_index_equal.html#pandas.testing.assert_index_equal"},{"t":"pandas.testing.assert_extension_array_equal","d":"Check that left and right ExtensionArrays are equal.","p":"api\/pandas.testing.assert_extension_array_equal.html#pandas.testing.assert_extension_array_equal"},{"t":"pandas.errors.AccessorRegistrationWarning","d":"Warning for attribute conflicts in accessor registration.","p":"api\/pandas.errors.AccessorRegistrationWarning.html#pandas.errors.AccessorRegistrationWarning"},{"t":"pandas.errors.DtypeWarning","d":"Warning raised when reading different dtypes in a column from a file.","p":"api\/pandas.errors.DtypeWarning.html#pandas.errors.DtypeWarning"},{"t":"pandas.errors.DuplicateLabelError","d":"Error raised when an operation would introduce duplicate labels.","p":"api\/pandas.errors.DuplicateLabelError.html#pandas.errors.DuplicateLabelError"},{"t":"pandas.errors.EmptyDataError","d":"Exception that is thrown in pd.read_csv (by both the C and Python engines) when empty data or header is encountered.","p":"api\/pandas.errors.EmptyDataError.html#pandas.errors.EmptyDataError"},{"t":"pandas.errors.InvalidIndexError","d":"Exception raised when attempting to use an invalid index key.","p":"api\/pandas.errors.InvalidIndexError.html#pandas.errors.InvalidIndexError"},{"t":"pandas.errors.MergeError","d":"Error raised when problems arise during merging due to problems with input data.","p":"api\/pandas.errors.MergeError.html#pandas.errors.MergeError"},{"t":"pandas.errors.NullFrequencyError","d":"Error raised when a null freq attribute is used in an operation that needs a non-null frequency, particularly DatetimeIndex.shift, TimedeltaIndex.shift, PeriodIndex.shift.","p":"api\/pandas.errors.NullFrequencyError.html#pandas.errors.NullFrequencyError"},{"t":"pandas.errors.NumbaUtilError","d":"Error raised for unsupported Numba engine routines.","p":"api\/pandas.errors.NumbaUtilError.html#pandas.errors.NumbaUtilError"},{"t":"pandas.errors.OutOfBoundsDatetime","d":"","p":"api\/pandas.errors.OutOfBoundsDatetime.html#pandas.errors.OutOfBoundsDatetime"},{"t":"pandas.errors.OutOfBoundsTimedelta","d":"Raised when encountering a timedelta value that cannot be represented as a timedelta64[ns].","p":"api\/pandas.errors.OutOfBoundsTimedelta.html#pandas.errors.OutOfBoundsTimedelta"},{"t":"pandas.errors.ParserError","d":"Exception that is raised by an error encountered in parsing file contents.","p":"api\/pandas.errors.ParserError.html#pandas.errors.ParserError"},{"t":"pandas.errors.ParserWarning","d":"Warning raised when reading a file that doesn\u2019t use the default \u2018c\u2019 parser.","p":"api\/pandas.errors.ParserWarning.html#pandas.errors.ParserWarning"},{"t":"pandas.errors.PerformanceWarning","d":"Warning raised when there is a possible performance impact.","p":"api\/pandas.errors.PerformanceWarning.html#pandas.errors.PerformanceWarning"},{"t":"pandas.errors.UnsortedIndexError","d":"Error raised when attempting to get a slice of a MultiIndex, and the index has not been lexsorted.","p":"api\/pandas.errors.UnsortedIndexError.html#pandas.errors.UnsortedIndexError"},{"t":"pandas.errors.UnsupportedFunctionCall","d":"Exception raised when attempting to call a numpy function on a pandas object, but that function is not supported by the object e.g.","p":"api\/pandas.errors.UnsupportedFunctionCall.html#pandas.errors.UnsupportedFunctionCall"},{"t":"pandas.api.types.union_categoricals","d":"Combine list-like of Categorical-like, unioning categories.","p":"api\/pandas.api.types.union_categoricals.html#pandas.api.types.union_categoricals"},{"t":"pandas.api.types.infer_dtype","d":"Efficiently infer the type of a passed val, or list-like array of values.","p":"api\/pandas.api.types.infer_dtype.html#pandas.api.types.infer_dtype"},{"t":"pandas.api.types.pandas_dtype","d":"Convert input into a pandas only dtype object or a numpy dtype object.","p":"api\/pandas.api.types.pandas_dtype.html#pandas.api.types.pandas_dtype"},{"t":"pandas.api.types.is_bool_dtype","d":"Check whether the provided array or dtype is of a boolean dtype.","p":"api\/pandas.api.types.is_bool_dtype.html#pandas.api.types.is_bool_dtype"},{"t":"pandas.api.types.is_categorical_dtype","d":"Check whether an array-like or dtype is of the Categorical dtype.","p":"api\/pandas.api.types.is_categorical_dtype.html#pandas.api.types.is_categorical_dtype"},{"t":"pandas.api.types.is_complex_dtype","d":"Check whether the provided array or dtype is of a complex dtype.","p":"api\/pandas.api.types.is_complex_dtype.html#pandas.api.types.is_complex_dtype"},{"t":"pandas.api.types.is_datetime64_any_dtype","d":"Check whether the provided array or dtype is of the datetime64 dtype.","p":"api\/pandas.api.types.is_datetime64_any_dtype.html#pandas.api.types.is_datetime64_any_dtype"},{"t":"pandas.api.types.is_datetime64_dtype","d":"Check whether an array-like or dtype is of the datetime64 dtype.","p":"api\/pandas.api.types.is_datetime64_dtype.html#pandas.api.types.is_datetime64_dtype"},{"t":"pandas.api.types.is_datetime64_ns_dtype","d":"Check whether the provided array or dtype is of the datetime64[ns] dtype.","p":"api\/pandas.api.types.is_datetime64_ns_dtype.html#pandas.api.types.is_datetime64_ns_dtype"},{"t":"pandas.api.types.is_datetime64tz_dtype","d":"Check whether an array-like or dtype is of a DatetimeTZDtype dtype.","p":"api\/pandas.api.types.is_datetime64tz_dtype.html#pandas.api.types.is_datetime64tz_dtype"},{"t":"pandas.api.types.is_extension_type","d":"(DEPRECATED) Check whether an array-like is of a pandas extension class instance.","p":"api\/pandas.api.types.is_extension_type.html#pandas.api.types.is_extension_type"},{"t":"pandas.api.types.is_extension_array_dtype","d":"Check if an object is a pandas extension array type.","p":"api\/pandas.api.types.is_extension_array_dtype.html#pandas.api.types.is_extension_array_dtype"},{"t":"pandas.api.types.is_float_dtype","d":"Check whether the provided array or dtype is of a float dtype.","p":"api\/pandas.api.types.is_float_dtype.html#pandas.api.types.is_float_dtype"},{"t":"pandas.api.types.is_int64_dtype","d":"Check whether the provided array or dtype is of the int64 dtype.","p":"api\/pandas.api.types.is_int64_dtype.html#pandas.api.types.is_int64_dtype"},{"t":"pandas.api.types.is_integer_dtype","d":"Check whether the provided array or dtype is of an integer dtype.","p":"api\/pandas.api.types.is_integer_dtype.html#pandas.api.types.is_integer_dtype"},{"t":"pandas.api.types.is_interval_dtype","d":"Check whether an array-like or dtype is of the Interval dtype.","p":"api\/pandas.api.types.is_interval_dtype.html#pandas.api.types.is_interval_dtype"},{"t":"pandas.api.types.is_numeric_dtype","d":"Check whether the provided array or dtype is of a numeric dtype.","p":"api\/pandas.api.types.is_numeric_dtype.html#pandas.api.types.is_numeric_dtype"},{"t":"pandas.api.types.is_object_dtype","d":"Check whether an array-like or dtype is of the object dtype.","p":"api\/pandas.api.types.is_object_dtype.html#pandas.api.types.is_object_dtype"},{"t":"pandas.api.types.is_period_dtype","d":"Check whether an array-like or dtype is of the Period dtype.","p":"api\/pandas.api.types.is_period_dtype.html#pandas.api.types.is_period_dtype"},{"t":"pandas.api.types.is_signed_integer_dtype","d":"Check whether the provided array or dtype is of a signed integer dtype.","p":"api\/pandas.api.types.is_signed_integer_dtype.html#pandas.api.types.is_signed_integer_dtype"},{"t":"pandas.api.types.is_string_dtype","d":"Check whether the provided array or dtype is of the string dtype.","p":"api\/pandas.api.types.is_string_dtype.html#pandas.api.types.is_string_dtype"},{"t":"pandas.api.types.is_timedelta64_dtype","d":"Check whether an array-like or dtype is of the timedelta64 dtype.","p":"api\/pandas.api.types.is_timedelta64_dtype.html#pandas.api.types.is_timedelta64_dtype"},{"t":"pandas.api.types.is_timedelta64_ns_dtype","d":"Check whether the provided array or dtype is of the timedelta64[ns] dtype.","p":"api\/pandas.api.types.is_timedelta64_ns_dtype.html#pandas.api.types.is_timedelta64_ns_dtype"},{"t":"pandas.api.types.is_unsigned_integer_dtype","d":"Check whether the provided array or dtype is of an unsigned integer dtype.","p":"api\/pandas.api.types.is_unsigned_integer_dtype.html#pandas.api.types.is_unsigned_integer_dtype"},{"t":"pandas.api.types.is_sparse","d":"Check whether an array-like is a 1-D pandas sparse array.","p":"api\/pandas.api.types.is_sparse.html#pandas.api.types.is_sparse"},{"t":"pandas.api.types.is_dict_like","d":"Check if the object is dict-like.","p":"api\/pandas.api.types.is_dict_like.html#pandas.api.types.is_dict_like"},{"t":"pandas.api.types.is_file_like","d":"Check if the object is a file-like object.","p":"api\/pandas.api.types.is_file_like.html#pandas.api.types.is_file_like"},{"t":"pandas.api.types.is_list_like","d":"Check if the object is list-like.","p":"api\/pandas.api.types.is_list_like.html#pandas.api.types.is_list_like"},{"t":"pandas.api.types.is_named_tuple","d":"Check if the object is a named tuple.","p":"api\/pandas.api.types.is_named_tuple.html#pandas.api.types.is_named_tuple"},{"t":"pandas.api.types.is_iterator","d":"Check if the object is an iterator.","p":"api\/pandas.api.types.is_iterator.html#pandas.api.types.is_iterator"},{"t":"pandas.api.types.is_bool","d":"Return True if given object is boolean.","p":"api\/pandas.api.types.is_bool.html#pandas.api.types.is_bool"},{"t":"pandas.api.types.is_categorical","d":"Check whether an array-like is a Categorical instance.","p":"api\/pandas.api.types.is_categorical.html#pandas.api.types.is_categorical"},{"t":"pandas.api.types.is_complex","d":"Return True if given object is complex.","p":"api\/pandas.api.types.is_complex.html#pandas.api.types.is_complex"},{"t":"pandas.api.types.is_float","d":"Return True if given object is float.","p":"api\/pandas.api.types.is_float.html#pandas.api.types.is_float"},{"t":"pandas.api.types.is_hashable","d":"Return True if hash(obj) will succeed, False otherwise.","p":"api\/pandas.api.types.is_hashable.html#pandas.api.types.is_hashable"},{"t":"pandas.api.types.is_integer","d":"Return True if given object is integer.","p":"api\/pandas.api.types.is_integer.html#pandas.api.types.is_integer"},{"t":"pandas.api.types.is_interval","d":"","p":"api\/pandas.api.types.is_interval.html#pandas.api.types.is_interval"},{"t":"pandas.api.types.is_number","d":"Check if the object is a number.","p":"api\/pandas.api.types.is_number.html#pandas.api.types.is_number"},{"t":"pandas.api.types.is_re","d":"Check if the object is a regex pattern instance.","p":"api\/pandas.api.types.is_re.html#pandas.api.types.is_re"},{"t":"pandas.api.types.is_re_compilable","d":"Check if the object can be compiled into a regex pattern instance.","p":"api\/pandas.api.types.is_re_compilable.html#pandas.api.types.is_re_compilable"},{"t":"pandas.api.types.is_scalar","d":"Return True if given object is scalar.","p":"api\/pandas.api.types.is_scalar.html#pandas.api.types.is_scalar"},{"t":"pandas.show_versions","d":"Provide useful information, important for bug reports.","p":"api\/pandas.show_versions.html#pandas.show_versions"},{"t":"pandas.api.extensions.register_extension_dtype","d":"Register an ExtensionType with pandas as class decorator.","p":"api\/pandas.api.extensions.register_extension_dtype.html#pandas.api.extensions.register_extension_dtype"},{"t":"pandas.api.extensions.register_dataframe_accessor","d":"Register a custom accessor on DataFrame objects.","p":"api\/pandas.api.extensions.register_dataframe_accessor.html#pandas.api.extensions.register_dataframe_accessor"},{"t":"pandas.api.extensions.register_series_accessor","d":"Register a custom accessor on Series objects.","p":"api\/pandas.api.extensions.register_series_accessor.html#pandas.api.extensions.register_series_accessor"},{"t":"pandas.api.extensions.register_index_accessor","d":"Register a custom accessor on Index objects.","p":"api\/pandas.api.extensions.register_index_accessor.html#pandas.api.extensions.register_index_accessor"},{"t":"pandas.api.extensions.ExtensionDtype","d":"A custom data type, to be paired with an ExtensionArray.","p":"api\/pandas.api.extensions.ExtensionDtype.html#pandas.api.extensions.ExtensionDtype"},{"t":"pandas.api.extensions.ExtensionArray","d":"Abstract base class for custom 1-D array types.","p":"api\/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray"},{"t":"pandas.arrays.PandasArray","d":"A pandas ExtensionArray for NumPy data.","p":"api\/pandas.arrays.PandasArray.html#pandas.arrays.PandasArray"},{"t":"pandas.api.indexers.check_array_indexer","d":"Check if indexer is a valid array indexer for array.","p":"api\/pandas.api.indexers.check_array_indexer.html#pandas.api.indexers.check_array_indexer"}]